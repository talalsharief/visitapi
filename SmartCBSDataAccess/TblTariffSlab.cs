using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblTariffSlab class.
	/// </summary>
    [Serializable]
	public partial class TblTariffSlabCollection : ActiveList<TblTariffSlab, TblTariffSlabCollection>
	{	   
		public TblTariffSlabCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblTariffSlabCollection</returns>
		public TblTariffSlabCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblTariffSlab o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblTariffSlabs table.
	/// </summary>
	[Serializable]
	public partial class TblTariffSlab : ActiveRecord<TblTariffSlab>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblTariffSlab()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblTariffSlab(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblTariffSlab(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblTariffSlab(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblTariffSlabs", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTariffSlabID = new TableSchema.TableColumn(schema);
				colvarTariffSlabID.ColumnName = "TariffSlabID";
				colvarTariffSlabID.DataType = DbType.Int32;
				colvarTariffSlabID.MaxLength = 0;
				colvarTariffSlabID.AutoIncrement = true;
				colvarTariffSlabID.IsNullable = false;
				colvarTariffSlabID.IsPrimaryKey = true;
				colvarTariffSlabID.IsForeignKey = false;
				colvarTariffSlabID.IsReadOnly = false;
				colvarTariffSlabID.DefaultSetting = @"";
				colvarTariffSlabID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTariffSlabID);
				
				TableSchema.TableColumn colvarTariffID = new TableSchema.TableColumn(schema);
				colvarTariffID.ColumnName = "TariffID";
				colvarTariffID.DataType = DbType.Int32;
				colvarTariffID.MaxLength = 0;
				colvarTariffID.AutoIncrement = false;
				colvarTariffID.IsNullable = true;
				colvarTariffID.IsPrimaryKey = false;
				colvarTariffID.IsForeignKey = true;
				colvarTariffID.IsReadOnly = false;
				colvarTariffID.DefaultSetting = @"";
				
					colvarTariffID.ForeignKeyTableName = "TblTariff";
				schema.Columns.Add(colvarTariffID);
				
				TableSchema.TableColumn colvarUnitsFrom = new TableSchema.TableColumn(schema);
				colvarUnitsFrom.ColumnName = "UnitsFrom";
				colvarUnitsFrom.DataType = DbType.Int32;
				colvarUnitsFrom.MaxLength = 0;
				colvarUnitsFrom.AutoIncrement = false;
				colvarUnitsFrom.IsNullable = true;
				colvarUnitsFrom.IsPrimaryKey = false;
				colvarUnitsFrom.IsForeignKey = false;
				colvarUnitsFrom.IsReadOnly = false;
				colvarUnitsFrom.DefaultSetting = @"";
				colvarUnitsFrom.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitsFrom);
				
				TableSchema.TableColumn colvarUnitsTo = new TableSchema.TableColumn(schema);
				colvarUnitsTo.ColumnName = "UnitsTo";
				colvarUnitsTo.DataType = DbType.Int32;
				colvarUnitsTo.MaxLength = 0;
				colvarUnitsTo.AutoIncrement = false;
				colvarUnitsTo.IsNullable = true;
				colvarUnitsTo.IsPrimaryKey = false;
				colvarUnitsTo.IsForeignKey = false;
				colvarUnitsTo.IsReadOnly = false;
				colvarUnitsTo.DefaultSetting = @"";
				colvarUnitsTo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitsTo);
				
				TableSchema.TableColumn colvarRate = new TableSchema.TableColumn(schema);
				colvarRate.ColumnName = "Rate";
				colvarRate.DataType = DbType.Decimal;
				colvarRate.MaxLength = 0;
				colvarRate.AutoIncrement = false;
				colvarRate.IsNullable = true;
				colvarRate.IsPrimaryKey = false;
				colvarRate.IsForeignKey = false;
				colvarRate.IsReadOnly = false;
				colvarRate.DefaultSetting = @"";
				colvarRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRate);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarMeterTypeID = new TableSchema.TableColumn(schema);
				colvarMeterTypeID.ColumnName = "MeterTypeID";
				colvarMeterTypeID.DataType = DbType.Int32;
				colvarMeterTypeID.MaxLength = 0;
				colvarMeterTypeID.AutoIncrement = false;
				colvarMeterTypeID.IsNullable = true;
				colvarMeterTypeID.IsPrimaryKey = false;
				colvarMeterTypeID.IsForeignKey = true;
				colvarMeterTypeID.IsReadOnly = false;
				colvarMeterTypeID.DefaultSetting = @"";
				
					colvarMeterTypeID.ForeignKeyTableName = "TblMeterType";
				schema.Columns.Add(colvarMeterTypeID);
				
				TableSchema.TableColumn colvarInsertedBy = new TableSchema.TableColumn(schema);
				colvarInsertedBy.ColumnName = "InsertedBy";
				colvarInsertedBy.DataType = DbType.Int32;
				colvarInsertedBy.MaxLength = 0;
				colvarInsertedBy.AutoIncrement = false;
				colvarInsertedBy.IsNullable = true;
				colvarInsertedBy.IsPrimaryKey = false;
				colvarInsertedBy.IsForeignKey = true;
				colvarInsertedBy.IsReadOnly = false;
				colvarInsertedBy.DefaultSetting = @"";
				
					colvarInsertedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarInsertedBy);
				
				TableSchema.TableColumn colvarFixedAmount = new TableSchema.TableColumn(schema);
				colvarFixedAmount.ColumnName = "FixedAmount";
				colvarFixedAmount.DataType = DbType.Decimal;
				colvarFixedAmount.MaxLength = 0;
				colvarFixedAmount.AutoIncrement = false;
				colvarFixedAmount.IsNullable = true;
				colvarFixedAmount.IsPrimaryKey = false;
				colvarFixedAmount.IsForeignKey = false;
				colvarFixedAmount.IsReadOnly = false;
				colvarFixedAmount.DefaultSetting = @"";
				colvarFixedAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFixedAmount);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblTariffSlabs",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TariffSlabID")]
		[Bindable(true)]
		public int TariffSlabID 
		{
			get { return GetColumnValue<int>(Columns.TariffSlabID); }
			set { SetColumnValue(Columns.TariffSlabID, value); }
		}
		  
		[XmlAttribute("TariffID")]
		[Bindable(true)]
		public int? TariffID 
		{
			get { return GetColumnValue<int?>(Columns.TariffID); }
			set { SetColumnValue(Columns.TariffID, value); }
		}
		  
		[XmlAttribute("UnitsFrom")]
		[Bindable(true)]
		public int? UnitsFrom 
		{
			get { return GetColumnValue<int?>(Columns.UnitsFrom); }
			set { SetColumnValue(Columns.UnitsFrom, value); }
		}
		  
		[XmlAttribute("UnitsTo")]
		[Bindable(true)]
		public int? UnitsTo 
		{
			get { return GetColumnValue<int?>(Columns.UnitsTo); }
			set { SetColumnValue(Columns.UnitsTo, value); }
		}
		  
		[XmlAttribute("Rate")]
		[Bindable(true)]
		public decimal? Rate 
		{
			get { return GetColumnValue<decimal?>(Columns.Rate); }
			set { SetColumnValue(Columns.Rate, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("MeterTypeID")]
		[Bindable(true)]
		public int? MeterTypeID 
		{
			get { return GetColumnValue<int?>(Columns.MeterTypeID); }
			set { SetColumnValue(Columns.MeterTypeID, value); }
		}
		  
		[XmlAttribute("InsertedBy")]
		[Bindable(true)]
		public int? InsertedBy 
		{
			get { return GetColumnValue<int?>(Columns.InsertedBy); }
			set { SetColumnValue(Columns.InsertedBy, value); }
		}
		  
		[XmlAttribute("FixedAmount")]
		[Bindable(true)]
		public decimal? FixedAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.FixedAmount); }
			set { SetColumnValue(Columns.FixedAmount, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblTariffSlab
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.InsertedBy); }
			set { SetColumnValue("InsertedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterType ActiveRecord object related to this TblTariffSlab
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterType TblMeterType
		{
			get { return SmartCBSDataAccess.TblMeterType.FetchByID(this.MeterTypeID); }
			set { SetColumnValue("MeterTypeID", value.MeterTypeID); }
		}
		
		
		/// <summary>
		/// Returns a TblTariff ActiveRecord object related to this TblTariffSlab
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblTariff TblTariff
		{
			get { return SmartCBSDataAccess.TblTariff.FetchByID(this.TariffID); }
			set { SetColumnValue("TariffID", value.TariffID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varTariffID,int? varUnitsFrom,int? varUnitsTo,decimal? varRate,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varMeterTypeID,int? varInsertedBy,decimal? varFixedAmount)
		{
			TblTariffSlab item = new TblTariffSlab();
			
			item.TariffID = varTariffID;
			
			item.UnitsFrom = varUnitsFrom;
			
			item.UnitsTo = varUnitsTo;
			
			item.Rate = varRate;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.MeterTypeID = varMeterTypeID;
			
			item.InsertedBy = varInsertedBy;
			
			item.FixedAmount = varFixedAmount;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTariffSlabID,int? varTariffID,int? varUnitsFrom,int? varUnitsTo,decimal? varRate,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varMeterTypeID,int? varInsertedBy,decimal? varFixedAmount)
		{
			TblTariffSlab item = new TblTariffSlab();
			
				item.TariffSlabID = varTariffSlabID;
			
				item.TariffID = varTariffID;
			
				item.UnitsFrom = varUnitsFrom;
			
				item.UnitsTo = varUnitsTo;
			
				item.Rate = varRate;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.MeterTypeID = varMeterTypeID;
			
				item.InsertedBy = varInsertedBy;
			
				item.FixedAmount = varFixedAmount;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TariffSlabIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TariffIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitsFromColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitsToColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterTypeIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn InsertedByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FixedAmountColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TariffSlabID = @"TariffSlabID";
			 public static string TariffID = @"TariffID";
			 public static string UnitsFrom = @"UnitsFrom";
			 public static string UnitsTo = @"UnitsTo";
			 public static string Rate = @"Rate";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string MeterTypeID = @"MeterTypeID";
			 public static string InsertedBy = @"InsertedBy";
			 public static string FixedAmount = @"FixedAmount";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
