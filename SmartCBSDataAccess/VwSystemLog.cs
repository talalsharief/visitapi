using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwSystemLog class.
    /// </summary>
    [Serializable]
    public partial class VwSystemLogCollection : ReadOnlyList<VwSystemLog, VwSystemLogCollection>
    {        
        public VwSystemLogCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwSystemLog view.
    /// </summary>
    [Serializable]
    public partial class VwSystemLog : ReadOnlyRecord<VwSystemLog>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwSystemLog", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarLogTime = new TableSchema.TableColumn(schema);
                colvarLogTime.ColumnName = "LogTime";
                colvarLogTime.DataType = DbType.DateTime;
                colvarLogTime.MaxLength = 0;
                colvarLogTime.AutoIncrement = false;
                colvarLogTime.IsNullable = true;
                colvarLogTime.IsPrimaryKey = false;
                colvarLogTime.IsForeignKey = false;
                colvarLogTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarLogTime);
                
                TableSchema.TableColumn colvarPageAccessed = new TableSchema.TableColumn(schema);
                colvarPageAccessed.ColumnName = "PageAccessed";
                colvarPageAccessed.DataType = DbType.AnsiString;
                colvarPageAccessed.MaxLength = 50;
                colvarPageAccessed.AutoIncrement = false;
                colvarPageAccessed.IsNullable = true;
                colvarPageAccessed.IsPrimaryKey = false;
                colvarPageAccessed.IsForeignKey = false;
                colvarPageAccessed.IsReadOnly = false;
                
                schema.Columns.Add(colvarPageAccessed);
                
                TableSchema.TableColumn colvarActivity = new TableSchema.TableColumn(schema);
                colvarActivity.ColumnName = "Activity";
                colvarActivity.DataType = DbType.AnsiString;
                colvarActivity.MaxLength = 250;
                colvarActivity.AutoIncrement = false;
                colvarActivity.IsNullable = true;
                colvarActivity.IsPrimaryKey = false;
                colvarActivity.IsForeignKey = false;
                colvarActivity.IsReadOnly = false;
                
                schema.Columns.Add(colvarActivity);
                
                TableSchema.TableColumn colvarBranchName = new TableSchema.TableColumn(schema);
                colvarBranchName.ColumnName = "BranchName";
                colvarBranchName.DataType = DbType.AnsiString;
                colvarBranchName.MaxLength = 150;
                colvarBranchName.AutoIncrement = false;
                colvarBranchName.IsNullable = true;
                colvarBranchName.IsPrimaryKey = false;
                colvarBranchName.IsForeignKey = false;
                colvarBranchName.IsReadOnly = false;
                
                schema.Columns.Add(colvarBranchName);
                
                TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
                colvarUserName.ColumnName = "UserName";
                colvarUserName.DataType = DbType.AnsiString;
                colvarUserName.MaxLength = 50;
                colvarUserName.AutoIncrement = false;
                colvarUserName.IsNullable = false;
                colvarUserName.IsPrimaryKey = false;
                colvarUserName.IsForeignKey = false;
                colvarUserName.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserName);
                
                TableSchema.TableColumn colvarUserLoginId = new TableSchema.TableColumn(schema);
                colvarUserLoginId.ColumnName = "UserLoginId";
                colvarUserLoginId.DataType = DbType.Int32;
                colvarUserLoginId.MaxLength = 0;
                colvarUserLoginId.AutoIncrement = false;
                colvarUserLoginId.IsNullable = false;
                colvarUserLoginId.IsPrimaryKey = false;
                colvarUserLoginId.IsForeignKey = false;
                colvarUserLoginId.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserLoginId);
                
                TableSchema.TableColumn colvarEmployeeName = new TableSchema.TableColumn(schema);
                colvarEmployeeName.ColumnName = "EmployeeName";
                colvarEmployeeName.DataType = DbType.AnsiString;
                colvarEmployeeName.MaxLength = 100;
                colvarEmployeeName.AutoIncrement = false;
                colvarEmployeeName.IsNullable = true;
                colvarEmployeeName.IsPrimaryKey = false;
                colvarEmployeeName.IsForeignKey = false;
                colvarEmployeeName.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmployeeName);
                
                TableSchema.TableColumn colvarLogID = new TableSchema.TableColumn(schema);
                colvarLogID.ColumnName = "LogID";
                colvarLogID.DataType = DbType.Int32;
                colvarLogID.MaxLength = 0;
                colvarLogID.AutoIncrement = false;
                colvarLogID.IsNullable = false;
                colvarLogID.IsPrimaryKey = false;
                colvarLogID.IsForeignKey = false;
                colvarLogID.IsReadOnly = false;
                
                schema.Columns.Add(colvarLogID);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwSystemLog",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwSystemLog()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwSystemLog(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwSystemLog(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwSystemLog(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("LogTime")]
        [Bindable(true)]
        public DateTime? LogTime 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("LogTime");
		    }
            set 
		    {
			    SetColumnValue("LogTime", value);
            }
        }
	      
        [XmlAttribute("PageAccessed")]
        [Bindable(true)]
        public string PageAccessed 
	    {
		    get
		    {
			    return GetColumnValue<string>("PageAccessed");
		    }
            set 
		    {
			    SetColumnValue("PageAccessed", value);
            }
        }
	      
        [XmlAttribute("Activity")]
        [Bindable(true)]
        public string Activity 
	    {
		    get
		    {
			    return GetColumnValue<string>("Activity");
		    }
            set 
		    {
			    SetColumnValue("Activity", value);
            }
        }
	      
        [XmlAttribute("BranchName")]
        [Bindable(true)]
        public string BranchName 
	    {
		    get
		    {
			    return GetColumnValue<string>("BranchName");
		    }
            set 
		    {
			    SetColumnValue("BranchName", value);
            }
        }
	      
        [XmlAttribute("UserName")]
        [Bindable(true)]
        public string UserName 
	    {
		    get
		    {
			    return GetColumnValue<string>("UserName");
		    }
            set 
		    {
			    SetColumnValue("UserName", value);
            }
        }
	      
        [XmlAttribute("UserLoginId")]
        [Bindable(true)]
        public int UserLoginId 
	    {
		    get
		    {
			    return GetColumnValue<int>("UserLoginId");
		    }
            set 
		    {
			    SetColumnValue("UserLoginId", value);
            }
        }
	      
        [XmlAttribute("EmployeeName")]
        [Bindable(true)]
        public string EmployeeName 
	    {
		    get
		    {
			    return GetColumnValue<string>("EmployeeName");
		    }
            set 
		    {
			    SetColumnValue("EmployeeName", value);
            }
        }
	      
        [XmlAttribute("LogID")]
        [Bindable(true)]
        public int LogID 
	    {
		    get
		    {
			    return GetColumnValue<int>("LogID");
		    }
            set 
		    {
			    SetColumnValue("LogID", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string LogTime = @"LogTime";
            
            public static string PageAccessed = @"PageAccessed";
            
            public static string Activity = @"Activity";
            
            public static string BranchName = @"BranchName";
            
            public static string UserName = @"UserName";
            
            public static string UserLoginId = @"UserLoginId";
            
            public static string EmployeeName = @"EmployeeName";
            
            public static string LogID = @"LogID";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
