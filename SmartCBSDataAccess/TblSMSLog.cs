using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblSMSLog class.
	/// </summary>
    [Serializable]
	public partial class TblSMSLogCollection : ActiveList<TblSMSLog, TblSMSLogCollection>
	{	   
		public TblSMSLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblSMSLogCollection</returns>
		public TblSMSLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblSMSLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblSMSLog table.
	/// </summary>
	[Serializable]
	public partial class TblSMSLog : ActiveRecord<TblSMSLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblSMSLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblSMSLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblSMSLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblSMSLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblSMSLog", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarSmsid = new TableSchema.TableColumn(schema);
				colvarSmsid.ColumnName = "SMSID";
				colvarSmsid.DataType = DbType.Int32;
				colvarSmsid.MaxLength = 0;
				colvarSmsid.AutoIncrement = true;
				colvarSmsid.IsNullable = false;
				colvarSmsid.IsPrimaryKey = true;
				colvarSmsid.IsForeignKey = false;
				colvarSmsid.IsReadOnly = false;
				colvarSmsid.DefaultSetting = @"";
				colvarSmsid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSmsid);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = -1;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarSendTo = new TableSchema.TableColumn(schema);
				colvarSendTo.ColumnName = "SendTo";
				colvarSendTo.DataType = DbType.AnsiString;
				colvarSendTo.MaxLength = 50;
				colvarSendTo.AutoIncrement = false;
				colvarSendTo.IsNullable = true;
				colvarSendTo.IsPrimaryKey = false;
				colvarSendTo.IsForeignKey = false;
				colvarSendTo.IsReadOnly = false;
				colvarSendTo.DefaultSetting = @"";
				colvarSendTo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSendTo);
				
				TableSchema.TableColumn colvarSMSContent = new TableSchema.TableColumn(schema);
				colvarSMSContent.ColumnName = "SMSContent";
				colvarSMSContent.DataType = DbType.String;
				colvarSMSContent.MaxLength = -1;
				colvarSMSContent.AutoIncrement = false;
				colvarSMSContent.IsNullable = true;
				colvarSMSContent.IsPrimaryKey = false;
				colvarSMSContent.IsForeignKey = false;
				colvarSMSContent.IsReadOnly = false;
				colvarSMSContent.DefaultSetting = @"";
				colvarSMSContent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSMSContent);
				
				TableSchema.TableColumn colvarNoOfSMS = new TableSchema.TableColumn(schema);
				colvarNoOfSMS.ColumnName = "NoOfSMS";
				colvarNoOfSMS.DataType = DbType.Int32;
				colvarNoOfSMS.MaxLength = 0;
				colvarNoOfSMS.AutoIncrement = false;
				colvarNoOfSMS.IsNullable = true;
				colvarNoOfSMS.IsPrimaryKey = false;
				colvarNoOfSMS.IsForeignKey = false;
				colvarNoOfSMS.IsReadOnly = false;
				colvarNoOfSMS.DefaultSetting = @"";
				colvarNoOfSMS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoOfSMS);
				
				TableSchema.TableColumn colvarSMSLength = new TableSchema.TableColumn(schema);
				colvarSMSLength.ColumnName = "SMSLength";
				colvarSMSLength.DataType = DbType.Int32;
				colvarSMSLength.MaxLength = 0;
				colvarSMSLength.AutoIncrement = false;
				colvarSMSLength.IsNullable = true;
				colvarSMSLength.IsPrimaryKey = false;
				colvarSMSLength.IsForeignKey = false;
				colvarSMSLength.IsReadOnly = false;
				colvarSMSLength.DefaultSetting = @"";
				colvarSMSLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSMSLength);
				
				TableSchema.TableColumn colvarIsSent = new TableSchema.TableColumn(schema);
				colvarIsSent.ColumnName = "IsSent";
				colvarIsSent.DataType = DbType.Boolean;
				colvarIsSent.MaxLength = 0;
				colvarIsSent.AutoIncrement = false;
				colvarIsSent.IsNullable = true;
				colvarIsSent.IsPrimaryKey = false;
				colvarIsSent.IsForeignKey = false;
				colvarIsSent.IsReadOnly = false;
				colvarIsSent.DefaultSetting = @"";
				colvarIsSent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSent);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarSMSCreatedBy = new TableSchema.TableColumn(schema);
				colvarSMSCreatedBy.ColumnName = "SMSCreatedBy";
				colvarSMSCreatedBy.DataType = DbType.Int32;
				colvarSMSCreatedBy.MaxLength = 0;
				colvarSMSCreatedBy.AutoIncrement = false;
				colvarSMSCreatedBy.IsNullable = true;
				colvarSMSCreatedBy.IsPrimaryKey = false;
				colvarSMSCreatedBy.IsForeignKey = true;
				colvarSMSCreatedBy.IsReadOnly = false;
				colvarSMSCreatedBy.DefaultSetting = @"";
				
					colvarSMSCreatedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarSMSCreatedBy);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblSMSLog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Smsid")]
		[Bindable(true)]
		public int Smsid 
		{
			get { return GetColumnValue<int>(Columns.Smsid); }
			set { SetColumnValue(Columns.Smsid, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("SendTo")]
		[Bindable(true)]
		public string SendTo 
		{
			get { return GetColumnValue<string>(Columns.SendTo); }
			set { SetColumnValue(Columns.SendTo, value); }
		}
		  
		[XmlAttribute("SMSContent")]
		[Bindable(true)]
		public string SMSContent 
		{
			get { return GetColumnValue<string>(Columns.SMSContent); }
			set { SetColumnValue(Columns.SMSContent, value); }
		}
		  
		[XmlAttribute("NoOfSMS")]
		[Bindable(true)]
		public int? NoOfSMS 
		{
			get { return GetColumnValue<int?>(Columns.NoOfSMS); }
			set { SetColumnValue(Columns.NoOfSMS, value); }
		}
		  
		[XmlAttribute("SMSLength")]
		[Bindable(true)]
		public int? SMSLength 
		{
			get { return GetColumnValue<int?>(Columns.SMSLength); }
			set { SetColumnValue(Columns.SMSLength, value); }
		}
		  
		[XmlAttribute("IsSent")]
		[Bindable(true)]
		public bool? IsSent 
		{
			get { return GetColumnValue<bool?>(Columns.IsSent); }
			set { SetColumnValue(Columns.IsSent, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("SMSCreatedBy")]
		[Bindable(true)]
		public int? SMSCreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.SMSCreatedBy); }
			set { SetColumnValue(Columns.SMSCreatedBy, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblSMSLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.SMSCreatedBy); }
			set { SetColumnValue("SMSCreatedBy", value.EmployeeID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varRemarks,string varSendTo,string varSMSContent,int? varNoOfSMS,int? varSMSLength,bool? varIsSent,DateTime? varCreatedOn,int? varSMSCreatedBy)
		{
			TblSMSLog item = new TblSMSLog();
			
			item.Remarks = varRemarks;
			
			item.SendTo = varSendTo;
			
			item.SMSContent = varSMSContent;
			
			item.NoOfSMS = varNoOfSMS;
			
			item.SMSLength = varSMSLength;
			
			item.IsSent = varIsSent;
			
			item.CreatedOn = varCreatedOn;
			
			item.SMSCreatedBy = varSMSCreatedBy;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varSmsid,string varRemarks,string varSendTo,string varSMSContent,int? varNoOfSMS,int? varSMSLength,bool? varIsSent,DateTime? varCreatedOn,int? varSMSCreatedBy)
		{
			TblSMSLog item = new TblSMSLog();
			
				item.Smsid = varSmsid;
			
				item.Remarks = varRemarks;
			
				item.SendTo = varSendTo;
			
				item.SMSContent = varSMSContent;
			
				item.NoOfSMS = varNoOfSMS;
			
				item.SMSLength = varSMSLength;
			
				item.IsSent = varIsSent;
			
				item.CreatedOn = varCreatedOn;
			
				item.SMSCreatedBy = varSMSCreatedBy;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SmsidColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SendToColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SMSContentColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NoOfSMSColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SMSLengthColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsSentColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SMSCreatedByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Smsid = @"SMSID";
			 public static string Remarks = @"Remarks";
			 public static string SendTo = @"SendTo";
			 public static string SMSContent = @"SMSContent";
			 public static string NoOfSMS = @"NoOfSMS";
			 public static string SMSLength = @"SMSLength";
			 public static string IsSent = @"IsSent";
			 public static string CreatedOn = @"CreatedOn";
			 public static string SMSCreatedBy = @"SMSCreatedBy";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
