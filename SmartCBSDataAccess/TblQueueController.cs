using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
    /// <summary>
    /// Controller class for tblQueue
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblQueueController
    {
        // Preload our schema..
        TblQueue thisSchemaLoad = new TblQueue();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblQueueCollection FetchAll()
        {
            TblQueueCollection coll = new TblQueueCollection();
            Query qry = new Query(TblQueue.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblQueueCollection FetchByID(object QueueID)
        {
            TblQueueCollection coll = new TblQueueCollection().Where("QueueID", QueueID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblQueueCollection FetchByQuery(Query qry)
        {
            TblQueueCollection coll = new TblQueueCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object QueueID)
        {
            return (TblQueue.Delete(QueueID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object QueueID)
        {
            return (TblQueue.Destroy(QueueID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string QueueGroupName,DateTime? QueueDate,string QueueDesc,bool? IsExecutable,int? ParentQueueID,bool? IsDismiss,int? CustomValue1,int? CustomValue2,int? CustomValue3,int? UserLoginID,int? MeterReadingUserID,int? BatchID)
	    {
		    TblQueue item = new TblQueue();
		    
            item.QueueGroupName = QueueGroupName;
            
            item.QueueDate = QueueDate;
            
            item.QueueDesc = QueueDesc;
            
            item.IsExecutable = IsExecutable;
            
            item.ParentQueueID = ParentQueueID;
            
            item.IsDismiss = IsDismiss;
            
            item.CustomValue1 = CustomValue1;
            
            item.CustomValue2 = CustomValue2;
            
            item.CustomValue3 = CustomValue3;
            
            item.UserLoginID = UserLoginID;
            
            item.MeterReadingUserID = MeterReadingUserID;
            
            item.BatchID = BatchID;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int QueueID,string QueueGroupName,DateTime? QueueDate,string QueueDesc,bool? IsExecutable,int? ParentQueueID,bool? IsDismiss,int? CustomValue1,int? CustomValue2,int? CustomValue3,int? UserLoginID,int? MeterReadingUserID,int? BatchID)
	    {
		    TblQueue item = new TblQueue();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.QueueID = QueueID;
				
			item.QueueGroupName = QueueGroupName;
				
			item.QueueDate = QueueDate;
				
			item.QueueDesc = QueueDesc;
				
			item.IsExecutable = IsExecutable;
				
			item.ParentQueueID = ParentQueueID;
				
			item.IsDismiss = IsDismiss;
				
			item.CustomValue1 = CustomValue1;
				
			item.CustomValue2 = CustomValue2;
				
			item.CustomValue3 = CustomValue3;
				
			item.UserLoginID = UserLoginID;
				
			item.MeterReadingUserID = MeterReadingUserID;
				
			item.BatchID = BatchID;
				
	        item.Save(UserName);
	    }
    }
}
