using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
    /// <summary>
    /// Controller class for TblInventoryLog
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblInventoryLogController
    {
        // Preload our schema..
        TblInventoryLog thisSchemaLoad = new TblInventoryLog();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblInventoryLogCollection FetchAll()
        {
            TblInventoryLogCollection coll = new TblInventoryLogCollection();
            Query qry = new Query(TblInventoryLog.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblInventoryLogCollection FetchByID(object InventoryLogID)
        {
            TblInventoryLogCollection coll = new TblInventoryLogCollection().Where("InventoryLogID", InventoryLogID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblInventoryLogCollection FetchByQuery(Query qry)
        {
            TblInventoryLogCollection coll = new TblInventoryLogCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object InventoryLogID)
        {
            return (TblInventoryLog.Delete(InventoryLogID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object InventoryLogID)
        {
            return (TblInventoryLog.Destroy(InventoryLogID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int MeterID,int? InventoryInID,int? DefectedID,DateTime? ModifiedOn,DateTime? CreatedOn,int? IssueID,int? ReplaceID,DateTime? InventoryLogDate,int? MeterIssueRequestID,int? BranchID,int? MeterDisConnectionID)
	    {
		    TblInventoryLog item = new TblInventoryLog();
		    
            item.MeterID = MeterID;
            
            item.InventoryInID = InventoryInID;
            
            item.DefectedID = DefectedID;
            
            item.ModifiedOn = ModifiedOn;
            
            item.CreatedOn = CreatedOn;
            
            item.IssueID = IssueID;
            
            item.ReplaceID = ReplaceID;
            
            item.InventoryLogDate = InventoryLogDate;
            
            item.MeterIssueRequestID = MeterIssueRequestID;
            
            item.BranchID = BranchID;
            
            item.MeterDisConnectionID = MeterDisConnectionID;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int InventoryLogID,int MeterID,int? InventoryInID,int? DefectedID,DateTime? ModifiedOn,DateTime? CreatedOn,int? IssueID,int? ReplaceID,DateTime? InventoryLogDate,int? MeterIssueRequestID,int? BranchID,int? MeterDisConnectionID)
	    {
		    TblInventoryLog item = new TblInventoryLog();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.InventoryLogID = InventoryLogID;
				
			item.MeterID = MeterID;
				
			item.InventoryInID = InventoryInID;
				
			item.DefectedID = DefectedID;
				
			item.ModifiedOn = ModifiedOn;
				
			item.CreatedOn = CreatedOn;
				
			item.IssueID = IssueID;
				
			item.ReplaceID = ReplaceID;
				
			item.InventoryLogDate = InventoryLogDate;
				
			item.MeterIssueRequestID = MeterIssueRequestID;
				
			item.BranchID = BranchID;
				
			item.MeterDisConnectionID = MeterDisConnectionID;
				
	        item.Save(UserName);
	    }
    }
}
