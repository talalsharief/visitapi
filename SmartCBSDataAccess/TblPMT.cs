using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblPMT class.
	/// </summary>
    [Serializable]
	public partial class TblPMTCollection : ActiveList<TblPMT, TblPMTCollection>
	{	   
		public TblPMTCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblPMTCollection</returns>
		public TblPMTCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblPMT o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblPMT table.
	/// </summary>
	[Serializable]
	public partial class TblPMT : ActiveRecord<TblPMT>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblPMT()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblPMT(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblPMT(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblPMT(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblPMT", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPmtid = new TableSchema.TableColumn(schema);
				colvarPmtid.ColumnName = "PMTID";
				colvarPmtid.DataType = DbType.Int32;
				colvarPmtid.MaxLength = 0;
				colvarPmtid.AutoIncrement = true;
				colvarPmtid.IsNullable = false;
				colvarPmtid.IsPrimaryKey = true;
				colvarPmtid.IsForeignKey = false;
				colvarPmtid.IsReadOnly = false;
				colvarPmtid.DefaultSetting = @"";
				colvarPmtid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPmtid);
				
				TableSchema.TableColumn colvarFeederID = new TableSchema.TableColumn(schema);
				colvarFeederID.ColumnName = "FeederID";
				colvarFeederID.DataType = DbType.Int32;
				colvarFeederID.MaxLength = 0;
				colvarFeederID.AutoIncrement = false;
				colvarFeederID.IsNullable = true;
				colvarFeederID.IsPrimaryKey = false;
				colvarFeederID.IsForeignKey = true;
				colvarFeederID.IsReadOnly = false;
				colvarFeederID.DefaultSetting = @"";
				
					colvarFeederID.ForeignKeyTableName = "TblFeeder";
				schema.Columns.Add(colvarFeederID);
				
				TableSchema.TableColumn colvarPMTNo = new TableSchema.TableColumn(schema);
				colvarPMTNo.ColumnName = "PMTNo";
				colvarPMTNo.DataType = DbType.AnsiString;
				colvarPMTNo.MaxLength = 50;
				colvarPMTNo.AutoIncrement = false;
				colvarPMTNo.IsNullable = true;
				colvarPMTNo.IsPrimaryKey = false;
				colvarPMTNo.IsForeignKey = false;
				colvarPMTNo.IsReadOnly = false;
				colvarPMTNo.DefaultSetting = @"";
				colvarPMTNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMTNo);
				
				TableSchema.TableColumn colvarPMTCode = new TableSchema.TableColumn(schema);
				colvarPMTCode.ColumnName = "PMTCode";
				colvarPMTCode.DataType = DbType.AnsiString;
				colvarPMTCode.MaxLength = 50;
				colvarPMTCode.AutoIncrement = false;
				colvarPMTCode.IsNullable = true;
				colvarPMTCode.IsPrimaryKey = false;
				colvarPMTCode.IsForeignKey = false;
				colvarPMTCode.IsReadOnly = false;
				colvarPMTCode.DefaultSetting = @"";
				colvarPMTCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMTCode);
				
				TableSchema.TableColumn colvarBrickID = new TableSchema.TableColumn(schema);
				colvarBrickID.ColumnName = "BrickID";
				colvarBrickID.DataType = DbType.Int32;
				colvarBrickID.MaxLength = 0;
				colvarBrickID.AutoIncrement = false;
				colvarBrickID.IsNullable = true;
				colvarBrickID.IsPrimaryKey = false;
				colvarBrickID.IsForeignKey = true;
				colvarBrickID.IsReadOnly = false;
				colvarBrickID.DefaultSetting = @"";
				
					colvarBrickID.ForeignKeyTableName = "TblBrick";
				schema.Columns.Add(colvarBrickID);
				
				TableSchema.TableColumn colvarBrickTypeID = new TableSchema.TableColumn(schema);
				colvarBrickTypeID.ColumnName = "BrickTypeID";
				colvarBrickTypeID.DataType = DbType.Int32;
				colvarBrickTypeID.MaxLength = 0;
				colvarBrickTypeID.AutoIncrement = false;
				colvarBrickTypeID.IsNullable = true;
				colvarBrickTypeID.IsPrimaryKey = false;
				colvarBrickTypeID.IsForeignKey = true;
				colvarBrickTypeID.IsReadOnly = false;
				colvarBrickTypeID.DefaultSetting = @"";
				
					colvarBrickTypeID.ForeignKeyTableName = "TblBrickType";
				schema.Columns.Add(colvarBrickTypeID);
				
				TableSchema.TableColumn colvarPMTStatusID = new TableSchema.TableColumn(schema);
				colvarPMTStatusID.ColumnName = "PMTStatusID";
				colvarPMTStatusID.DataType = DbType.Int32;
				colvarPMTStatusID.MaxLength = 0;
				colvarPMTStatusID.AutoIncrement = false;
				colvarPMTStatusID.IsNullable = true;
				colvarPMTStatusID.IsPrimaryKey = false;
				colvarPMTStatusID.IsForeignKey = true;
				colvarPMTStatusID.IsReadOnly = false;
				colvarPMTStatusID.DefaultSetting = @"";
				
					colvarPMTStatusID.ForeignKeyTableName = "TblPMTStatus";
				schema.Columns.Add(colvarPMTStatusID);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Int32;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Int32;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarLocation = new TableSchema.TableColumn(schema);
				colvarLocation.ColumnName = "Location";
				colvarLocation.DataType = DbType.AnsiString;
				colvarLocation.MaxLength = 150;
				colvarLocation.AutoIncrement = false;
				colvarLocation.IsNullable = true;
				colvarLocation.IsPrimaryKey = false;
				colvarLocation.IsForeignKey = false;
				colvarLocation.IsReadOnly = false;
				colvarLocation.DefaultSetting = @"";
				colvarLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocation);
				
				TableSchema.TableColumn colvarManufacturerCode = new TableSchema.TableColumn(schema);
				colvarManufacturerCode.ColumnName = "ManufacturerCode";
				colvarManufacturerCode.DataType = DbType.AnsiString;
				colvarManufacturerCode.MaxLength = 50;
				colvarManufacturerCode.AutoIncrement = false;
				colvarManufacturerCode.IsNullable = true;
				colvarManufacturerCode.IsPrimaryKey = false;
				colvarManufacturerCode.IsForeignKey = false;
				colvarManufacturerCode.IsReadOnly = false;
				colvarManufacturerCode.DefaultSetting = @"";
				colvarManufacturerCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManufacturerCode);
				
				TableSchema.TableColumn colvarPMTCapacity = new TableSchema.TableColumn(schema);
				colvarPMTCapacity.ColumnName = "PMTCapacity";
				colvarPMTCapacity.DataType = DbType.AnsiString;
				colvarPMTCapacity.MaxLength = 50;
				colvarPMTCapacity.AutoIncrement = false;
				colvarPMTCapacity.IsNullable = true;
				colvarPMTCapacity.IsPrimaryKey = false;
				colvarPMTCapacity.IsForeignKey = false;
				colvarPMTCapacity.IsReadOnly = false;
				colvarPMTCapacity.DefaultSetting = @"";
				colvarPMTCapacity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMTCapacity);
				
				TableSchema.TableColumn colvarCTRatio = new TableSchema.TableColumn(schema);
				colvarCTRatio.ColumnName = "CTRatio";
				colvarCTRatio.DataType = DbType.Decimal;
				colvarCTRatio.MaxLength = 0;
				colvarCTRatio.AutoIncrement = false;
				colvarCTRatio.IsNullable = true;
				colvarCTRatio.IsPrimaryKey = false;
				colvarCTRatio.IsForeignKey = false;
				colvarCTRatio.IsReadOnly = false;
				colvarCTRatio.DefaultSetting = @"";
				colvarCTRatio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCTRatio);
				
				TableSchema.TableColumn colvarMf = new TableSchema.TableColumn(schema);
				colvarMf.ColumnName = "MF";
				colvarMf.DataType = DbType.Int32;
				colvarMf.MaxLength = 0;
				colvarMf.AutoIncrement = false;
				colvarMf.IsNullable = true;
				colvarMf.IsPrimaryKey = false;
				colvarMf.IsForeignKey = false;
				colvarMf.IsReadOnly = false;
				colvarMf.DefaultSetting = @"";
				colvarMf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMf);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblPMT",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Pmtid")]
		[Bindable(true)]
		public int Pmtid 
		{
			get { return GetColumnValue<int>(Columns.Pmtid); }
			set { SetColumnValue(Columns.Pmtid, value); }
		}
		  
		[XmlAttribute("FeederID")]
		[Bindable(true)]
		public int? FeederID 
		{
			get { return GetColumnValue<int?>(Columns.FeederID); }
			set { SetColumnValue(Columns.FeederID, value); }
		}
		  
		[XmlAttribute("PMTNo")]
		[Bindable(true)]
		public string PMTNo 
		{
			get { return GetColumnValue<string>(Columns.PMTNo); }
			set { SetColumnValue(Columns.PMTNo, value); }
		}
		  
		[XmlAttribute("PMTCode")]
		[Bindable(true)]
		public string PMTCode 
		{
			get { return GetColumnValue<string>(Columns.PMTCode); }
			set { SetColumnValue(Columns.PMTCode, value); }
		}
		  
		[XmlAttribute("BrickID")]
		[Bindable(true)]
		public int? BrickID 
		{
			get { return GetColumnValue<int?>(Columns.BrickID); }
			set { SetColumnValue(Columns.BrickID, value); }
		}
		  
		[XmlAttribute("BrickTypeID")]
		[Bindable(true)]
		public int? BrickTypeID 
		{
			get { return GetColumnValue<int?>(Columns.BrickTypeID); }
			set { SetColumnValue(Columns.BrickTypeID, value); }
		}
		  
		[XmlAttribute("PMTStatusID")]
		[Bindable(true)]
		public int? PMTStatusID 
		{
			get { return GetColumnValue<int?>(Columns.PMTStatusID); }
			set { SetColumnValue(Columns.PMTStatusID, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public int? CreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public int? ModifiedBy 
		{
			get { return GetColumnValue<int?>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("Location")]
		[Bindable(true)]
		public string Location 
		{
			get { return GetColumnValue<string>(Columns.Location); }
			set { SetColumnValue(Columns.Location, value); }
		}
		  
		[XmlAttribute("ManufacturerCode")]
		[Bindable(true)]
		public string ManufacturerCode 
		{
			get { return GetColumnValue<string>(Columns.ManufacturerCode); }
			set { SetColumnValue(Columns.ManufacturerCode, value); }
		}
		  
		[XmlAttribute("PMTCapacity")]
		[Bindable(true)]
		public string PMTCapacity 
		{
			get { return GetColumnValue<string>(Columns.PMTCapacity); }
			set { SetColumnValue(Columns.PMTCapacity, value); }
		}
		  
		[XmlAttribute("CTRatio")]
		[Bindable(true)]
		public decimal? CTRatio 
		{
			get { return GetColumnValue<decimal?>(Columns.CTRatio); }
			set { SetColumnValue(Columns.CTRatio, value); }
		}
		  
		[XmlAttribute("Mf")]
		[Bindable(true)]
		public int? Mf 
		{
			get { return GetColumnValue<int?>(Columns.Mf); }
			set { SetColumnValue(Columns.Mf, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblBatchDetailCollection TblBatchDetails()
		{
			return new SmartCBSDataAccess.TblBatchDetailCollection().Where(TblBatchDetail.Columns.PMTid, Pmtid).Load();
		}
		public SmartCBSDataAccess.TblMeterCollection TblMeterRecords()
		{
			return new SmartCBSDataAccess.TblMeterCollection().Where(TblMeter.Columns.Pmtid, Pmtid).Load();
		}
		public SmartCBSDataAccess.TblPMTReadingCollection TblPMTReadingRecords()
		{
			return new SmartCBSDataAccess.TblPMTReadingCollection().Where(TblPMTReading.Columns.Pmtid, Pmtid).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblPMT
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblBrick ActiveRecord object related to this TblPMT
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBrick TblBrick
		{
			get { return SmartCBSDataAccess.TblBrick.FetchByID(this.BrickID); }
			set { SetColumnValue("BrickID", value.BrickID); }
		}
		
		
		/// <summary>
		/// Returns a TblBrickType ActiveRecord object related to this TblPMT
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBrickType TblBrickType
		{
			get { return SmartCBSDataAccess.TblBrickType.FetchByID(this.BrickTypeID); }
			set { SetColumnValue("BrickTypeID", value.BrickTypeID); }
		}
		
		
		/// <summary>
		/// Returns a TblFeeder ActiveRecord object related to this TblPMT
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblFeeder TblFeeder
		{
			get { return SmartCBSDataAccess.TblFeeder.FetchByID(this.FeederID); }
			set { SetColumnValue("FeederID", value.FeederID); }
		}
		
		
		/// <summary>
		/// Returns a TblPMTStatus ActiveRecord object related to this TblPMT
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblPMTStatus TblPMTStatus
		{
			get { return SmartCBSDataAccess.TblPMTStatus.FetchByID(this.PMTStatusID); }
			set { SetColumnValue("PMTStatusID", value.PMTStatusID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varFeederID,string varPMTNo,string varPMTCode,int? varBrickID,int? varBrickTypeID,int? varPMTStatusID,bool? varIsActive,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varCreatedBy,int? varModifiedBy,int? varBranchID,string varLocation,string varManufacturerCode,string varPMTCapacity,decimal? varCTRatio,int? varMf)
		{
			TblPMT item = new TblPMT();
			
			item.FeederID = varFeederID;
			
			item.PMTNo = varPMTNo;
			
			item.PMTCode = varPMTCode;
			
			item.BrickID = varBrickID;
			
			item.BrickTypeID = varBrickTypeID;
			
			item.PMTStatusID = varPMTStatusID;
			
			item.IsActive = varIsActive;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.CreatedBy = varCreatedBy;
			
			item.ModifiedBy = varModifiedBy;
			
			item.BranchID = varBranchID;
			
			item.Location = varLocation;
			
			item.ManufacturerCode = varManufacturerCode;
			
			item.PMTCapacity = varPMTCapacity;
			
			item.CTRatio = varCTRatio;
			
			item.Mf = varMf;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPmtid,int? varFeederID,string varPMTNo,string varPMTCode,int? varBrickID,int? varBrickTypeID,int? varPMTStatusID,bool? varIsActive,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varCreatedBy,int? varModifiedBy,int? varBranchID,string varLocation,string varManufacturerCode,string varPMTCapacity,decimal? varCTRatio,int? varMf)
		{
			TblPMT item = new TblPMT();
			
				item.Pmtid = varPmtid;
			
				item.FeederID = varFeederID;
			
				item.PMTNo = varPMTNo;
			
				item.PMTCode = varPMTCode;
			
				item.BrickID = varBrickID;
			
				item.BrickTypeID = varBrickTypeID;
			
				item.PMTStatusID = varPMTStatusID;
			
				item.IsActive = varIsActive;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.CreatedBy = varCreatedBy;
			
				item.ModifiedBy = varModifiedBy;
			
				item.BranchID = varBranchID;
			
				item.Location = varLocation;
			
				item.ManufacturerCode = varManufacturerCode;
			
				item.PMTCapacity = varPMTCapacity;
			
				item.CTRatio = varCTRatio;
			
				item.Mf = varMf;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PmtidColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FeederIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PMTNoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PMTCodeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BrickIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BrickTypeIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PMTStatusIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn LocationColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ManufacturerCodeColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PMTCapacityColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn CTRatioColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn MfColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Pmtid = @"PMTID";
			 public static string FeederID = @"FeederID";
			 public static string PMTNo = @"PMTNo";
			 public static string PMTCode = @"PMTCode";
			 public static string BrickID = @"BrickID";
			 public static string BrickTypeID = @"BrickTypeID";
			 public static string PMTStatusID = @"PMTStatusID";
			 public static string IsActive = @"IsActive";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string CreatedBy = @"CreatedBy";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string BranchID = @"BranchID";
			 public static string Location = @"Location";
			 public static string ManufacturerCode = @"ManufacturerCode";
			 public static string PMTCapacity = @"PMTCapacity";
			 public static string CTRatio = @"CTRatio";
			 public static string Mf = @"MF";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
