using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblNewConComRepProfile class.
	/// </summary>
    [Serializable]
	public partial class TblNewConComRepProfileCollection : ActiveList<TblNewConComRepProfile, TblNewConComRepProfileCollection>
	{	   
		public TblNewConComRepProfileCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblNewConComRepProfileCollection</returns>
		public TblNewConComRepProfileCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblNewConComRepProfile o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblNewConComRepProfile table.
	/// </summary>
	[Serializable]
	public partial class TblNewConComRepProfile : ActiveRecord<TblNewConComRepProfile>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblNewConComRepProfile()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblNewConComRepProfile(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblNewConComRepProfile(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblNewConComRepProfile(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblNewConComRepProfile", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCrpid = new TableSchema.TableColumn(schema);
				colvarCrpid.ColumnName = "CRPID";
				colvarCrpid.DataType = DbType.Int32;
				colvarCrpid.MaxLength = 0;
				colvarCrpid.AutoIncrement = true;
				colvarCrpid.IsNullable = false;
				colvarCrpid.IsPrimaryKey = true;
				colvarCrpid.IsForeignKey = false;
				colvarCrpid.IsReadOnly = false;
				colvarCrpid.DefaultSetting = @"";
				colvarCrpid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCrpid);
				
				TableSchema.TableColumn colvarCRPName = new TableSchema.TableColumn(schema);
				colvarCRPName.ColumnName = "CRPName";
				colvarCRPName.DataType = DbType.AnsiString;
				colvarCRPName.MaxLength = 50;
				colvarCRPName.AutoIncrement = false;
				colvarCRPName.IsNullable = true;
				colvarCRPName.IsPrimaryKey = false;
				colvarCRPName.IsForeignKey = false;
				colvarCRPName.IsReadOnly = false;
				colvarCRPName.DefaultSetting = @"";
				colvarCRPName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRPName);
				
				TableSchema.TableColumn colvarCRPFatherHusbandName = new TableSchema.TableColumn(schema);
				colvarCRPFatherHusbandName.ColumnName = "CRPFather_HusbandName";
				colvarCRPFatherHusbandName.DataType = DbType.AnsiString;
				colvarCRPFatherHusbandName.MaxLength = 50;
				colvarCRPFatherHusbandName.AutoIncrement = false;
				colvarCRPFatherHusbandName.IsNullable = true;
				colvarCRPFatherHusbandName.IsPrimaryKey = false;
				colvarCRPFatherHusbandName.IsForeignKey = false;
				colvarCRPFatherHusbandName.IsReadOnly = false;
				colvarCRPFatherHusbandName.DefaultSetting = @"";
				colvarCRPFatherHusbandName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRPFatherHusbandName);
				
				TableSchema.TableColumn colvarCRPCNICNo = new TableSchema.TableColumn(schema);
				colvarCRPCNICNo.ColumnName = "CRPCNICNo";
				colvarCRPCNICNo.DataType = DbType.AnsiString;
				colvarCRPCNICNo.MaxLength = 50;
				colvarCRPCNICNo.AutoIncrement = false;
				colvarCRPCNICNo.IsNullable = true;
				colvarCRPCNICNo.IsPrimaryKey = false;
				colvarCRPCNICNo.IsForeignKey = false;
				colvarCRPCNICNo.IsReadOnly = false;
				colvarCRPCNICNo.DefaultSetting = @"";
				colvarCRPCNICNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRPCNICNo);
				
				TableSchema.TableColumn colvarCRPCNICExpDate = new TableSchema.TableColumn(schema);
				colvarCRPCNICExpDate.ColumnName = "CRPCNICExpDate";
				colvarCRPCNICExpDate.DataType = DbType.AnsiString;
				colvarCRPCNICExpDate.MaxLength = 0;
				colvarCRPCNICExpDate.AutoIncrement = false;
				colvarCRPCNICExpDate.IsNullable = true;
				colvarCRPCNICExpDate.IsPrimaryKey = false;
				colvarCRPCNICExpDate.IsForeignKey = false;
				colvarCRPCNICExpDate.IsReadOnly = false;
				colvarCRPCNICExpDate.DefaultSetting = @"";
				colvarCRPCNICExpDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRPCNICExpDate);
				
				TableSchema.TableColumn colvarCRPDesignation = new TableSchema.TableColumn(schema);
				colvarCRPDesignation.ColumnName = "CRPDesignation";
				colvarCRPDesignation.DataType = DbType.AnsiString;
				colvarCRPDesignation.MaxLength = 50;
				colvarCRPDesignation.AutoIncrement = false;
				colvarCRPDesignation.IsNullable = true;
				colvarCRPDesignation.IsPrimaryKey = false;
				colvarCRPDesignation.IsForeignKey = false;
				colvarCRPDesignation.IsReadOnly = false;
				colvarCRPDesignation.DefaultSetting = @"";
				colvarCRPDesignation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRPDesignation);
				
				TableSchema.TableColumn colvarCRPAddress = new TableSchema.TableColumn(schema);
				colvarCRPAddress.ColumnName = "CRPAddress";
				colvarCRPAddress.DataType = DbType.AnsiString;
				colvarCRPAddress.MaxLength = -1;
				colvarCRPAddress.AutoIncrement = false;
				colvarCRPAddress.IsNullable = true;
				colvarCRPAddress.IsPrimaryKey = false;
				colvarCRPAddress.IsForeignKey = false;
				colvarCRPAddress.IsReadOnly = false;
				colvarCRPAddress.DefaultSetting = @"";
				colvarCRPAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRPAddress);
				
				TableSchema.TableColumn colvarCRPOfficePhone = new TableSchema.TableColumn(schema);
				colvarCRPOfficePhone.ColumnName = "CRPOfficePhone";
				colvarCRPOfficePhone.DataType = DbType.AnsiString;
				colvarCRPOfficePhone.MaxLength = 50;
				colvarCRPOfficePhone.AutoIncrement = false;
				colvarCRPOfficePhone.IsNullable = true;
				colvarCRPOfficePhone.IsPrimaryKey = false;
				colvarCRPOfficePhone.IsForeignKey = false;
				colvarCRPOfficePhone.IsReadOnly = false;
				colvarCRPOfficePhone.DefaultSetting = @"";
				colvarCRPOfficePhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRPOfficePhone);
				
				TableSchema.TableColumn colvarCRPMobileNo = new TableSchema.TableColumn(schema);
				colvarCRPMobileNo.ColumnName = "CRPMobileNo";
				colvarCRPMobileNo.DataType = DbType.AnsiString;
				colvarCRPMobileNo.MaxLength = 50;
				colvarCRPMobileNo.AutoIncrement = false;
				colvarCRPMobileNo.IsNullable = true;
				colvarCRPMobileNo.IsPrimaryKey = false;
				colvarCRPMobileNo.IsForeignKey = false;
				colvarCRPMobileNo.IsReadOnly = false;
				colvarCRPMobileNo.DefaultSetting = @"";
				colvarCRPMobileNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRPMobileNo);
				
				TableSchema.TableColumn colvarCRPEmail = new TableSchema.TableColumn(schema);
				colvarCRPEmail.ColumnName = "CRPEmail";
				colvarCRPEmail.DataType = DbType.AnsiString;
				colvarCRPEmail.MaxLength = 50;
				colvarCRPEmail.AutoIncrement = false;
				colvarCRPEmail.IsNullable = true;
				colvarCRPEmail.IsPrimaryKey = false;
				colvarCRPEmail.IsForeignKey = false;
				colvarCRPEmail.IsReadOnly = false;
				colvarCRPEmail.DefaultSetting = @"";
				colvarCRPEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRPEmail);
				
				TableSchema.TableColumn colvarNewConnectionID = new TableSchema.TableColumn(schema);
				colvarNewConnectionID.ColumnName = "NewConnectionID";
				colvarNewConnectionID.DataType = DbType.Int32;
				colvarNewConnectionID.MaxLength = 0;
				colvarNewConnectionID.AutoIncrement = false;
				colvarNewConnectionID.IsNullable = true;
				colvarNewConnectionID.IsPrimaryKey = false;
				colvarNewConnectionID.IsForeignKey = true;
				colvarNewConnectionID.IsReadOnly = false;
				colvarNewConnectionID.DefaultSetting = @"";
				
					colvarNewConnectionID.ForeignKeyTableName = "TblNewConnection";
				schema.Columns.Add(colvarNewConnectionID);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblNewConComRepProfile",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Crpid")]
		[Bindable(true)]
		public int Crpid 
		{
			get { return GetColumnValue<int>(Columns.Crpid); }
			set { SetColumnValue(Columns.Crpid, value); }
		}
		  
		[XmlAttribute("CRPName")]
		[Bindable(true)]
		public string CRPName 
		{
			get { return GetColumnValue<string>(Columns.CRPName); }
			set { SetColumnValue(Columns.CRPName, value); }
		}
		  
		[XmlAttribute("CRPFatherHusbandName")]
		[Bindable(true)]
		public string CRPFatherHusbandName 
		{
			get { return GetColumnValue<string>(Columns.CRPFatherHusbandName); }
			set { SetColumnValue(Columns.CRPFatherHusbandName, value); }
		}
		  
		[XmlAttribute("CRPCNICNo")]
		[Bindable(true)]
		public string CRPCNICNo 
		{
			get { return GetColumnValue<string>(Columns.CRPCNICNo); }
			set { SetColumnValue(Columns.CRPCNICNo, value); }
		}
		  
		[XmlAttribute("CRPCNICExpDate")]
		[Bindable(true)]
		public string CRPCNICExpDate 
		{
			get { return GetColumnValue<string>(Columns.CRPCNICExpDate); }
			set { SetColumnValue(Columns.CRPCNICExpDate, value); }
		}
		  
		[XmlAttribute("CRPDesignation")]
		[Bindable(true)]
		public string CRPDesignation 
		{
			get { return GetColumnValue<string>(Columns.CRPDesignation); }
			set { SetColumnValue(Columns.CRPDesignation, value); }
		}
		  
		[XmlAttribute("CRPAddress")]
		[Bindable(true)]
		public string CRPAddress 
		{
			get { return GetColumnValue<string>(Columns.CRPAddress); }
			set { SetColumnValue(Columns.CRPAddress, value); }
		}
		  
		[XmlAttribute("CRPOfficePhone")]
		[Bindable(true)]
		public string CRPOfficePhone 
		{
			get { return GetColumnValue<string>(Columns.CRPOfficePhone); }
			set { SetColumnValue(Columns.CRPOfficePhone, value); }
		}
		  
		[XmlAttribute("CRPMobileNo")]
		[Bindable(true)]
		public string CRPMobileNo 
		{
			get { return GetColumnValue<string>(Columns.CRPMobileNo); }
			set { SetColumnValue(Columns.CRPMobileNo, value); }
		}
		  
		[XmlAttribute("CRPEmail")]
		[Bindable(true)]
		public string CRPEmail 
		{
			get { return GetColumnValue<string>(Columns.CRPEmail); }
			set { SetColumnValue(Columns.CRPEmail, value); }
		}
		  
		[XmlAttribute("NewConnectionID")]
		[Bindable(true)]
		public int? NewConnectionID 
		{
			get { return GetColumnValue<int?>(Columns.NewConnectionID); }
			set { SetColumnValue(Columns.NewConnectionID, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblNewConnection ActiveRecord object related to this TblNewConComRepProfile
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblNewConnection TblNewConnection
		{
			get { return SmartCBSDataAccess.TblNewConnection.FetchByID(this.NewConnectionID); }
			set { SetColumnValue("NewConnectionID", value.NewConnectionID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCRPName,string varCRPFatherHusbandName,string varCRPCNICNo,string varCRPCNICExpDate,string varCRPDesignation,string varCRPAddress,string varCRPOfficePhone,string varCRPMobileNo,string varCRPEmail,int? varNewConnectionID,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblNewConComRepProfile item = new TblNewConComRepProfile();
			
			item.CRPName = varCRPName;
			
			item.CRPFatherHusbandName = varCRPFatherHusbandName;
			
			item.CRPCNICNo = varCRPCNICNo;
			
			item.CRPCNICExpDate = varCRPCNICExpDate;
			
			item.CRPDesignation = varCRPDesignation;
			
			item.CRPAddress = varCRPAddress;
			
			item.CRPOfficePhone = varCRPOfficePhone;
			
			item.CRPMobileNo = varCRPMobileNo;
			
			item.CRPEmail = varCRPEmail;
			
			item.NewConnectionID = varNewConnectionID;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCrpid,string varCRPName,string varCRPFatherHusbandName,string varCRPCNICNo,string varCRPCNICExpDate,string varCRPDesignation,string varCRPAddress,string varCRPOfficePhone,string varCRPMobileNo,string varCRPEmail,int? varNewConnectionID,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblNewConComRepProfile item = new TblNewConComRepProfile();
			
				item.Crpid = varCrpid;
			
				item.CRPName = varCRPName;
			
				item.CRPFatherHusbandName = varCRPFatherHusbandName;
			
				item.CRPCNICNo = varCRPCNICNo;
			
				item.CRPCNICExpDate = varCRPCNICExpDate;
			
				item.CRPDesignation = varCRPDesignation;
			
				item.CRPAddress = varCRPAddress;
			
				item.CRPOfficePhone = varCRPOfficePhone;
			
				item.CRPMobileNo = varCRPMobileNo;
			
				item.CRPEmail = varCRPEmail;
			
				item.NewConnectionID = varNewConnectionID;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CrpidColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CRPNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CRPFatherHusbandNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CRPCNICNoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CRPCNICExpDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CRPDesignationColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CRPAddressColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CRPOfficePhoneColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CRPMobileNoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CRPEmailColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NewConnectionIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Crpid = @"CRPID";
			 public static string CRPName = @"CRPName";
			 public static string CRPFatherHusbandName = @"CRPFather_HusbandName";
			 public static string CRPCNICNo = @"CRPCNICNo";
			 public static string CRPCNICExpDate = @"CRPCNICExpDate";
			 public static string CRPDesignation = @"CRPDesignation";
			 public static string CRPAddress = @"CRPAddress";
			 public static string CRPOfficePhone = @"CRPOfficePhone";
			 public static string CRPMobileNo = @"CRPMobileNo";
			 public static string CRPEmail = @"CRPEmail";
			 public static string NewConnectionID = @"NewConnectionID";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
