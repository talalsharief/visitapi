using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblConsumerLedger class.
	/// </summary>
    [Serializable]
	public partial class TblConsumerLedgerCollection : ActiveList<TblConsumerLedger, TblConsumerLedgerCollection>
	{	   
		public TblConsumerLedgerCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblConsumerLedgerCollection</returns>
		public TblConsumerLedgerCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblConsumerLedger o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblConsumerLedger table.
	/// </summary>
	[Serializable]
	public partial class TblConsumerLedger : ActiveRecord<TblConsumerLedger>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblConsumerLedger()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblConsumerLedger(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblConsumerLedger(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblConsumerLedger(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblConsumerLedger", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCustomerLedgerID = new TableSchema.TableColumn(schema);
				colvarCustomerLedgerID.ColumnName = "CustomerLedgerID";
				colvarCustomerLedgerID.DataType = DbType.Int32;
				colvarCustomerLedgerID.MaxLength = 0;
				colvarCustomerLedgerID.AutoIncrement = true;
				colvarCustomerLedgerID.IsNullable = false;
				colvarCustomerLedgerID.IsPrimaryKey = true;
				colvarCustomerLedgerID.IsForeignKey = false;
				colvarCustomerLedgerID.IsReadOnly = false;
				colvarCustomerLedgerID.DefaultSetting = @"";
				colvarCustomerLedgerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerLedgerID);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = true;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarCunsomerID = new TableSchema.TableColumn(schema);
				colvarCunsomerID.ColumnName = "CunsomerID";
				colvarCunsomerID.DataType = DbType.Int32;
				colvarCunsomerID.MaxLength = 0;
				colvarCunsomerID.AutoIncrement = false;
				colvarCunsomerID.IsNullable = true;
				colvarCunsomerID.IsPrimaryKey = false;
				colvarCunsomerID.IsForeignKey = true;
				colvarCunsomerID.IsReadOnly = false;
				colvarCunsomerID.DefaultSetting = @"";
				
					colvarCunsomerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarCunsomerID);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Int32;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarDateX = new TableSchema.TableColumn(schema);
				colvarDateX.ColumnName = "Date";
				colvarDateX.DataType = DbType.DateTime;
				colvarDateX.MaxLength = 0;
				colvarDateX.AutoIncrement = false;
				colvarDateX.IsNullable = true;
				colvarDateX.IsPrimaryKey = false;
				colvarDateX.IsForeignKey = false;
				colvarDateX.IsReadOnly = false;
				colvarDateX.DefaultSetting = @"";
				colvarDateX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateX);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = -1;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarCollectionPointID = new TableSchema.TableColumn(schema);
				colvarCollectionPointID.ColumnName = "CollectionPointID";
				colvarCollectionPointID.DataType = DbType.Int32;
				colvarCollectionPointID.MaxLength = 0;
				colvarCollectionPointID.AutoIncrement = false;
				colvarCollectionPointID.IsNullable = true;
				colvarCollectionPointID.IsPrimaryKey = false;
				colvarCollectionPointID.IsForeignKey = true;
				colvarCollectionPointID.IsReadOnly = false;
				colvarCollectionPointID.DefaultSetting = @"";
				
					colvarCollectionPointID.ForeignKeyTableName = "TblCollectionPoint";
				schema.Columns.Add(colvarCollectionPointID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblConsumerLedger",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CustomerLedgerID")]
		[Bindable(true)]
		public int CustomerLedgerID 
		{
			get { return GetColumnValue<int>(Columns.CustomerLedgerID); }
			set { SetColumnValue(Columns.CustomerLedgerID, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int? MeterID 
		{
			get { return GetColumnValue<int?>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("CunsomerID")]
		[Bindable(true)]
		public int? CunsomerID 
		{
			get { return GetColumnValue<int?>(Columns.CunsomerID); }
			set { SetColumnValue(Columns.CunsomerID, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public int? Amount 
		{
			get { return GetColumnValue<int?>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("DateX")]
		[Bindable(true)]
		public DateTime? DateX 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateX); }
			set { SetColumnValue(Columns.DateX, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("CollectionPointID")]
		[Bindable(true)]
		public int? CollectionPointID 
		{
			get { return GetColumnValue<int?>(Columns.CollectionPointID); }
			set { SetColumnValue(Columns.CollectionPointID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblConsumerLedgerLogCollection TblConsumerLedgerLogRecords()
		{
			return new SmartCBSDataAccess.TblConsumerLedgerLogCollection().Where(TblConsumerLedgerLog.Columns.CustomerLedgerID, CustomerLedgerID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblCollectionPoint ActiveRecord object related to this TblConsumerLedger
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblCollectionPoint TblCollectionPoint
		{
			get { return SmartCBSDataAccess.TblCollectionPoint.FetchByID(this.CollectionPointID); }
			set { SetColumnValue("CollectionPointID", value.CollectionPointID); }
		}
		
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblConsumerLedger
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.CunsomerID); }
			set { SetColumnValue("CunsomerID", value.CunsumerID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblConsumerLedger
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varMeterID,int? varCunsomerID,int? varAmount,DateTime? varDateX,DateTime? varCreatedOn,string varDescription,int? varCollectionPointID)
		{
			TblConsumerLedger item = new TblConsumerLedger();
			
			item.MeterID = varMeterID;
			
			item.CunsomerID = varCunsomerID;
			
			item.Amount = varAmount;
			
			item.DateX = varDateX;
			
			item.CreatedOn = varCreatedOn;
			
			item.Description = varDescription;
			
			item.CollectionPointID = varCollectionPointID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCustomerLedgerID,int? varMeterID,int? varCunsomerID,int? varAmount,DateTime? varDateX,DateTime? varCreatedOn,string varDescription,int? varCollectionPointID)
		{
			TblConsumerLedger item = new TblConsumerLedger();
			
				item.CustomerLedgerID = varCustomerLedgerID;
			
				item.MeterID = varMeterID;
			
				item.CunsomerID = varCunsomerID;
			
				item.Amount = varAmount;
			
				item.DateX = varDateX;
			
				item.CreatedOn = varCreatedOn;
			
				item.Description = varDescription;
			
				item.CollectionPointID = varCollectionPointID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CustomerLedgerIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CunsomerIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DateXColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CollectionPointIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CustomerLedgerID = @"CustomerLedgerID";
			 public static string MeterID = @"MeterID";
			 public static string CunsomerID = @"CunsomerID";
			 public static string Amount = @"Amount";
			 public static string DateX = @"Date";
			 public static string CreatedOn = @"CreatedOn";
			 public static string Description = @"Description";
			 public static string CollectionPointID = @"CollectionPointID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
