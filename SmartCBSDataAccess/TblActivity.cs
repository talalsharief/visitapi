using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblActivity class.
	/// </summary>
    [Serializable]
	public partial class TblActivityCollection : ActiveList<TblActivity, TblActivityCollection>
	{	   
		public TblActivityCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblActivityCollection</returns>
		public TblActivityCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblActivity o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblActivity table.
	/// </summary>
	[Serializable]
	public partial class TblActivity : ActiveRecord<TblActivity>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblActivity()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblActivity(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblActivity(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblActivity(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblActivity", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarActivityLogID = new TableSchema.TableColumn(schema);
				colvarActivityLogID.ColumnName = "ActivityLogID";
				colvarActivityLogID.DataType = DbType.Int32;
				colvarActivityLogID.MaxLength = 0;
				colvarActivityLogID.AutoIncrement = true;
				colvarActivityLogID.IsNullable = false;
				colvarActivityLogID.IsPrimaryKey = true;
				colvarActivityLogID.IsForeignKey = false;
				colvarActivityLogID.IsReadOnly = false;
				colvarActivityLogID.DefaultSetting = @"";
				colvarActivityLogID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivityLogID);
				
				TableSchema.TableColumn colvarActivityCode = new TableSchema.TableColumn(schema);
				colvarActivityCode.ColumnName = "ActivityCode";
				colvarActivityCode.DataType = DbType.AnsiString;
				colvarActivityCode.MaxLength = 500;
				colvarActivityCode.AutoIncrement = false;
				colvarActivityCode.IsNullable = true;
				colvarActivityCode.IsPrimaryKey = false;
				colvarActivityCode.IsForeignKey = false;
				colvarActivityCode.IsReadOnly = false;
				colvarActivityCode.DefaultSetting = @"";
				colvarActivityCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivityCode);
				
				TableSchema.TableColumn colvarPkid = new TableSchema.TableColumn(schema);
				colvarPkid.ColumnName = "PKID";
				colvarPkid.DataType = DbType.Int32;
				colvarPkid.MaxLength = 0;
				colvarPkid.AutoIncrement = false;
				colvarPkid.IsNullable = true;
				colvarPkid.IsPrimaryKey = false;
				colvarPkid.IsForeignKey = false;
				colvarPkid.IsReadOnly = false;
				colvarPkid.DefaultSetting = @"";
				colvarPkid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPkid);
				
				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = true;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = true;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				
					colvarUserID.ForeignKeyTableName = "UserLogin";
				schema.Columns.Add(colvarUserID);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = -1;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblActivity",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ActivityLogID")]
		[Bindable(true)]
		public int ActivityLogID 
		{
			get { return GetColumnValue<int>(Columns.ActivityLogID); }
			set { SetColumnValue(Columns.ActivityLogID, value); }
		}
		  
		[XmlAttribute("ActivityCode")]
		[Bindable(true)]
		public string ActivityCode 
		{
			get { return GetColumnValue<string>(Columns.ActivityCode); }
			set { SetColumnValue(Columns.ActivityCode, value); }
		}
		  
		[XmlAttribute("Pkid")]
		[Bindable(true)]
		public int? Pkid 
		{
			get { return GetColumnValue<int?>(Columns.Pkid); }
			set { SetColumnValue(Columns.Pkid, value); }
		}
		  
		[XmlAttribute("UserID")]
		[Bindable(true)]
		public int? UserID 
		{
			get { return GetColumnValue<int?>(Columns.UserID); }
			set { SetColumnValue(Columns.UserID, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a UserLogin ActiveRecord object related to this TblActivity
		/// 
		/// </summary>
		public SmartCBSDataAccess.UserLogin UserLogin
		{
			get { return SmartCBSDataAccess.UserLogin.FetchByID(this.UserID); }
			set { SetColumnValue("UserID", value.UserLoginId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varActivityCode,int? varPkid,int? varUserID,string varRemarks,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblActivity item = new TblActivity();
			
			item.ActivityCode = varActivityCode;
			
			item.Pkid = varPkid;
			
			item.UserID = varUserID;
			
			item.Remarks = varRemarks;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varActivityLogID,string varActivityCode,int? varPkid,int? varUserID,string varRemarks,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblActivity item = new TblActivity();
			
				item.ActivityLogID = varActivityLogID;
			
				item.ActivityCode = varActivityCode;
			
				item.Pkid = varPkid;
			
				item.UserID = varUserID;
			
				item.Remarks = varRemarks;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ActivityLogIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivityCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PkidColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn UserIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ActivityLogID = @"ActivityLogID";
			 public static string ActivityCode = @"ActivityCode";
			 public static string Pkid = @"PKID";
			 public static string UserID = @"UserID";
			 public static string Remarks = @"Remarks";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
