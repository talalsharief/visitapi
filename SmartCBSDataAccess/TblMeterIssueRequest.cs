using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeterIssueRequest class.
	/// </summary>
    [Serializable]
	public partial class TblMeterIssueRequestCollection : ActiveList<TblMeterIssueRequest, TblMeterIssueRequestCollection>
	{	   
		public TblMeterIssueRequestCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterIssueRequestCollection</returns>
		public TblMeterIssueRequestCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeterIssueRequest o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeterIssueRequests table.
	/// </summary>
	[Serializable]
	public partial class TblMeterIssueRequest : ActiveRecord<TblMeterIssueRequest>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeterIssueRequest()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeterIssueRequest(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeterIssueRequest(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeterIssueRequest(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeterIssueRequests", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMeterIssueRequestID = new TableSchema.TableColumn(schema);
				colvarMeterIssueRequestID.ColumnName = "MeterIssueRequestID";
				colvarMeterIssueRequestID.DataType = DbType.Int32;
				colvarMeterIssueRequestID.MaxLength = 0;
				colvarMeterIssueRequestID.AutoIncrement = true;
				colvarMeterIssueRequestID.IsNullable = false;
				colvarMeterIssueRequestID.IsPrimaryKey = true;
				colvarMeterIssueRequestID.IsForeignKey = false;
				colvarMeterIssueRequestID.IsReadOnly = false;
				colvarMeterIssueRequestID.DefaultSetting = @"";
				colvarMeterIssueRequestID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterIssueRequestID);
				
				TableSchema.TableColumn colvarNewConnectionID = new TableSchema.TableColumn(schema);
				colvarNewConnectionID.ColumnName = "NewConnectionID";
				colvarNewConnectionID.DataType = DbType.Int32;
				colvarNewConnectionID.MaxLength = 0;
				colvarNewConnectionID.AutoIncrement = false;
				colvarNewConnectionID.IsNullable = true;
				colvarNewConnectionID.IsPrimaryKey = false;
				colvarNewConnectionID.IsForeignKey = true;
				colvarNewConnectionID.IsReadOnly = false;
				colvarNewConnectionID.DefaultSetting = @"";
				
					colvarNewConnectionID.ForeignKeyTableName = "TblNewConnection";
				schema.Columns.Add(colvarNewConnectionID);
				
				TableSchema.TableColumn colvarRequestGeneratedOn = new TableSchema.TableColumn(schema);
				colvarRequestGeneratedOn.ColumnName = "RequestGeneratedOn";
				colvarRequestGeneratedOn.DataType = DbType.DateTime;
				colvarRequestGeneratedOn.MaxLength = 0;
				colvarRequestGeneratedOn.AutoIncrement = false;
				colvarRequestGeneratedOn.IsNullable = true;
				colvarRequestGeneratedOn.IsPrimaryKey = false;
				colvarRequestGeneratedOn.IsForeignKey = false;
				colvarRequestGeneratedOn.IsReadOnly = false;
				colvarRequestGeneratedOn.DefaultSetting = @"";
				colvarRequestGeneratedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequestGeneratedOn);
				
				TableSchema.TableColumn colvarRequestGeneratedBy = new TableSchema.TableColumn(schema);
				colvarRequestGeneratedBy.ColumnName = "RequestGeneratedBy";
				colvarRequestGeneratedBy.DataType = DbType.Int32;
				colvarRequestGeneratedBy.MaxLength = 0;
				colvarRequestGeneratedBy.AutoIncrement = false;
				colvarRequestGeneratedBy.IsNullable = true;
				colvarRequestGeneratedBy.IsPrimaryKey = false;
				colvarRequestGeneratedBy.IsForeignKey = true;
				colvarRequestGeneratedBy.IsReadOnly = false;
				colvarRequestGeneratedBy.DefaultSetting = @"";
				
					colvarRequestGeneratedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarRequestGeneratedBy);
				
				TableSchema.TableColumn colvarNoOfMeters = new TableSchema.TableColumn(schema);
				colvarNoOfMeters.ColumnName = "NoOfMeters";
				colvarNoOfMeters.DataType = DbType.Int32;
				colvarNoOfMeters.MaxLength = 0;
				colvarNoOfMeters.AutoIncrement = false;
				colvarNoOfMeters.IsNullable = true;
				colvarNoOfMeters.IsPrimaryKey = false;
				colvarNoOfMeters.IsForeignKey = false;
				colvarNoOfMeters.IsReadOnly = false;
				colvarNoOfMeters.DefaultSetting = @"";
				colvarNoOfMeters.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoOfMeters);
				
				TableSchema.TableColumn colvarDefectedID = new TableSchema.TableColumn(schema);
				colvarDefectedID.ColumnName = "DefectedID";
				colvarDefectedID.DataType = DbType.Int32;
				colvarDefectedID.MaxLength = 0;
				colvarDefectedID.AutoIncrement = false;
				colvarDefectedID.IsNullable = true;
				colvarDefectedID.IsPrimaryKey = false;
				colvarDefectedID.IsForeignKey = true;
				colvarDefectedID.IsReadOnly = false;
				colvarDefectedID.DefaultSetting = @"";
				
					colvarDefectedID.ForeignKeyTableName = "TblMeterDefected";
				schema.Columns.Add(colvarDefectedID);
				
				TableSchema.TableColumn colvarReplacementID = new TableSchema.TableColumn(schema);
				colvarReplacementID.ColumnName = "ReplacementID";
				colvarReplacementID.DataType = DbType.Int32;
				colvarReplacementID.MaxLength = 0;
				colvarReplacementID.AutoIncrement = false;
				colvarReplacementID.IsNullable = true;
				colvarReplacementID.IsPrimaryKey = false;
				colvarReplacementID.IsForeignKey = true;
				colvarReplacementID.IsReadOnly = false;
				colvarReplacementID.DefaultSetting = @"";
				
					colvarReplacementID.ForeignKeyTableName = "TblMeterReplacement";
				schema.Columns.Add(colvarReplacementID);
				
				TableSchema.TableColumn colvarIsApproved = new TableSchema.TableColumn(schema);
				colvarIsApproved.ColumnName = "IsApproved";
				colvarIsApproved.DataType = DbType.Boolean;
				colvarIsApproved.MaxLength = 0;
				colvarIsApproved.AutoIncrement = false;
				colvarIsApproved.IsNullable = true;
				colvarIsApproved.IsPrimaryKey = false;
				colvarIsApproved.IsForeignKey = false;
				colvarIsApproved.IsReadOnly = false;
				colvarIsApproved.DefaultSetting = @"";
				colvarIsApproved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsApproved);
				
				TableSchema.TableColumn colvarIsManual = new TableSchema.TableColumn(schema);
				colvarIsManual.ColumnName = "IsManual";
				colvarIsManual.DataType = DbType.Boolean;
				colvarIsManual.MaxLength = 0;
				colvarIsManual.AutoIncrement = false;
				colvarIsManual.IsNullable = true;
				colvarIsManual.IsPrimaryKey = false;
				colvarIsManual.IsForeignKey = false;
				colvarIsManual.IsReadOnly = false;
				colvarIsManual.DefaultSetting = @"";
				colvarIsManual.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsManual);
				
				TableSchema.TableColumn colvarApprovedBy = new TableSchema.TableColumn(schema);
				colvarApprovedBy.ColumnName = "ApprovedBy";
				colvarApprovedBy.DataType = DbType.Int32;
				colvarApprovedBy.MaxLength = 0;
				colvarApprovedBy.AutoIncrement = false;
				colvarApprovedBy.IsNullable = true;
				colvarApprovedBy.IsPrimaryKey = false;
				colvarApprovedBy.IsForeignKey = true;
				colvarApprovedBy.IsReadOnly = false;
				colvarApprovedBy.DefaultSetting = @"";
				
					colvarApprovedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarApprovedBy);
				
				TableSchema.TableColumn colvarApprovedOn = new TableSchema.TableColumn(schema);
				colvarApprovedOn.ColumnName = "ApprovedOn";
				colvarApprovedOn.DataType = DbType.DateTime;
				colvarApprovedOn.MaxLength = 0;
				colvarApprovedOn.AutoIncrement = false;
				colvarApprovedOn.IsNullable = true;
				colvarApprovedOn.IsPrimaryKey = false;
				colvarApprovedOn.IsForeignKey = false;
				colvarApprovedOn.IsReadOnly = false;
				colvarApprovedOn.DefaultSetting = @"";
				colvarApprovedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApprovedOn);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarMeterIssueRequestNo = new TableSchema.TableColumn(schema);
				colvarMeterIssueRequestNo.ColumnName = "MeterIssueRequestNo";
				colvarMeterIssueRequestNo.DataType = DbType.AnsiString;
				colvarMeterIssueRequestNo.MaxLength = 50;
				colvarMeterIssueRequestNo.AutoIncrement = false;
				colvarMeterIssueRequestNo.IsNullable = true;
				colvarMeterIssueRequestNo.IsPrimaryKey = false;
				colvarMeterIssueRequestNo.IsForeignKey = false;
				colvarMeterIssueRequestNo.IsReadOnly = false;
				colvarMeterIssueRequestNo.DefaultSetting = @"";
				colvarMeterIssueRequestNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterIssueRequestNo);
				
				TableSchema.TableColumn colvarRequestSerial = new TableSchema.TableColumn(schema);
				colvarRequestSerial.ColumnName = "RequestSerial";
				colvarRequestSerial.DataType = DbType.Int32;
				colvarRequestSerial.MaxLength = 0;
				colvarRequestSerial.AutoIncrement = false;
				colvarRequestSerial.IsNullable = true;
				colvarRequestSerial.IsPrimaryKey = false;
				colvarRequestSerial.IsForeignKey = false;
				colvarRequestSerial.IsReadOnly = false;
				colvarRequestSerial.DefaultSetting = @"";
				colvarRequestSerial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequestSerial);
				
				TableSchema.TableColumn colvarIsIssued = new TableSchema.TableColumn(schema);
				colvarIsIssued.ColumnName = "IsIssued";
				colvarIsIssued.DataType = DbType.Boolean;
				colvarIsIssued.MaxLength = 0;
				colvarIsIssued.AutoIncrement = false;
				colvarIsIssued.IsNullable = true;
				colvarIsIssued.IsPrimaryKey = false;
				colvarIsIssued.IsForeignKey = false;
				colvarIsIssued.IsReadOnly = false;
				colvarIsIssued.DefaultSetting = @"";
				colvarIsIssued.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsIssued);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = true;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				
					colvarConsumerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeterIssueRequests",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MeterIssueRequestID")]
		[Bindable(true)]
		public int MeterIssueRequestID 
		{
			get { return GetColumnValue<int>(Columns.MeterIssueRequestID); }
			set { SetColumnValue(Columns.MeterIssueRequestID, value); }
		}
		  
		[XmlAttribute("NewConnectionID")]
		[Bindable(true)]
		public int? NewConnectionID 
		{
			get { return GetColumnValue<int?>(Columns.NewConnectionID); }
			set { SetColumnValue(Columns.NewConnectionID, value); }
		}
		  
		[XmlAttribute("RequestGeneratedOn")]
		[Bindable(true)]
		public DateTime? RequestGeneratedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.RequestGeneratedOn); }
			set { SetColumnValue(Columns.RequestGeneratedOn, value); }
		}
		  
		[XmlAttribute("RequestGeneratedBy")]
		[Bindable(true)]
		public int? RequestGeneratedBy 
		{
			get { return GetColumnValue<int?>(Columns.RequestGeneratedBy); }
			set { SetColumnValue(Columns.RequestGeneratedBy, value); }
		}
		  
		[XmlAttribute("NoOfMeters")]
		[Bindable(true)]
		public int? NoOfMeters 
		{
			get { return GetColumnValue<int?>(Columns.NoOfMeters); }
			set { SetColumnValue(Columns.NoOfMeters, value); }
		}
		  
		[XmlAttribute("DefectedID")]
		[Bindable(true)]
		public int? DefectedID 
		{
			get { return GetColumnValue<int?>(Columns.DefectedID); }
			set { SetColumnValue(Columns.DefectedID, value); }
		}
		  
		[XmlAttribute("ReplacementID")]
		[Bindable(true)]
		public int? ReplacementID 
		{
			get { return GetColumnValue<int?>(Columns.ReplacementID); }
			set { SetColumnValue(Columns.ReplacementID, value); }
		}
		  
		[XmlAttribute("IsApproved")]
		[Bindable(true)]
		public bool? IsApproved 
		{
			get { return GetColumnValue<bool?>(Columns.IsApproved); }
			set { SetColumnValue(Columns.IsApproved, value); }
		}
		  
		[XmlAttribute("IsManual")]
		[Bindable(true)]
		public bool? IsManual 
		{
			get { return GetColumnValue<bool?>(Columns.IsManual); }
			set { SetColumnValue(Columns.IsManual, value); }
		}
		  
		[XmlAttribute("ApprovedBy")]
		[Bindable(true)]
		public int? ApprovedBy 
		{
			get { return GetColumnValue<int?>(Columns.ApprovedBy); }
			set { SetColumnValue(Columns.ApprovedBy, value); }
		}
		  
		[XmlAttribute("ApprovedOn")]
		[Bindable(true)]
		public DateTime? ApprovedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ApprovedOn); }
			set { SetColumnValue(Columns.ApprovedOn, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("MeterIssueRequestNo")]
		[Bindable(true)]
		public string MeterIssueRequestNo 
		{
			get { return GetColumnValue<string>(Columns.MeterIssueRequestNo); }
			set { SetColumnValue(Columns.MeterIssueRequestNo, value); }
		}
		  
		[XmlAttribute("RequestSerial")]
		[Bindable(true)]
		public int? RequestSerial 
		{
			get { return GetColumnValue<int?>(Columns.RequestSerial); }
			set { SetColumnValue(Columns.RequestSerial, value); }
		}
		  
		[XmlAttribute("IsIssued")]
		[Bindable(true)]
		public bool? IsIssued 
		{
			get { return GetColumnValue<bool?>(Columns.IsIssued); }
			set { SetColumnValue(Columns.IsIssued, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblInventoryLogCollection TblInventoryLogRecords()
		{
			return new SmartCBSDataAccess.TblInventoryLogCollection().Where(TblInventoryLog.Columns.MeterIssueRequestID, MeterIssueRequestID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblMeterIssueRequest
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblMeterIssueRequest
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.ConsumerID); }
			set { SetColumnValue("ConsumerID", value.CunsumerID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterIssueRequest
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.RequestGeneratedBy); }
			set { SetColumnValue("RequestGeneratedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterIssueRequest
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployeeToApprovedBy
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.ApprovedBy); }
			set { SetColumnValue("ApprovedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterDefected ActiveRecord object related to this TblMeterIssueRequest
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterDefected TblMeterDefected
		{
			get { return SmartCBSDataAccess.TblMeterDefected.FetchByID(this.DefectedID); }
			set { SetColumnValue("DefectedID", value.MeterDefectedID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterReplacement ActiveRecord object related to this TblMeterIssueRequest
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterReplacement TblMeterReplacement
		{
			get { return SmartCBSDataAccess.TblMeterReplacement.FetchByID(this.ReplacementID); }
			set { SetColumnValue("ReplacementID", value.ReplaceID); }
		}
		
		
		/// <summary>
		/// Returns a TblNewConnection ActiveRecord object related to this TblMeterIssueRequest
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblNewConnection TblNewConnection
		{
			get { return SmartCBSDataAccess.TblNewConnection.FetchByID(this.NewConnectionID); }
			set { SetColumnValue("NewConnectionID", value.NewConnectionID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varNewConnectionID,DateTime? varRequestGeneratedOn,int? varRequestGeneratedBy,int? varNoOfMeters,int? varDefectedID,int? varReplacementID,bool? varIsApproved,bool? varIsManual,int? varApprovedBy,DateTime? varApprovedOn,DateTime? varCreatedOn,DateTime? varModifiedOn,string varMeterIssueRequestNo,int? varRequestSerial,bool? varIsIssued,int? varConsumerID,int? varBranchID)
		{
			TblMeterIssueRequest item = new TblMeterIssueRequest();
			
			item.NewConnectionID = varNewConnectionID;
			
			item.RequestGeneratedOn = varRequestGeneratedOn;
			
			item.RequestGeneratedBy = varRequestGeneratedBy;
			
			item.NoOfMeters = varNoOfMeters;
			
			item.DefectedID = varDefectedID;
			
			item.ReplacementID = varReplacementID;
			
			item.IsApproved = varIsApproved;
			
			item.IsManual = varIsManual;
			
			item.ApprovedBy = varApprovedBy;
			
			item.ApprovedOn = varApprovedOn;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.MeterIssueRequestNo = varMeterIssueRequestNo;
			
			item.RequestSerial = varRequestSerial;
			
			item.IsIssued = varIsIssued;
			
			item.ConsumerID = varConsumerID;
			
			item.BranchID = varBranchID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMeterIssueRequestID,int? varNewConnectionID,DateTime? varRequestGeneratedOn,int? varRequestGeneratedBy,int? varNoOfMeters,int? varDefectedID,int? varReplacementID,bool? varIsApproved,bool? varIsManual,int? varApprovedBy,DateTime? varApprovedOn,DateTime? varCreatedOn,DateTime? varModifiedOn,string varMeterIssueRequestNo,int? varRequestSerial,bool? varIsIssued,int? varConsumerID,int? varBranchID)
		{
			TblMeterIssueRequest item = new TblMeterIssueRequest();
			
				item.MeterIssueRequestID = varMeterIssueRequestID;
			
				item.NewConnectionID = varNewConnectionID;
			
				item.RequestGeneratedOn = varRequestGeneratedOn;
			
				item.RequestGeneratedBy = varRequestGeneratedBy;
			
				item.NoOfMeters = varNoOfMeters;
			
				item.DefectedID = varDefectedID;
			
				item.ReplacementID = varReplacementID;
			
				item.IsApproved = varIsApproved;
			
				item.IsManual = varIsManual;
			
				item.ApprovedBy = varApprovedBy;
			
				item.ApprovedOn = varApprovedOn;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.MeterIssueRequestNo = varMeterIssueRequestNo;
			
				item.RequestSerial = varRequestSerial;
			
				item.IsIssued = varIsIssued;
			
				item.ConsumerID = varConsumerID;
			
				item.BranchID = varBranchID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MeterIssueRequestIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NewConnectionIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RequestGeneratedOnColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RequestGeneratedByColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NoOfMetersColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DefectedIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ReplacementIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IsApprovedColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IsManualColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ApprovedByColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ApprovedOnColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIssueRequestNoColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn RequestSerialColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn IsIssuedColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MeterIssueRequestID = @"MeterIssueRequestID";
			 public static string NewConnectionID = @"NewConnectionID";
			 public static string RequestGeneratedOn = @"RequestGeneratedOn";
			 public static string RequestGeneratedBy = @"RequestGeneratedBy";
			 public static string NoOfMeters = @"NoOfMeters";
			 public static string DefectedID = @"DefectedID";
			 public static string ReplacementID = @"ReplacementID";
			 public static string IsApproved = @"IsApproved";
			 public static string IsManual = @"IsManual";
			 public static string ApprovedBy = @"ApprovedBy";
			 public static string ApprovedOn = @"ApprovedOn";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string MeterIssueRequestNo = @"MeterIssueRequestNo";
			 public static string RequestSerial = @"RequestSerial";
			 public static string IsIssued = @"IsIssued";
			 public static string ConsumerID = @"ConsumerID";
			 public static string BranchID = @"BranchID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
