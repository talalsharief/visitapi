using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblBillPayment class.
	/// </summary>
    [Serializable]
	public partial class TblBillPaymentCollection : ActiveList<TblBillPayment, TblBillPaymentCollection>
	{	   
		public TblBillPaymentCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblBillPaymentCollection</returns>
		public TblBillPaymentCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblBillPayment o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblBillPayment table.
	/// </summary>
	[Serializable]
	public partial class TblBillPayment : ActiveRecord<TblBillPayment>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblBillPayment()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblBillPayment(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblBillPayment(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblBillPayment(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblBillPayment", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarBillPaymentID = new TableSchema.TableColumn(schema);
				colvarBillPaymentID.ColumnName = "BillPaymentID";
				colvarBillPaymentID.DataType = DbType.Int32;
				colvarBillPaymentID.MaxLength = 0;
				colvarBillPaymentID.AutoIncrement = true;
				colvarBillPaymentID.IsNullable = false;
				colvarBillPaymentID.IsPrimaryKey = true;
				colvarBillPaymentID.IsForeignKey = false;
				colvarBillPaymentID.IsReadOnly = false;
				colvarBillPaymentID.DefaultSetting = @"";
				colvarBillPaymentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillPaymentID);
				
				TableSchema.TableColumn colvarBillID = new TableSchema.TableColumn(schema);
				colvarBillID.ColumnName = "BillID";
				colvarBillID.DataType = DbType.Int32;
				colvarBillID.MaxLength = 0;
				colvarBillID.AutoIncrement = false;
				colvarBillID.IsNullable = false;
				colvarBillID.IsPrimaryKey = false;
				colvarBillID.IsForeignKey = true;
				colvarBillID.IsReadOnly = false;
				colvarBillID.DefaultSetting = @"";
				
					colvarBillID.ForeignKeyTableName = "TblBill";
				schema.Columns.Add(colvarBillID);
				
				TableSchema.TableColumn colvarBillAmount = new TableSchema.TableColumn(schema);
				colvarBillAmount.ColumnName = "BillAmount";
				colvarBillAmount.DataType = DbType.Decimal;
				colvarBillAmount.MaxLength = 0;
				colvarBillAmount.AutoIncrement = false;
				colvarBillAmount.IsNullable = false;
				colvarBillAmount.IsPrimaryKey = false;
				colvarBillAmount.IsForeignKey = false;
				colvarBillAmount.IsReadOnly = false;
				colvarBillAmount.DefaultSetting = @"";
				colvarBillAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillAmount);
				
				TableSchema.TableColumn colvarBillAmountPaid = new TableSchema.TableColumn(schema);
				colvarBillAmountPaid.ColumnName = "BillAmountPaid";
				colvarBillAmountPaid.DataType = DbType.Decimal;
				colvarBillAmountPaid.MaxLength = 0;
				colvarBillAmountPaid.AutoIncrement = false;
				colvarBillAmountPaid.IsNullable = false;
				colvarBillAmountPaid.IsPrimaryKey = false;
				colvarBillAmountPaid.IsForeignKey = false;
				colvarBillAmountPaid.IsReadOnly = false;
				colvarBillAmountPaid.DefaultSetting = @"";
				colvarBillAmountPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillAmountPaid);
				
				TableSchema.TableColumn colvarPaymentDate = new TableSchema.TableColumn(schema);
				colvarPaymentDate.ColumnName = "PaymentDate";
				colvarPaymentDate.DataType = DbType.DateTime;
				colvarPaymentDate.MaxLength = 0;
				colvarPaymentDate.AutoIncrement = false;
				colvarPaymentDate.IsNullable = true;
				colvarPaymentDate.IsPrimaryKey = false;
				colvarPaymentDate.IsForeignKey = false;
				colvarPaymentDate.IsReadOnly = false;
				colvarPaymentDate.DefaultSetting = @"";
				colvarPaymentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentDate);
				
				TableSchema.TableColumn colvarCollectionPointID = new TableSchema.TableColumn(schema);
				colvarCollectionPointID.ColumnName = "CollectionPointID";
				colvarCollectionPointID.DataType = DbType.Int32;
				colvarCollectionPointID.MaxLength = 0;
				colvarCollectionPointID.AutoIncrement = false;
				colvarCollectionPointID.IsNullable = true;
				colvarCollectionPointID.IsPrimaryKey = false;
				colvarCollectionPointID.IsForeignKey = true;
				colvarCollectionPointID.IsReadOnly = false;
				colvarCollectionPointID.DefaultSetting = @"";
				
					colvarCollectionPointID.ForeignKeyTableName = "TblCollectionPoint";
				schema.Columns.Add(colvarCollectionPointID);
				
				TableSchema.TableColumn colvarUploadedByUser = new TableSchema.TableColumn(schema);
				colvarUploadedByUser.ColumnName = "UploadedByUser";
				colvarUploadedByUser.DataType = DbType.Int32;
				colvarUploadedByUser.MaxLength = 0;
				colvarUploadedByUser.AutoIncrement = false;
				colvarUploadedByUser.IsNullable = true;
				colvarUploadedByUser.IsPrimaryKey = false;
				colvarUploadedByUser.IsForeignKey = true;
				colvarUploadedByUser.IsReadOnly = false;
				colvarUploadedByUser.DefaultSetting = @"";
				
					colvarUploadedByUser.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarUploadedByUser);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarChequeID = new TableSchema.TableColumn(schema);
				colvarChequeID.ColumnName = "ChequeID";
				colvarChequeID.DataType = DbType.Int32;
				colvarChequeID.MaxLength = 0;
				colvarChequeID.AutoIncrement = false;
				colvarChequeID.IsNullable = true;
				colvarChequeID.IsPrimaryKey = false;
				colvarChequeID.IsForeignKey = true;
				colvarChequeID.IsReadOnly = false;
				colvarChequeID.DefaultSetting = @"";
				
					colvarChequeID.ForeignKeyTableName = "TblCheque";
				schema.Columns.Add(colvarChequeID);
				
				TableSchema.TableColumn colvarArrearID = new TableSchema.TableColumn(schema);
				colvarArrearID.ColumnName = "ArrearID";
				colvarArrearID.DataType = DbType.Int32;
				colvarArrearID.MaxLength = 0;
				colvarArrearID.AutoIncrement = false;
				colvarArrearID.IsNullable = true;
				colvarArrearID.IsPrimaryKey = false;
				colvarArrearID.IsForeignKey = true;
				colvarArrearID.IsReadOnly = false;
				colvarArrearID.DefaultSetting = @"";
				
					colvarArrearID.ForeignKeyTableName = "TblArrear";
				schema.Columns.Add(colvarArrearID);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = -1;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarScheduledInstallmentID = new TableSchema.TableColumn(schema);
				colvarScheduledInstallmentID.ColumnName = "ScheduledInstallmentID";
				colvarScheduledInstallmentID.DataType = DbType.Int32;
				colvarScheduledInstallmentID.MaxLength = 0;
				colvarScheduledInstallmentID.AutoIncrement = false;
				colvarScheduledInstallmentID.IsNullable = true;
				colvarScheduledInstallmentID.IsPrimaryKey = false;
				colvarScheduledInstallmentID.IsForeignKey = false;
				colvarScheduledInstallmentID.IsReadOnly = false;
				colvarScheduledInstallmentID.DefaultSetting = @"";
				colvarScheduledInstallmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScheduledInstallmentID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblBillPayment",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("BillPaymentID")]
		[Bindable(true)]
		public int BillPaymentID 
		{
			get { return GetColumnValue<int>(Columns.BillPaymentID); }
			set { SetColumnValue(Columns.BillPaymentID, value); }
		}
		  
		[XmlAttribute("BillID")]
		[Bindable(true)]
		public int BillID 
		{
			get { return GetColumnValue<int>(Columns.BillID); }
			set { SetColumnValue(Columns.BillID, value); }
		}
		  
		[XmlAttribute("BillAmount")]
		[Bindable(true)]
		public decimal BillAmount 
		{
			get { return GetColumnValue<decimal>(Columns.BillAmount); }
			set { SetColumnValue(Columns.BillAmount, value); }
		}
		  
		[XmlAttribute("BillAmountPaid")]
		[Bindable(true)]
		public decimal BillAmountPaid 
		{
			get { return GetColumnValue<decimal>(Columns.BillAmountPaid); }
			set { SetColumnValue(Columns.BillAmountPaid, value); }
		}
		  
		[XmlAttribute("PaymentDate")]
		[Bindable(true)]
		public DateTime? PaymentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentDate); }
			set { SetColumnValue(Columns.PaymentDate, value); }
		}
		  
		[XmlAttribute("CollectionPointID")]
		[Bindable(true)]
		public int? CollectionPointID 
		{
			get { return GetColumnValue<int?>(Columns.CollectionPointID); }
			set { SetColumnValue(Columns.CollectionPointID, value); }
		}
		  
		[XmlAttribute("UploadedByUser")]
		[Bindable(true)]
		public int? UploadedByUser 
		{
			get { return GetColumnValue<int?>(Columns.UploadedByUser); }
			set { SetColumnValue(Columns.UploadedByUser, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("ChequeID")]
		[Bindable(true)]
		public int? ChequeID 
		{
			get { return GetColumnValue<int?>(Columns.ChequeID); }
			set { SetColumnValue(Columns.ChequeID, value); }
		}
		  
		[XmlAttribute("ArrearID")]
		[Bindable(true)]
		public int? ArrearID 
		{
			get { return GetColumnValue<int?>(Columns.ArrearID); }
			set { SetColumnValue(Columns.ArrearID, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("ScheduledInstallmentID")]
		[Bindable(true)]
		public int? ScheduledInstallmentID 
		{
			get { return GetColumnValue<int?>(Columns.ScheduledInstallmentID); }
			set { SetColumnValue(Columns.ScheduledInstallmentID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblLedgerCollection TblLedgerRecords()
		{
			return new SmartCBSDataAccess.TblLedgerCollection().Where(TblLedger.Columns.BillPaymentID, BillPaymentID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblArrear ActiveRecord object related to this TblBillPayment
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblArrear TblArrear
		{
			get { return SmartCBSDataAccess.TblArrear.FetchByID(this.ArrearID); }
			set { SetColumnValue("ArrearID", value.ArrearID); }
		}
		
		
		/// <summary>
		/// Returns a TblBill ActiveRecord object related to this TblBillPayment
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBill TblBill
		{
			get { return SmartCBSDataAccess.TblBill.FetchByID(this.BillID); }
			set { SetColumnValue("BillID", value.BillID); }
		}
		
		
		/// <summary>
		/// Returns a TblCheque ActiveRecord object related to this TblBillPayment
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblCheque TblCheque
		{
			get { return SmartCBSDataAccess.TblCheque.FetchByID(this.ChequeID); }
			set { SetColumnValue("ChequeID", value.ChequeID); }
		}
		
		
		/// <summary>
		/// Returns a TblCollectionPoint ActiveRecord object related to this TblBillPayment
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblCollectionPoint TblCollectionPoint
		{
			get { return SmartCBSDataAccess.TblCollectionPoint.FetchByID(this.CollectionPointID); }
			set { SetColumnValue("CollectionPointID", value.CollectionPointID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblBillPayment
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.UploadedByUser); }
			set { SetColumnValue("UploadedByUser", value.EmployeeID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varBillID,decimal varBillAmount,decimal varBillAmountPaid,DateTime? varPaymentDate,int? varCollectionPointID,int? varUploadedByUser,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varChequeID,int? varArrearID,string varRemarks,int? varScheduledInstallmentID)
		{
			TblBillPayment item = new TblBillPayment();
			
			item.BillID = varBillID;
			
			item.BillAmount = varBillAmount;
			
			item.BillAmountPaid = varBillAmountPaid;
			
			item.PaymentDate = varPaymentDate;
			
			item.CollectionPointID = varCollectionPointID;
			
			item.UploadedByUser = varUploadedByUser;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.ChequeID = varChequeID;
			
			item.ArrearID = varArrearID;
			
			item.Remarks = varRemarks;
			
			item.ScheduledInstallmentID = varScheduledInstallmentID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varBillPaymentID,int varBillID,decimal varBillAmount,decimal varBillAmountPaid,DateTime? varPaymentDate,int? varCollectionPointID,int? varUploadedByUser,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varChequeID,int? varArrearID,string varRemarks,int? varScheduledInstallmentID)
		{
			TblBillPayment item = new TblBillPayment();
			
				item.BillPaymentID = varBillPaymentID;
			
				item.BillID = varBillID;
			
				item.BillAmount = varBillAmount;
			
				item.BillAmountPaid = varBillAmountPaid;
			
				item.PaymentDate = varPaymentDate;
			
				item.CollectionPointID = varCollectionPointID;
			
				item.UploadedByUser = varUploadedByUser;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.ChequeID = varChequeID;
			
				item.ArrearID = varArrearID;
			
				item.Remarks = varRemarks;
			
				item.ScheduledInstallmentID = varScheduledInstallmentID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn BillPaymentIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BillIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BillAmountColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn BillAmountPaidColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CollectionPointIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UploadedByUserColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ChequeIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ArrearIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ScheduledInstallmentIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string BillPaymentID = @"BillPaymentID";
			 public static string BillID = @"BillID";
			 public static string BillAmount = @"BillAmount";
			 public static string BillAmountPaid = @"BillAmountPaid";
			 public static string PaymentDate = @"PaymentDate";
			 public static string CollectionPointID = @"CollectionPointID";
			 public static string UploadedByUser = @"UploadedByUser";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string ChequeID = @"ChequeID";
			 public static string ArrearID = @"ArrearID";
			 public static string Remarks = @"Remarks";
			 public static string ScheduledInstallmentID = @"ScheduledInstallmentID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
