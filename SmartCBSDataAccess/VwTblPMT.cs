using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwTblPMT class.
    /// </summary>
    [Serializable]
    public partial class VwTblPMTCollection : ReadOnlyList<VwTblPMT, VwTblPMTCollection>
    {        
        public VwTblPMTCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwTblPMT view.
    /// </summary>
    [Serializable]
    public partial class VwTblPMT : ReadOnlyRecord<VwTblPMT>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwTblPMT", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarPmtid = new TableSchema.TableColumn(schema);
                colvarPmtid.ColumnName = "PMTID";
                colvarPmtid.DataType = DbType.Int32;
                colvarPmtid.MaxLength = 0;
                colvarPmtid.AutoIncrement = false;
                colvarPmtid.IsNullable = false;
                colvarPmtid.IsPrimaryKey = false;
                colvarPmtid.IsForeignKey = false;
                colvarPmtid.IsReadOnly = false;
                
                schema.Columns.Add(colvarPmtid);
                
                TableSchema.TableColumn colvarPMTNo = new TableSchema.TableColumn(schema);
                colvarPMTNo.ColumnName = "PMTNo";
                colvarPMTNo.DataType = DbType.AnsiString;
                colvarPMTNo.MaxLength = 50;
                colvarPMTNo.AutoIncrement = false;
                colvarPMTNo.IsNullable = true;
                colvarPMTNo.IsPrimaryKey = false;
                colvarPMTNo.IsForeignKey = false;
                colvarPMTNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTNo);
                
                TableSchema.TableColumn colvarPMTCode = new TableSchema.TableColumn(schema);
                colvarPMTCode.ColumnName = "PMTCode";
                colvarPMTCode.DataType = DbType.AnsiString;
                colvarPMTCode.MaxLength = 50;
                colvarPMTCode.AutoIncrement = false;
                colvarPMTCode.IsNullable = true;
                colvarPMTCode.IsPrimaryKey = false;
                colvarPMTCode.IsForeignKey = false;
                colvarPMTCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTCode);
                
                TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
                colvarIsActive.ColumnName = "IsActive";
                colvarIsActive.DataType = DbType.Boolean;
                colvarIsActive.MaxLength = 0;
                colvarIsActive.AutoIncrement = false;
                colvarIsActive.IsNullable = true;
                colvarIsActive.IsPrimaryKey = false;
                colvarIsActive.IsForeignKey = false;
                colvarIsActive.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsActive);
                
                TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
                colvarCreatedBy.ColumnName = "CreatedBy";
                colvarCreatedBy.DataType = DbType.Int32;
                colvarCreatedBy.MaxLength = 0;
                colvarCreatedBy.AutoIncrement = false;
                colvarCreatedBy.IsNullable = true;
                colvarCreatedBy.IsPrimaryKey = false;
                colvarCreatedBy.IsForeignKey = false;
                colvarCreatedBy.IsReadOnly = false;
                
                schema.Columns.Add(colvarCreatedBy);
                
                TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
                colvarModifiedBy.ColumnName = "ModifiedBy";
                colvarModifiedBy.DataType = DbType.Int32;
                colvarModifiedBy.MaxLength = 0;
                colvarModifiedBy.AutoIncrement = false;
                colvarModifiedBy.IsNullable = true;
                colvarModifiedBy.IsPrimaryKey = false;
                colvarModifiedBy.IsForeignKey = false;
                colvarModifiedBy.IsReadOnly = false;
                
                schema.Columns.Add(colvarModifiedBy);
                
                TableSchema.TableColumn colvarPMTStatusID = new TableSchema.TableColumn(schema);
                colvarPMTStatusID.ColumnName = "PMTStatusID";
                colvarPMTStatusID.DataType = DbType.Int32;
                colvarPMTStatusID.MaxLength = 0;
                colvarPMTStatusID.AutoIncrement = false;
                colvarPMTStatusID.IsNullable = false;
                colvarPMTStatusID.IsPrimaryKey = false;
                colvarPMTStatusID.IsForeignKey = false;
                colvarPMTStatusID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTStatusID);
                
                TableSchema.TableColumn colvarPMTStatusName = new TableSchema.TableColumn(schema);
                colvarPMTStatusName.ColumnName = "PMTStatusName";
                colvarPMTStatusName.DataType = DbType.AnsiString;
                colvarPMTStatusName.MaxLength = 50;
                colvarPMTStatusName.AutoIncrement = false;
                colvarPMTStatusName.IsNullable = true;
                colvarPMTStatusName.IsPrimaryKey = false;
                colvarPMTStatusName.IsForeignKey = false;
                colvarPMTStatusName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTStatusName);
                
                TableSchema.TableColumn colvarBrickID = new TableSchema.TableColumn(schema);
                colvarBrickID.ColumnName = "BrickID";
                colvarBrickID.DataType = DbType.Int32;
                colvarBrickID.MaxLength = 0;
                colvarBrickID.AutoIncrement = false;
                colvarBrickID.IsNullable = true;
                colvarBrickID.IsPrimaryKey = false;
                colvarBrickID.IsForeignKey = false;
                colvarBrickID.IsReadOnly = false;
                
                schema.Columns.Add(colvarBrickID);
                
                TableSchema.TableColumn colvarBrickName = new TableSchema.TableColumn(schema);
                colvarBrickName.ColumnName = "BrickName";
                colvarBrickName.DataType = DbType.AnsiString;
                colvarBrickName.MaxLength = 50;
                colvarBrickName.AutoIncrement = false;
                colvarBrickName.IsNullable = true;
                colvarBrickName.IsPrimaryKey = false;
                colvarBrickName.IsForeignKey = false;
                colvarBrickName.IsReadOnly = false;
                
                schema.Columns.Add(colvarBrickName);
                
                TableSchema.TableColumn colvarBrickTypeID = new TableSchema.TableColumn(schema);
                colvarBrickTypeID.ColumnName = "BrickTypeID";
                colvarBrickTypeID.DataType = DbType.Int32;
                colvarBrickTypeID.MaxLength = 0;
                colvarBrickTypeID.AutoIncrement = false;
                colvarBrickTypeID.IsNullable = true;
                colvarBrickTypeID.IsPrimaryKey = false;
                colvarBrickTypeID.IsForeignKey = false;
                colvarBrickTypeID.IsReadOnly = false;
                
                schema.Columns.Add(colvarBrickTypeID);
                
                TableSchema.TableColumn colvarBrickTypeName = new TableSchema.TableColumn(schema);
                colvarBrickTypeName.ColumnName = "BrickTypeName";
                colvarBrickTypeName.DataType = DbType.AnsiString;
                colvarBrickTypeName.MaxLength = 50;
                colvarBrickTypeName.AutoIncrement = false;
                colvarBrickTypeName.IsNullable = true;
                colvarBrickTypeName.IsPrimaryKey = false;
                colvarBrickTypeName.IsForeignKey = false;
                colvarBrickTypeName.IsReadOnly = false;
                
                schema.Columns.Add(colvarBrickTypeName);
                
                TableSchema.TableColumn colvarBrickTypeLevel = new TableSchema.TableColumn(schema);
                colvarBrickTypeLevel.ColumnName = "BrickTypeLevel";
                colvarBrickTypeLevel.DataType = DbType.Int32;
                colvarBrickTypeLevel.MaxLength = 0;
                colvarBrickTypeLevel.AutoIncrement = false;
                colvarBrickTypeLevel.IsNullable = true;
                colvarBrickTypeLevel.IsPrimaryKey = false;
                colvarBrickTypeLevel.IsForeignKey = false;
                colvarBrickTypeLevel.IsReadOnly = false;
                
                schema.Columns.Add(colvarBrickTypeLevel);
                
                TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
                colvarBranchID.ColumnName = "BranchID";
                colvarBranchID.DataType = DbType.Int32;
                colvarBranchID.MaxLength = 0;
                colvarBranchID.AutoIncrement = false;
                colvarBranchID.IsNullable = true;
                colvarBranchID.IsPrimaryKey = false;
                colvarBranchID.IsForeignKey = false;
                colvarBranchID.IsReadOnly = false;
                
                schema.Columns.Add(colvarBranchID);
                
                TableSchema.TableColumn colvarBranchCode = new TableSchema.TableColumn(schema);
                colvarBranchCode.ColumnName = "BranchCode";
                colvarBranchCode.DataType = DbType.AnsiString;
                colvarBranchCode.MaxLength = 50;
                colvarBranchCode.AutoIncrement = false;
                colvarBranchCode.IsNullable = true;
                colvarBranchCode.IsPrimaryKey = false;
                colvarBranchCode.IsForeignKey = false;
                colvarBranchCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarBranchCode);
                
                TableSchema.TableColumn colvarBranchName = new TableSchema.TableColumn(schema);
                colvarBranchName.ColumnName = "BranchName";
                colvarBranchName.DataType = DbType.AnsiString;
                colvarBranchName.MaxLength = 150;
                colvarBranchName.AutoIncrement = false;
                colvarBranchName.IsNullable = true;
                colvarBranchName.IsPrimaryKey = false;
                colvarBranchName.IsForeignKey = false;
                colvarBranchName.IsReadOnly = false;
                
                schema.Columns.Add(colvarBranchName);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwTblPMT",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwTblPMT()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwTblPMT(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwTblPMT(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwTblPMT(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Pmtid")]
        [Bindable(true)]
        public int Pmtid 
	    {
		    get
		    {
			    return GetColumnValue<int>("PMTID");
		    }
            set 
		    {
			    SetColumnValue("PMTID", value);
            }
        }
	      
        [XmlAttribute("PMTNo")]
        [Bindable(true)]
        public string PMTNo 
	    {
		    get
		    {
			    return GetColumnValue<string>("PMTNo");
		    }
            set 
		    {
			    SetColumnValue("PMTNo", value);
            }
        }
	      
        [XmlAttribute("PMTCode")]
        [Bindable(true)]
        public string PMTCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("PMTCode");
		    }
            set 
		    {
			    SetColumnValue("PMTCode", value);
            }
        }
	      
        [XmlAttribute("IsActive")]
        [Bindable(true)]
        public bool? IsActive 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("IsActive");
		    }
            set 
		    {
			    SetColumnValue("IsActive", value);
            }
        }
	      
        [XmlAttribute("CreatedBy")]
        [Bindable(true)]
        public int? CreatedBy 
	    {
		    get
		    {
			    return GetColumnValue<int?>("CreatedBy");
		    }
            set 
		    {
			    SetColumnValue("CreatedBy", value);
            }
        }
	      
        [XmlAttribute("ModifiedBy")]
        [Bindable(true)]
        public int? ModifiedBy 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ModifiedBy");
		    }
            set 
		    {
			    SetColumnValue("ModifiedBy", value);
            }
        }
	      
        [XmlAttribute("PMTStatusID")]
        [Bindable(true)]
        public int PMTStatusID 
	    {
		    get
		    {
			    return GetColumnValue<int>("PMTStatusID");
		    }
            set 
		    {
			    SetColumnValue("PMTStatusID", value);
            }
        }
	      
        [XmlAttribute("PMTStatusName")]
        [Bindable(true)]
        public string PMTStatusName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PMTStatusName");
		    }
            set 
		    {
			    SetColumnValue("PMTStatusName", value);
            }
        }
	      
        [XmlAttribute("BrickID")]
        [Bindable(true)]
        public int? BrickID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("BrickID");
		    }
            set 
		    {
			    SetColumnValue("BrickID", value);
            }
        }
	      
        [XmlAttribute("BrickName")]
        [Bindable(true)]
        public string BrickName 
	    {
		    get
		    {
			    return GetColumnValue<string>("BrickName");
		    }
            set 
		    {
			    SetColumnValue("BrickName", value);
            }
        }
	      
        [XmlAttribute("BrickTypeID")]
        [Bindable(true)]
        public int? BrickTypeID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("BrickTypeID");
		    }
            set 
		    {
			    SetColumnValue("BrickTypeID", value);
            }
        }
	      
        [XmlAttribute("BrickTypeName")]
        [Bindable(true)]
        public string BrickTypeName 
	    {
		    get
		    {
			    return GetColumnValue<string>("BrickTypeName");
		    }
            set 
		    {
			    SetColumnValue("BrickTypeName", value);
            }
        }
	      
        [XmlAttribute("BrickTypeLevel")]
        [Bindable(true)]
        public int? BrickTypeLevel 
	    {
		    get
		    {
			    return GetColumnValue<int?>("BrickTypeLevel");
		    }
            set 
		    {
			    SetColumnValue("BrickTypeLevel", value);
            }
        }
	      
        [XmlAttribute("BranchID")]
        [Bindable(true)]
        public int? BranchID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("BranchID");
		    }
            set 
		    {
			    SetColumnValue("BranchID", value);
            }
        }
	      
        [XmlAttribute("BranchCode")]
        [Bindable(true)]
        public string BranchCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("BranchCode");
		    }
            set 
		    {
			    SetColumnValue("BranchCode", value);
            }
        }
	      
        [XmlAttribute("BranchName")]
        [Bindable(true)]
        public string BranchName 
	    {
		    get
		    {
			    return GetColumnValue<string>("BranchName");
		    }
            set 
		    {
			    SetColumnValue("BranchName", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Pmtid = @"PMTID";
            
            public static string PMTNo = @"PMTNo";
            
            public static string PMTCode = @"PMTCode";
            
            public static string IsActive = @"IsActive";
            
            public static string CreatedBy = @"CreatedBy";
            
            public static string ModifiedBy = @"ModifiedBy";
            
            public static string PMTStatusID = @"PMTStatusID";
            
            public static string PMTStatusName = @"PMTStatusName";
            
            public static string BrickID = @"BrickID";
            
            public static string BrickName = @"BrickName";
            
            public static string BrickTypeID = @"BrickTypeID";
            
            public static string BrickTypeName = @"BrickTypeName";
            
            public static string BrickTypeLevel = @"BrickTypeLevel";
            
            public static string BranchID = @"BranchID";
            
            public static string BranchCode = @"BranchCode";
            
            public static string BranchName = @"BranchName";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
