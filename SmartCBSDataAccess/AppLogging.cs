using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the AppLogging class.
	/// </summary>
    [Serializable]
	public partial class AppLoggingCollection : ActiveList<AppLogging, AppLoggingCollection>
	{	   
		public AppLoggingCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>AppLoggingCollection</returns>
		public AppLoggingCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                AppLogging o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the AppLogging table.
	/// </summary>
	[Serializable]
	public partial class AppLogging : ActiveRecord<AppLogging>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public AppLogging()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public AppLogging(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public AppLogging(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public AppLogging(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AppLogging", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarAppLoggingID = new TableSchema.TableColumn(schema);
				colvarAppLoggingID.ColumnName = "AppLoggingID";
				colvarAppLoggingID.DataType = DbType.Int32;
				colvarAppLoggingID.MaxLength = 0;
				colvarAppLoggingID.AutoIncrement = true;
				colvarAppLoggingID.IsNullable = false;
				colvarAppLoggingID.IsPrimaryKey = true;
				colvarAppLoggingID.IsForeignKey = false;
				colvarAppLoggingID.IsReadOnly = false;
				colvarAppLoggingID.DefaultSetting = @"";
				colvarAppLoggingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppLoggingID);
				
				TableSchema.TableColumn colvarActivity = new TableSchema.TableColumn(schema);
				colvarActivity.ColumnName = "Activity";
				colvarActivity.DataType = DbType.AnsiString;
				colvarActivity.MaxLength = -1;
				colvarActivity.AutoIncrement = false;
				colvarActivity.IsNullable = true;
				colvarActivity.IsPrimaryKey = false;
				colvarActivity.IsForeignKey = false;
				colvarActivity.IsReadOnly = false;
				colvarActivity.DefaultSetting = @"";
				colvarActivity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivity);
				
				TableSchema.TableColumn colvarIsSuccessful = new TableSchema.TableColumn(schema);
				colvarIsSuccessful.ColumnName = "IsSuccessful";
				colvarIsSuccessful.DataType = DbType.Boolean;
				colvarIsSuccessful.MaxLength = 0;
				colvarIsSuccessful.AutoIncrement = false;
				colvarIsSuccessful.IsNullable = true;
				colvarIsSuccessful.IsPrimaryKey = false;
				colvarIsSuccessful.IsForeignKey = false;
				colvarIsSuccessful.IsReadOnly = false;
				colvarIsSuccessful.DefaultSetting = @"";
				colvarIsSuccessful.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSuccessful);
				
				TableSchema.TableColumn colvarModel = new TableSchema.TableColumn(schema);
				colvarModel.ColumnName = "Model";
				colvarModel.DataType = DbType.AnsiString;
				colvarModel.MaxLength = -1;
				colvarModel.AutoIncrement = false;
				colvarModel.IsNullable = true;
				colvarModel.IsPrimaryKey = false;
				colvarModel.IsForeignKey = false;
				colvarModel.IsReadOnly = false;
				colvarModel.DefaultSetting = @"";
				colvarModel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModel);
				
				TableSchema.TableColumn colvarAppVersion = new TableSchema.TableColumn(schema);
				colvarAppVersion.ColumnName = "AppVersion";
				colvarAppVersion.DataType = DbType.AnsiString;
				colvarAppVersion.MaxLength = -1;
				colvarAppVersion.AutoIncrement = false;
				colvarAppVersion.IsNullable = true;
				colvarAppVersion.IsPrimaryKey = false;
				colvarAppVersion.IsForeignKey = false;
				colvarAppVersion.IsReadOnly = false;
				colvarAppVersion.DefaultSetting = @"";
				colvarAppVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppVersion);
				
				TableSchema.TableColumn colvarException = new TableSchema.TableColumn(schema);
				colvarException.ColumnName = "Exception";
				colvarException.DataType = DbType.AnsiString;
				colvarException.MaxLength = -1;
				colvarException.AutoIncrement = false;
				colvarException.IsNullable = true;
				colvarException.IsPrimaryKey = false;
				colvarException.IsForeignKey = false;
				colvarException.IsReadOnly = false;
				colvarException.DefaultSetting = @"";
				colvarException.ForeignKeyTableName = "";
				schema.Columns.Add(colvarException);
				
				TableSchema.TableColumn colvarJsonData = new TableSchema.TableColumn(schema);
				colvarJsonData.ColumnName = "JsonData";
				colvarJsonData.DataType = DbType.AnsiString;
				colvarJsonData.MaxLength = -1;
				colvarJsonData.AutoIncrement = false;
				colvarJsonData.IsNullable = true;
				colvarJsonData.IsPrimaryKey = false;
				colvarJsonData.IsForeignKey = false;
				colvarJsonData.IsReadOnly = false;
				colvarJsonData.DefaultSetting = @"";
				colvarJsonData.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJsonData);
				
				TableSchema.TableColumn colvarMeterReadingReadingUser = new TableSchema.TableColumn(schema);
				colvarMeterReadingReadingUser.ColumnName = "MeterReadingReadingUser";
				colvarMeterReadingReadingUser.DataType = DbType.Int32;
				colvarMeterReadingReadingUser.MaxLength = 0;
				colvarMeterReadingReadingUser.AutoIncrement = false;
				colvarMeterReadingReadingUser.IsNullable = true;
				colvarMeterReadingReadingUser.IsPrimaryKey = false;
				colvarMeterReadingReadingUser.IsForeignKey = false;
				colvarMeterReadingReadingUser.IsReadOnly = false;
				colvarMeterReadingReadingUser.DefaultSetting = @"";
				colvarMeterReadingReadingUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterReadingReadingUser);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("AppLogging",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("AppLoggingID")]
		[Bindable(true)]
		public int AppLoggingID 
		{
			get { return GetColumnValue<int>(Columns.AppLoggingID); }
			set { SetColumnValue(Columns.AppLoggingID, value); }
		}
		  
		[XmlAttribute("Activity")]
		[Bindable(true)]
		public string Activity 
		{
			get { return GetColumnValue<string>(Columns.Activity); }
			set { SetColumnValue(Columns.Activity, value); }
		}
		  
		[XmlAttribute("IsSuccessful")]
		[Bindable(true)]
		public bool? IsSuccessful 
		{
			get { return GetColumnValue<bool?>(Columns.IsSuccessful); }
			set { SetColumnValue(Columns.IsSuccessful, value); }
		}
		  
		[XmlAttribute("Model")]
		[Bindable(true)]
		public string Model 
		{
			get { return GetColumnValue<string>(Columns.Model); }
			set { SetColumnValue(Columns.Model, value); }
		}
		  
		[XmlAttribute("AppVersion")]
		[Bindable(true)]
		public string AppVersion 
		{
			get { return GetColumnValue<string>(Columns.AppVersion); }
			set { SetColumnValue(Columns.AppVersion, value); }
		}
		  
		[XmlAttribute("Exception")]
		[Bindable(true)]
		public string Exception 
		{
			get { return GetColumnValue<string>(Columns.Exception); }
			set { SetColumnValue(Columns.Exception, value); }
		}
		  
		[XmlAttribute("JsonData")]
		[Bindable(true)]
		public string JsonData 
		{
			get { return GetColumnValue<string>(Columns.JsonData); }
			set { SetColumnValue(Columns.JsonData, value); }
		}
		  
		[XmlAttribute("MeterReadingReadingUser")]
		[Bindable(true)]
		public int? MeterReadingReadingUser 
		{
			get { return GetColumnValue<int?>(Columns.MeterReadingReadingUser); }
			set { SetColumnValue(Columns.MeterReadingReadingUser, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varActivity,bool? varIsSuccessful,string varModel,string varAppVersion,string varException,string varJsonData,int? varMeterReadingReadingUser)
		{
			AppLogging item = new AppLogging();
			
			item.Activity = varActivity;
			
			item.IsSuccessful = varIsSuccessful;
			
			item.Model = varModel;
			
			item.AppVersion = varAppVersion;
			
			item.Exception = varException;
			
			item.JsonData = varJsonData;
			
			item.MeterReadingReadingUser = varMeterReadingReadingUser;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varAppLoggingID,string varActivity,bool? varIsSuccessful,string varModel,string varAppVersion,string varException,string varJsonData,int? varMeterReadingReadingUser)
		{
			AppLogging item = new AppLogging();
			
				item.AppLoggingID = varAppLoggingID;
			
				item.Activity = varActivity;
			
				item.IsSuccessful = varIsSuccessful;
			
				item.Model = varModel;
			
				item.AppVersion = varAppVersion;
			
				item.Exception = varException;
			
				item.JsonData = varJsonData;
			
				item.MeterReadingReadingUser = varMeterReadingReadingUser;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn AppLoggingIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivityColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IsSuccessfulColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ModelColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AppVersionColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ExceptionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn JsonDataColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingReadingUserColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string AppLoggingID = @"AppLoggingID";
			 public static string Activity = @"Activity";
			 public static string IsSuccessful = @"IsSuccessful";
			 public static string Model = @"Model";
			 public static string AppVersion = @"AppVersion";
			 public static string Exception = @"Exception";
			 public static string JsonData = @"JsonData";
			 public static string MeterReadingReadingUser = @"MeterReadingReadingUser";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
