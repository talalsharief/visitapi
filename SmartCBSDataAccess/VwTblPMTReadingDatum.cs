using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwTblPMTReadingDatum class.
    /// </summary>
    [Serializable]
    public partial class VwTblPMTReadingDatumCollection : ReadOnlyList<VwTblPMTReadingDatum, VwTblPMTReadingDatumCollection>
    {        
        public VwTblPMTReadingDatumCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwTblPMTReadingData view.
    /// </summary>
    [Serializable]
    public partial class VwTblPMTReadingDatum : ReadOnlyRecord<VwTblPMTReadingDatum>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwTblPMTReadingData", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
                colvarModifiedOn.ColumnName = "ModifiedOn";
                colvarModifiedOn.DataType = DbType.DateTime;
                colvarModifiedOn.MaxLength = 0;
                colvarModifiedOn.AutoIncrement = false;
                colvarModifiedOn.IsNullable = true;
                colvarModifiedOn.IsPrimaryKey = false;
                colvarModifiedOn.IsForeignKey = false;
                colvarModifiedOn.IsReadOnly = false;
                
                schema.Columns.Add(colvarModifiedOn);
                
                TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
                colvarCreatedOn.ColumnName = "CreatedOn";
                colvarCreatedOn.DataType = DbType.DateTime;
                colvarCreatedOn.MaxLength = 0;
                colvarCreatedOn.AutoIncrement = false;
                colvarCreatedOn.IsNullable = true;
                colvarCreatedOn.IsPrimaryKey = false;
                colvarCreatedOn.IsForeignKey = false;
                colvarCreatedOn.IsReadOnly = false;
                
                schema.Columns.Add(colvarCreatedOn);
                
                TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
                colvarRemarks.ColumnName = "Remarks";
                colvarRemarks.DataType = DbType.AnsiString;
                colvarRemarks.MaxLength = -1;
                colvarRemarks.AutoIncrement = false;
                colvarRemarks.IsNullable = true;
                colvarRemarks.IsPrimaryKey = false;
                colvarRemarks.IsForeignKey = false;
                colvarRemarks.IsReadOnly = false;
                
                schema.Columns.Add(colvarRemarks);
                
                TableSchema.TableColumn colvarPMTReading = new TableSchema.TableColumn(schema);
                colvarPMTReading.ColumnName = "PMTReading";
                colvarPMTReading.DataType = DbType.Decimal;
                colvarPMTReading.MaxLength = 0;
                colvarPMTReading.AutoIncrement = false;
                colvarPMTReading.IsNullable = true;
                colvarPMTReading.IsPrimaryKey = false;
                colvarPMTReading.IsForeignKey = false;
                colvarPMTReading.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTReading);
                
                TableSchema.TableColumn colvarPMTReadingDate = new TableSchema.TableColumn(schema);
                colvarPMTReadingDate.ColumnName = "PMTReadingDate";
                colvarPMTReadingDate.DataType = DbType.DateTime;
                colvarPMTReadingDate.MaxLength = 0;
                colvarPMTReadingDate.AutoIncrement = false;
                colvarPMTReadingDate.IsNullable = true;
                colvarPMTReadingDate.IsPrimaryKey = false;
                colvarPMTReadingDate.IsForeignKey = false;
                colvarPMTReadingDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTReadingDate);
                
                TableSchema.TableColumn colvarPMTNo = new TableSchema.TableColumn(schema);
                colvarPMTNo.ColumnName = "PMTNo";
                colvarPMTNo.DataType = DbType.AnsiString;
                colvarPMTNo.MaxLength = 50;
                colvarPMTNo.AutoIncrement = false;
                colvarPMTNo.IsNullable = true;
                colvarPMTNo.IsPrimaryKey = false;
                colvarPMTNo.IsForeignKey = false;
                colvarPMTNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTNo);
                
                TableSchema.TableColumn colvarDataID = new TableSchema.TableColumn(schema);
                colvarDataID.ColumnName = "DataID";
                colvarDataID.DataType = DbType.Int32;
                colvarDataID.MaxLength = 0;
                colvarDataID.AutoIncrement = false;
                colvarDataID.IsNullable = false;
                colvarDataID.IsPrimaryKey = false;
                colvarDataID.IsForeignKey = false;
                colvarDataID.IsReadOnly = false;
                
                schema.Columns.Add(colvarDataID);
                
                TableSchema.TableColumn colvarApprovalID = new TableSchema.TableColumn(schema);
                colvarApprovalID.ColumnName = "ApprovalID";
                colvarApprovalID.DataType = DbType.Int32;
                colvarApprovalID.MaxLength = 0;
                colvarApprovalID.AutoIncrement = false;
                colvarApprovalID.IsNullable = false;
                colvarApprovalID.IsPrimaryKey = false;
                colvarApprovalID.IsForeignKey = false;
                colvarApprovalID.IsReadOnly = false;
                
                schema.Columns.Add(colvarApprovalID);
                
                TableSchema.TableColumn colvarApprovalStatus = new TableSchema.TableColumn(schema);
                colvarApprovalStatus.ColumnName = "ApprovalStatus";
                colvarApprovalStatus.DataType = DbType.AnsiString;
                colvarApprovalStatus.MaxLength = 50;
                colvarApprovalStatus.AutoIncrement = false;
                colvarApprovalStatus.IsNullable = true;
                colvarApprovalStatus.IsPrimaryKey = false;
                colvarApprovalStatus.IsForeignKey = false;
                colvarApprovalStatus.IsReadOnly = false;
                
                schema.Columns.Add(colvarApprovalStatus);
                
                TableSchema.TableColumn colvarEmployeeID = new TableSchema.TableColumn(schema);
                colvarEmployeeID.ColumnName = "EmployeeID";
                colvarEmployeeID.DataType = DbType.Int32;
                colvarEmployeeID.MaxLength = 0;
                colvarEmployeeID.AutoIncrement = false;
                colvarEmployeeID.IsNullable = true;
                colvarEmployeeID.IsPrimaryKey = false;
                colvarEmployeeID.IsForeignKey = false;
                colvarEmployeeID.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmployeeID);
                
                TableSchema.TableColumn colvarEmployeeCode = new TableSchema.TableColumn(schema);
                colvarEmployeeCode.ColumnName = "EmployeeCode";
                colvarEmployeeCode.DataType = DbType.AnsiString;
                colvarEmployeeCode.MaxLength = 20;
                colvarEmployeeCode.AutoIncrement = false;
                colvarEmployeeCode.IsNullable = true;
                colvarEmployeeCode.IsPrimaryKey = false;
                colvarEmployeeCode.IsForeignKey = false;
                colvarEmployeeCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmployeeCode);
                
                TableSchema.TableColumn colvarEmployeeName = new TableSchema.TableColumn(schema);
                colvarEmployeeName.ColumnName = "EmployeeName";
                colvarEmployeeName.DataType = DbType.AnsiString;
                colvarEmployeeName.MaxLength = 100;
                colvarEmployeeName.AutoIncrement = false;
                colvarEmployeeName.IsNullable = true;
                colvarEmployeeName.IsPrimaryKey = false;
                colvarEmployeeName.IsForeignKey = false;
                colvarEmployeeName.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmployeeName);
                
                TableSchema.TableColumn colvarEmailAddress = new TableSchema.TableColumn(schema);
                colvarEmailAddress.ColumnName = "EmailAddress";
                colvarEmailAddress.DataType = DbType.AnsiString;
                colvarEmailAddress.MaxLength = 50;
                colvarEmailAddress.AutoIncrement = false;
                colvarEmailAddress.IsNullable = true;
                colvarEmailAddress.IsPrimaryKey = false;
                colvarEmailAddress.IsForeignKey = false;
                colvarEmailAddress.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmailAddress);
                
                TableSchema.TableColumn colvarMobileNo = new TableSchema.TableColumn(schema);
                colvarMobileNo.ColumnName = "MobileNo";
                colvarMobileNo.DataType = DbType.AnsiString;
                colvarMobileNo.MaxLength = 50;
                colvarMobileNo.AutoIncrement = false;
                colvarMobileNo.IsNullable = true;
                colvarMobileNo.IsPrimaryKey = false;
                colvarMobileNo.IsForeignKey = false;
                colvarMobileNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarMobileNo);
                
                TableSchema.TableColumn colvarPhoneNo = new TableSchema.TableColumn(schema);
                colvarPhoneNo.ColumnName = "PhoneNo";
                colvarPhoneNo.DataType = DbType.AnsiString;
                colvarPhoneNo.MaxLength = 50;
                colvarPhoneNo.AutoIncrement = false;
                colvarPhoneNo.IsNullable = true;
                colvarPhoneNo.IsPrimaryKey = false;
                colvarPhoneNo.IsForeignKey = false;
                colvarPhoneNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhoneNo);
                
                TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
                colvarAddress.ColumnName = "Address";
                colvarAddress.DataType = DbType.AnsiString;
                colvarAddress.MaxLength = 250;
                colvarAddress.AutoIncrement = false;
                colvarAddress.IsNullable = true;
                colvarAddress.IsPrimaryKey = false;
                colvarAddress.IsForeignKey = false;
                colvarAddress.IsReadOnly = false;
                
                schema.Columns.Add(colvarAddress);
                
                TableSchema.TableColumn colvarNic = new TableSchema.TableColumn(schema);
                colvarNic.ColumnName = "NIC";
                colvarNic.DataType = DbType.AnsiString;
                colvarNic.MaxLength = 50;
                colvarNic.AutoIncrement = false;
                colvarNic.IsNullable = true;
                colvarNic.IsPrimaryKey = false;
                colvarNic.IsForeignKey = false;
                colvarNic.IsReadOnly = false;
                
                schema.Columns.Add(colvarNic);
                
                TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
                colvarIsActive.ColumnName = "IsActive";
                colvarIsActive.DataType = DbType.Boolean;
                colvarIsActive.MaxLength = 0;
                colvarIsActive.AutoIncrement = false;
                colvarIsActive.IsNullable = true;
                colvarIsActive.IsPrimaryKey = false;
                colvarIsActive.IsForeignKey = false;
                colvarIsActive.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsActive);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwTblPMTReadingData",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwTblPMTReadingDatum()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwTblPMTReadingDatum(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwTblPMTReadingDatum(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwTblPMTReadingDatum(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("ModifiedOn")]
        [Bindable(true)]
        public DateTime? ModifiedOn 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("ModifiedOn");
		    }
            set 
		    {
			    SetColumnValue("ModifiedOn", value);
            }
        }
	      
        [XmlAttribute("CreatedOn")]
        [Bindable(true)]
        public DateTime? CreatedOn 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("CreatedOn");
		    }
            set 
		    {
			    SetColumnValue("CreatedOn", value);
            }
        }
	      
        [XmlAttribute("Remarks")]
        [Bindable(true)]
        public string Remarks 
	    {
		    get
		    {
			    return GetColumnValue<string>("Remarks");
		    }
            set 
		    {
			    SetColumnValue("Remarks", value);
            }
        }
	      
        [XmlAttribute("PMTReading")]
        [Bindable(true)]
        public decimal? PMTReading 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("PMTReading");
		    }
            set 
		    {
			    SetColumnValue("PMTReading", value);
            }
        }
	      
        [XmlAttribute("PMTReadingDate")]
        [Bindable(true)]
        public DateTime? PMTReadingDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("PMTReadingDate");
		    }
            set 
		    {
			    SetColumnValue("PMTReadingDate", value);
            }
        }
	      
        [XmlAttribute("PMTNo")]
        [Bindable(true)]
        public string PMTNo 
	    {
		    get
		    {
			    return GetColumnValue<string>("PMTNo");
		    }
            set 
		    {
			    SetColumnValue("PMTNo", value);
            }
        }
	      
        [XmlAttribute("DataID")]
        [Bindable(true)]
        public int DataID 
	    {
		    get
		    {
			    return GetColumnValue<int>("DataID");
		    }
            set 
		    {
			    SetColumnValue("DataID", value);
            }
        }
	      
        [XmlAttribute("ApprovalID")]
        [Bindable(true)]
        public int ApprovalID 
	    {
		    get
		    {
			    return GetColumnValue<int>("ApprovalID");
		    }
            set 
		    {
			    SetColumnValue("ApprovalID", value);
            }
        }
	      
        [XmlAttribute("ApprovalStatus")]
        [Bindable(true)]
        public string ApprovalStatus 
	    {
		    get
		    {
			    return GetColumnValue<string>("ApprovalStatus");
		    }
            set 
		    {
			    SetColumnValue("ApprovalStatus", value);
            }
        }
	      
        [XmlAttribute("EmployeeID")]
        [Bindable(true)]
        public int? EmployeeID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("EmployeeID");
		    }
            set 
		    {
			    SetColumnValue("EmployeeID", value);
            }
        }
	      
        [XmlAttribute("EmployeeCode")]
        [Bindable(true)]
        public string EmployeeCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("EmployeeCode");
		    }
            set 
		    {
			    SetColumnValue("EmployeeCode", value);
            }
        }
	      
        [XmlAttribute("EmployeeName")]
        [Bindable(true)]
        public string EmployeeName 
	    {
		    get
		    {
			    return GetColumnValue<string>("EmployeeName");
		    }
            set 
		    {
			    SetColumnValue("EmployeeName", value);
            }
        }
	      
        [XmlAttribute("EmailAddress")]
        [Bindable(true)]
        public string EmailAddress 
	    {
		    get
		    {
			    return GetColumnValue<string>("EmailAddress");
		    }
            set 
		    {
			    SetColumnValue("EmailAddress", value);
            }
        }
	      
        [XmlAttribute("MobileNo")]
        [Bindable(true)]
        public string MobileNo 
	    {
		    get
		    {
			    return GetColumnValue<string>("MobileNo");
		    }
            set 
		    {
			    SetColumnValue("MobileNo", value);
            }
        }
	      
        [XmlAttribute("PhoneNo")]
        [Bindable(true)]
        public string PhoneNo 
	    {
		    get
		    {
			    return GetColumnValue<string>("PhoneNo");
		    }
            set 
		    {
			    SetColumnValue("PhoneNo", value);
            }
        }
	      
        [XmlAttribute("Address")]
        [Bindable(true)]
        public string Address 
	    {
		    get
		    {
			    return GetColumnValue<string>("Address");
		    }
            set 
		    {
			    SetColumnValue("Address", value);
            }
        }
	      
        [XmlAttribute("Nic")]
        [Bindable(true)]
        public string Nic 
	    {
		    get
		    {
			    return GetColumnValue<string>("NIC");
		    }
            set 
		    {
			    SetColumnValue("NIC", value);
            }
        }
	      
        [XmlAttribute("IsActive")]
        [Bindable(true)]
        public bool? IsActive 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("IsActive");
		    }
            set 
		    {
			    SetColumnValue("IsActive", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string ModifiedOn = @"ModifiedOn";
            
            public static string CreatedOn = @"CreatedOn";
            
            public static string Remarks = @"Remarks";
            
            public static string PMTReading = @"PMTReading";
            
            public static string PMTReadingDate = @"PMTReadingDate";
            
            public static string PMTNo = @"PMTNo";
            
            public static string DataID = @"DataID";
            
            public static string ApprovalID = @"ApprovalID";
            
            public static string ApprovalStatus = @"ApprovalStatus";
            
            public static string EmployeeID = @"EmployeeID";
            
            public static string EmployeeCode = @"EmployeeCode";
            
            public static string EmployeeName = @"EmployeeName";
            
            public static string EmailAddress = @"EmailAddress";
            
            public static string MobileNo = @"MobileNo";
            
            public static string PhoneNo = @"PhoneNo";
            
            public static string Address = @"Address";
            
            public static string Nic = @"NIC";
            
            public static string IsActive = @"IsActive";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
