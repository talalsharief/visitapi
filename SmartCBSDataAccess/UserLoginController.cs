using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
    /// <summary>
    /// Controller class for UserLogin
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class UserLoginController
    {
        // Preload our schema..
        UserLogin thisSchemaLoad = new UserLogin();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public UserLoginCollection FetchAll()
        {
            UserLoginCollection coll = new UserLoginCollection();
            Query qry = new Query(UserLogin.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public UserLoginCollection FetchByID(object UserLoginId)
        {
            UserLoginCollection coll = new UserLoginCollection().Where("UserLoginId", UserLoginId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public UserLoginCollection FetchByQuery(Query qry)
        {
            UserLoginCollection coll = new UserLoginCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object UserLoginId)
        {
            return (UserLogin.Delete(UserLoginId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object UserLoginId)
        {
            return (UserLogin.Destroy(UserLoginId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string UserName,string Passworrd,string UserType,string EmailAddress,int UserRoleId,int EmployeeId,int? Attempt,bool? IsAdmin,bool IsActive,bool? IsVisible)
	    {
		    UserLogin item = new UserLogin();
		    
            item.UserName = UserName;
            
            item.Passworrd = Passworrd;
            
            item.UserType = UserType;
            
            item.EmailAddress = EmailAddress;
            
            item.UserRoleId = UserRoleId;
            
            item.EmployeeId = EmployeeId;
            
            item.Attempt = Attempt;
            
            item.IsAdmin = IsAdmin;
            
            item.IsActive = IsActive;
            
            item.IsVisible = IsVisible;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int UserLoginId,string UserName,string Passworrd,string UserType,string EmailAddress,int UserRoleId,int EmployeeId,int? Attempt,bool? IsAdmin,bool IsActive,bool? IsVisible)
	    {
		    UserLogin item = new UserLogin();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.UserLoginId = UserLoginId;
				
			item.UserName = UserName;
				
			item.Passworrd = Passworrd;
				
			item.UserType = UserType;
				
			item.EmailAddress = EmailAddress;
				
			item.UserRoleId = UserRoleId;
				
			item.EmployeeId = EmployeeId;
				
			item.Attempt = Attempt;
				
			item.IsAdmin = IsAdmin;
				
			item.IsActive = IsActive;
				
			item.IsVisible = IsVisible;
				
	        item.Save(UserName);
	    }
    }
}
