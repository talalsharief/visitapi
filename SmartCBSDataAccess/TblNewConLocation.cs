using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblNewConLocation class.
	/// </summary>
    [Serializable]
	public partial class TblNewConLocationCollection : ActiveList<TblNewConLocation, TblNewConLocationCollection>
	{	   
		public TblNewConLocationCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblNewConLocationCollection</returns>
		public TblNewConLocationCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblNewConLocation o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblNewConLocation table.
	/// </summary>
	[Serializable]
	public partial class TblNewConLocation : ActiveRecord<TblNewConLocation>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblNewConLocation()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblNewConLocation(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblNewConLocation(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblNewConLocation(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblNewConLocation", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarLocationID = new TableSchema.TableColumn(schema);
				colvarLocationID.ColumnName = "LocationID";
				colvarLocationID.DataType = DbType.Int32;
				colvarLocationID.MaxLength = 0;
				colvarLocationID.AutoIncrement = true;
				colvarLocationID.IsNullable = false;
				colvarLocationID.IsPrimaryKey = true;
				colvarLocationID.IsForeignKey = false;
				colvarLocationID.IsReadOnly = false;
				colvarLocationID.DefaultSetting = @"";
				colvarLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationID);
				
				TableSchema.TableColumn colvarNewConnectionID = new TableSchema.TableColumn(schema);
				colvarNewConnectionID.ColumnName = "NewConnectionID";
				colvarNewConnectionID.DataType = DbType.Int32;
				colvarNewConnectionID.MaxLength = 0;
				colvarNewConnectionID.AutoIncrement = false;
				colvarNewConnectionID.IsNullable = true;
				colvarNewConnectionID.IsPrimaryKey = false;
				colvarNewConnectionID.IsForeignKey = true;
				colvarNewConnectionID.IsReadOnly = false;
				colvarNewConnectionID.DefaultSetting = @"";
				
					colvarNewConnectionID.ForeignKeyTableName = "TblNewConnection";
				schema.Columns.Add(colvarNewConnectionID);
				
				TableSchema.TableColumn colvarExistingMeterNo = new TableSchema.TableColumn(schema);
				colvarExistingMeterNo.ColumnName = "ExistingMeterNo";
				colvarExistingMeterNo.DataType = DbType.AnsiString;
				colvarExistingMeterNo.MaxLength = -1;
				colvarExistingMeterNo.AutoIncrement = false;
				colvarExistingMeterNo.IsNullable = true;
				colvarExistingMeterNo.IsPrimaryKey = false;
				colvarExistingMeterNo.IsForeignKey = false;
				colvarExistingMeterNo.IsReadOnly = false;
				colvarExistingMeterNo.DefaultSetting = @"";
				colvarExistingMeterNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExistingMeterNo);
				
				TableSchema.TableColumn colvarExistingGasMeterNo = new TableSchema.TableColumn(schema);
				colvarExistingGasMeterNo.ColumnName = "ExistingGasMeterNo";
				colvarExistingGasMeterNo.DataType = DbType.AnsiString;
				colvarExistingGasMeterNo.MaxLength = -1;
				colvarExistingGasMeterNo.AutoIncrement = false;
				colvarExistingGasMeterNo.IsNullable = true;
				colvarExistingGasMeterNo.IsPrimaryKey = false;
				colvarExistingGasMeterNo.IsForeignKey = false;
				colvarExistingGasMeterNo.IsReadOnly = false;
				colvarExistingGasMeterNo.DefaultSetting = @"";
				colvarExistingGasMeterNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExistingGasMeterNo);
				
				TableSchema.TableColumn colvarNearestMeterNo = new TableSchema.TableColumn(schema);
				colvarNearestMeterNo.ColumnName = "NearestMeterNo";
				colvarNearestMeterNo.DataType = DbType.AnsiString;
				colvarNearestMeterNo.MaxLength = -1;
				colvarNearestMeterNo.AutoIncrement = false;
				colvarNearestMeterNo.IsNullable = true;
				colvarNearestMeterNo.IsPrimaryKey = false;
				colvarNearestMeterNo.IsForeignKey = false;
				colvarNearestMeterNo.IsReadOnly = false;
				colvarNearestMeterNo.DefaultSetting = @"";
				colvarNearestMeterNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNearestMeterNo);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.AnsiString;
				colvarAddress.MaxLength = -1;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = true;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblNewConLocation",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("LocationID")]
		[Bindable(true)]
		public int LocationID 
		{
			get { return GetColumnValue<int>(Columns.LocationID); }
			set { SetColumnValue(Columns.LocationID, value); }
		}
		  
		[XmlAttribute("NewConnectionID")]
		[Bindable(true)]
		public int? NewConnectionID 
		{
			get { return GetColumnValue<int?>(Columns.NewConnectionID); }
			set { SetColumnValue(Columns.NewConnectionID, value); }
		}
		  
		[XmlAttribute("ExistingMeterNo")]
		[Bindable(true)]
		public string ExistingMeterNo 
		{
			get { return GetColumnValue<string>(Columns.ExistingMeterNo); }
			set { SetColumnValue(Columns.ExistingMeterNo, value); }
		}
		  
		[XmlAttribute("ExistingGasMeterNo")]
		[Bindable(true)]
		public string ExistingGasMeterNo 
		{
			get { return GetColumnValue<string>(Columns.ExistingGasMeterNo); }
			set { SetColumnValue(Columns.ExistingGasMeterNo, value); }
		}
		  
		[XmlAttribute("NearestMeterNo")]
		[Bindable(true)]
		public string NearestMeterNo 
		{
			get { return GetColumnValue<string>(Columns.NearestMeterNo); }
			set { SetColumnValue(Columns.NearestMeterNo, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblNewConnection ActiveRecord object related to this TblNewConLocation
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblNewConnection TblNewConnection
		{
			get { return SmartCBSDataAccess.TblNewConnection.FetchByID(this.NewConnectionID); }
			set { SetColumnValue("NewConnectionID", value.NewConnectionID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varNewConnectionID,string varExistingMeterNo,string varExistingGasMeterNo,string varNearestMeterNo,string varAddress,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblNewConLocation item = new TblNewConLocation();
			
			item.NewConnectionID = varNewConnectionID;
			
			item.ExistingMeterNo = varExistingMeterNo;
			
			item.ExistingGasMeterNo = varExistingGasMeterNo;
			
			item.NearestMeterNo = varNearestMeterNo;
			
			item.Address = varAddress;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varLocationID,int? varNewConnectionID,string varExistingMeterNo,string varExistingGasMeterNo,string varNearestMeterNo,string varAddress,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblNewConLocation item = new TblNewConLocation();
			
				item.LocationID = varLocationID;
			
				item.NewConnectionID = varNewConnectionID;
			
				item.ExistingMeterNo = varExistingMeterNo;
			
				item.ExistingGasMeterNo = varExistingGasMeterNo;
			
				item.NearestMeterNo = varNearestMeterNo;
			
				item.Address = varAddress;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn LocationIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NewConnectionIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ExistingMeterNoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ExistingGasMeterNoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NearestMeterNoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string LocationID = @"LocationID";
			 public static string NewConnectionID = @"NewConnectionID";
			 public static string ExistingMeterNo = @"ExistingMeterNo";
			 public static string ExistingGasMeterNo = @"ExistingGasMeterNo";
			 public static string NearestMeterNo = @"NearestMeterNo";
			 public static string Address = @"Address";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
