using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblEmployee class.
	/// </summary>
    [Serializable]
	public partial class TblEmployeeCollection : ActiveList<TblEmployee, TblEmployeeCollection>
	{	   
		public TblEmployeeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblEmployeeCollection</returns>
		public TblEmployeeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblEmployee o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblEmployee table.
	/// </summary>
	[Serializable]
	public partial class TblEmployee : ActiveRecord<TblEmployee>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblEmployee()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblEmployee(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblEmployee(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblEmployee(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblEmployee", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarEmployeeID = new TableSchema.TableColumn(schema);
				colvarEmployeeID.ColumnName = "EmployeeID";
				colvarEmployeeID.DataType = DbType.Int32;
				colvarEmployeeID.MaxLength = 0;
				colvarEmployeeID.AutoIncrement = true;
				colvarEmployeeID.IsNullable = false;
				colvarEmployeeID.IsPrimaryKey = true;
				colvarEmployeeID.IsForeignKey = true;
				colvarEmployeeID.IsReadOnly = false;
				colvarEmployeeID.DefaultSetting = @"";
				
					colvarEmployeeID.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarEmployeeID);
				
				TableSchema.TableColumn colvarEmployeeCode = new TableSchema.TableColumn(schema);
				colvarEmployeeCode.ColumnName = "EmployeeCode";
				colvarEmployeeCode.DataType = DbType.AnsiString;
				colvarEmployeeCode.MaxLength = 20;
				colvarEmployeeCode.AutoIncrement = false;
				colvarEmployeeCode.IsNullable = true;
				colvarEmployeeCode.IsPrimaryKey = false;
				colvarEmployeeCode.IsForeignKey = false;
				colvarEmployeeCode.IsReadOnly = false;
				colvarEmployeeCode.DefaultSetting = @"";
				colvarEmployeeCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmployeeCode);
				
				TableSchema.TableColumn colvarEmployeeName = new TableSchema.TableColumn(schema);
				colvarEmployeeName.ColumnName = "EmployeeName";
				colvarEmployeeName.DataType = DbType.AnsiString;
				colvarEmployeeName.MaxLength = 100;
				colvarEmployeeName.AutoIncrement = false;
				colvarEmployeeName.IsNullable = true;
				colvarEmployeeName.IsPrimaryKey = false;
				colvarEmployeeName.IsForeignKey = false;
				colvarEmployeeName.IsReadOnly = false;
				colvarEmployeeName.DefaultSetting = @"";
				colvarEmployeeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmployeeName);
				
				TableSchema.TableColumn colvarEmailAddress = new TableSchema.TableColumn(schema);
				colvarEmailAddress.ColumnName = "EmailAddress";
				colvarEmailAddress.DataType = DbType.AnsiString;
				colvarEmailAddress.MaxLength = 50;
				colvarEmailAddress.AutoIncrement = false;
				colvarEmailAddress.IsNullable = true;
				colvarEmailAddress.IsPrimaryKey = false;
				colvarEmailAddress.IsForeignKey = false;
				colvarEmailAddress.IsReadOnly = false;
				colvarEmailAddress.DefaultSetting = @"";
				colvarEmailAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmailAddress);
				
				TableSchema.TableColumn colvarMobileNo = new TableSchema.TableColumn(schema);
				colvarMobileNo.ColumnName = "MobileNo";
				colvarMobileNo.DataType = DbType.AnsiString;
				colvarMobileNo.MaxLength = 50;
				colvarMobileNo.AutoIncrement = false;
				colvarMobileNo.IsNullable = true;
				colvarMobileNo.IsPrimaryKey = false;
				colvarMobileNo.IsForeignKey = false;
				colvarMobileNo.IsReadOnly = false;
				colvarMobileNo.DefaultSetting = @"";
				colvarMobileNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMobileNo);
				
				TableSchema.TableColumn colvarPhoneNo = new TableSchema.TableColumn(schema);
				colvarPhoneNo.ColumnName = "PhoneNo";
				colvarPhoneNo.DataType = DbType.AnsiString;
				colvarPhoneNo.MaxLength = 50;
				colvarPhoneNo.AutoIncrement = false;
				colvarPhoneNo.IsNullable = true;
				colvarPhoneNo.IsPrimaryKey = false;
				colvarPhoneNo.IsForeignKey = false;
				colvarPhoneNo.IsReadOnly = false;
				colvarPhoneNo.DefaultSetting = @"";
				colvarPhoneNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneNo);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.AnsiString;
				colvarAddress.MaxLength = 250;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = true;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				TableSchema.TableColumn colvarNic = new TableSchema.TableColumn(schema);
				colvarNic.ColumnName = "NIC";
				colvarNic.DataType = DbType.AnsiString;
				colvarNic.MaxLength = 50;
				colvarNic.AutoIncrement = false;
				colvarNic.IsNullable = true;
				colvarNic.IsPrimaryKey = false;
				colvarNic.IsForeignKey = false;
				colvarNic.IsReadOnly = false;
				colvarNic.DefaultSetting = @"";
				colvarNic.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNic);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				TableSchema.TableColumn colvarDesisgnationID = new TableSchema.TableColumn(schema);
				colvarDesisgnationID.ColumnName = "DesisgnationID";
				colvarDesisgnationID.DataType = DbType.Int32;
				colvarDesisgnationID.MaxLength = 0;
				colvarDesisgnationID.AutoIncrement = false;
				colvarDesisgnationID.IsNullable = true;
				colvarDesisgnationID.IsPrimaryKey = false;
				colvarDesisgnationID.IsForeignKey = true;
				colvarDesisgnationID.IsReadOnly = false;
				colvarDesisgnationID.DefaultSetting = @"";
				
					colvarDesisgnationID.ForeignKeyTableName = "TblDesignation";
				schema.Columns.Add(colvarDesisgnationID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblEmployee",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("EmployeeID")]
		[Bindable(true)]
		public int EmployeeID 
		{
			get { return GetColumnValue<int>(Columns.EmployeeID); }
			set { SetColumnValue(Columns.EmployeeID, value); }
		}
		  
		[XmlAttribute("EmployeeCode")]
		[Bindable(true)]
		public string EmployeeCode 
		{
			get { return GetColumnValue<string>(Columns.EmployeeCode); }
			set { SetColumnValue(Columns.EmployeeCode, value); }
		}
		  
		[XmlAttribute("EmployeeName")]
		[Bindable(true)]
		public string EmployeeName 
		{
			get { return GetColumnValue<string>(Columns.EmployeeName); }
			set { SetColumnValue(Columns.EmployeeName, value); }
		}
		  
		[XmlAttribute("EmailAddress")]
		[Bindable(true)]
		public string EmailAddress 
		{
			get { return GetColumnValue<string>(Columns.EmailAddress); }
			set { SetColumnValue(Columns.EmailAddress, value); }
		}
		  
		[XmlAttribute("MobileNo")]
		[Bindable(true)]
		public string MobileNo 
		{
			get { return GetColumnValue<string>(Columns.MobileNo); }
			set { SetColumnValue(Columns.MobileNo, value); }
		}
		  
		[XmlAttribute("PhoneNo")]
		[Bindable(true)]
		public string PhoneNo 
		{
			get { return GetColumnValue<string>(Columns.PhoneNo); }
			set { SetColumnValue(Columns.PhoneNo, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		  
		[XmlAttribute("Nic")]
		[Bindable(true)]
		public string Nic 
		{
			get { return GetColumnValue<string>(Columns.Nic); }
			set { SetColumnValue(Columns.Nic, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		  
		[XmlAttribute("DesisgnationID")]
		[Bindable(true)]
		public int? DesisgnationID 
		{
			get { return GetColumnValue<int?>(Columns.DesisgnationID); }
			set { SetColumnValue(Columns.DesisgnationID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblBillCollection TblBillRecords()
		{
			return new SmartCBSDataAccess.TblBillCollection().Where(TblBill.Columns.BillCreatedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblBillPaymentCollection TblBillPaymentRecords()
		{
			return new SmartCBSDataAccess.TblBillPaymentCollection().Where(TblBillPayment.Columns.UploadedByUser, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblConsumerCollection TblConsumerRecords()
		{
			return new SmartCBSDataAccess.TblConsumerCollection().Where(TblConsumer.Columns.ConsumerCreatedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblDetectionBillPaymentCollection TblDetectionBillPaymentRecords()
		{
			return new SmartCBSDataAccess.TblDetectionBillPaymentCollection().Where(TblDetectionBillPayment.Columns.UploadedByUser, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblDupFeerderReadingCollection TblDupFeerderReadingRecords()
		{
			return new SmartCBSDataAccess.TblDupFeerderReadingCollection().Where(TblDupFeerderReading.Columns.UploadedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblDupMeterReadingCollection TblDupMeterReadingRecords()
		{
			return new SmartCBSDataAccess.TblDupMeterReadingCollection().Where(TblDupMeterReading.Columns.UploadedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblDupPMTReadingCollection TblDupPMTReadingRecords()
		{
			return new SmartCBSDataAccess.TblDupPMTReadingCollection().Where(TblDupPMTReading.Columns.UploadedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblEmployeeCollection ChildTblEmployeeRecords()
		{
			return new SmartCBSDataAccess.TblEmployeeCollection().Where(TblEmployee.Columns.EmployeeID, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblFeederCollection TblFeederRecords()
		{
			return new SmartCBSDataAccess.TblFeederCollection().Where(TblFeeder.Columns.FeederCreatedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblFeederReadingCollection TblFeederReadingRecords()
		{
			return new SmartCBSDataAccess.TblFeederReadingCollection().Where(TblFeederReading.Columns.FeederReadBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblFeederReadingDatumCollection TblFeederReadingData()
		{
			return new SmartCBSDataAccess.TblFeederReadingDatumCollection().Where(TblFeederReadingDatum.Columns.UploadedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterCollection TblMeterRecords()
		{
			return new SmartCBSDataAccess.TblMeterCollection().Where(TblMeter.Columns.MeterCreatedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterDefectedCollection TblMeterDefectedRecords()
		{
			return new SmartCBSDataAccess.TblMeterDefectedCollection().Where(TblMeterDefected.Columns.DefectedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterDefectedCollection TblMeterDefectedRecordsFromTblEmployee()
		{
			return new SmartCBSDataAccess.TblMeterDefectedCollection().Where(TblMeterDefected.Columns.ApprovedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterInventoryMasterCollection TblMeterInventoryMasterRecords()
		{
			return new SmartCBSDataAccess.TblMeterInventoryMasterCollection().Where(TblMeterInventoryMaster.Columns.InvCreatedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterIssueCollection TblMeterIssueRecords()
		{
			return new SmartCBSDataAccess.TblMeterIssueCollection().Where(TblMeterIssue.Columns.IssuedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterIssueRequestCollection TblMeterIssueRequests()
		{
			return new SmartCBSDataAccess.TblMeterIssueRequestCollection().Where(TblMeterIssueRequest.Columns.RequestGeneratedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterIssueRequestCollection TblMeterIssueRequestsFromTblEmployee()
		{
			return new SmartCBSDataAccess.TblMeterIssueRequestCollection().Where(TblMeterIssueRequest.Columns.ApprovedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterReadingCollection TblMeterReadingRecords()
		{
			return new SmartCBSDataAccess.TblMeterReadingCollection().Where(TblMeterReading.Columns.MeterReadBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterReadingCollection TblMeterReadingRecordsFromTblEmployee()
		{
			return new SmartCBSDataAccess.TblMeterReadingCollection().Where(TblMeterReading.Columns.ReadingInsertedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterReadingDatumCollection TblMeterReadingData()
		{
			return new SmartCBSDataAccess.TblMeterReadingDatumCollection().Where(TblMeterReadingDatum.Columns.UploadedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterReplacementCollection TblMeterReplacementRecords()
		{
			return new SmartCBSDataAccess.TblMeterReplacementCollection().Where(TblMeterReplacement.Columns.ReplacedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblMeterReplacementCollection TblMeterReplacementRecordsFromTblEmployee()
		{
			return new SmartCBSDataAccess.TblMeterReplacementCollection().Where(TblMeterReplacement.Columns.ApprovedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblNewConnectionCollection TblNewConnectionRecords()
		{
			return new SmartCBSDataAccess.TblNewConnectionCollection().Where(TblNewConnection.Columns.NCCreatedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblPMTReadingDatumCollection TblPMTReadingData()
		{
			return new SmartCBSDataAccess.TblPMTReadingDatumCollection().Where(TblPMTReadingDatum.Columns.UploadedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblQueueDetailCollection TblQueueDetailRecords()
		{
			return new SmartCBSDataAccess.TblQueueDetailCollection().Where(TblQueueDetail.Columns.DismissedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblSMSLogCollection TblSMSLogRecords()
		{
			return new SmartCBSDataAccess.TblSMSLogCollection().Where(TblSMSLog.Columns.SMSCreatedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblTariffSlabCollection TblTariffSlabs()
		{
			return new SmartCBSDataAccess.TblTariffSlabCollection().Where(TblTariffSlab.Columns.InsertedBy, EmployeeID).Load();
		}
		public SmartCBSDataAccess.UserLoginCollection UserLoginRecords()
		{
			return new SmartCBSDataAccess.UserLoginCollection().Where(UserLogin.Columns.EmployeeId, EmployeeID).Load();
		}
		public SmartCBSDataAccess.TblPMTReadingCollection TblPMTReadingRecords()
		{
			return new SmartCBSDataAccess.TblPMTReadingCollection().Where(TblPMTReading.Columns.PMTReadBy, EmployeeID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblEmployee
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblDesignation ActiveRecord object related to this TblEmployee
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblDesignation TblDesignation
		{
			get { return SmartCBSDataAccess.TblDesignation.FetchByID(this.DesisgnationID); }
			set { SetColumnValue("DesisgnationID", value.DesignationID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblEmployee
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee ParentTblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.EmployeeID); }
			set { SetColumnValue("EmployeeID", value.EmployeeID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varEmployeeCode,string varEmployeeName,string varEmailAddress,string varMobileNo,string varPhoneNo,string varAddress,string varNic,int? varBranchID,bool? varIsActive,int? varDesisgnationID)
		{
			TblEmployee item = new TblEmployee();
			
			item.EmployeeCode = varEmployeeCode;
			
			item.EmployeeName = varEmployeeName;
			
			item.EmailAddress = varEmailAddress;
			
			item.MobileNo = varMobileNo;
			
			item.PhoneNo = varPhoneNo;
			
			item.Address = varAddress;
			
			item.Nic = varNic;
			
			item.BranchID = varBranchID;
			
			item.IsActive = varIsActive;
			
			item.DesisgnationID = varDesisgnationID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varEmployeeID,string varEmployeeCode,string varEmployeeName,string varEmailAddress,string varMobileNo,string varPhoneNo,string varAddress,string varNic,int? varBranchID,bool? varIsActive,int? varDesisgnationID)
		{
			TblEmployee item = new TblEmployee();
			
				item.EmployeeID = varEmployeeID;
			
				item.EmployeeCode = varEmployeeCode;
			
				item.EmployeeName = varEmployeeName;
			
				item.EmailAddress = varEmailAddress;
			
				item.MobileNo = varMobileNo;
			
				item.PhoneNo = varPhoneNo;
			
				item.Address = varAddress;
			
				item.Nic = varNic;
			
				item.BranchID = varBranchID;
			
				item.IsActive = varIsActive;
			
				item.DesisgnationID = varDesisgnationID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn EmployeeIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn EmployeeCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn EmployeeNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailAddressColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MobileNoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PhoneNoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NicColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn DesisgnationIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string EmployeeID = @"EmployeeID";
			 public static string EmployeeCode = @"EmployeeCode";
			 public static string EmployeeName = @"EmployeeName";
			 public static string EmailAddress = @"EmailAddress";
			 public static string MobileNo = @"MobileNo";
			 public static string PhoneNo = @"PhoneNo";
			 public static string Address = @"Address";
			 public static string Nic = @"NIC";
			 public static string BranchID = @"BranchID";
			 public static string IsActive = @"IsActive";
			 public static string DesisgnationID = @"DesisgnationID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
