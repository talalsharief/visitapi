using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwFeederChart class.
    /// </summary>
    [Serializable]
    public partial class VwFeederChartCollection : ReadOnlyList<VwFeederChart, VwFeederChartCollection>
    {        
        public VwFeederChartCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwFeederChart view.
    /// </summary>
    [Serializable]
    public partial class VwFeederChart : ReadOnlyRecord<VwFeederChart>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwFeederChart", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarFeederNo = new TableSchema.TableColumn(schema);
                colvarFeederNo.ColumnName = "FeederNo";
                colvarFeederNo.DataType = DbType.AnsiString;
                colvarFeederNo.MaxLength = -1;
                colvarFeederNo.AutoIncrement = false;
                colvarFeederNo.IsNullable = true;
                colvarFeederNo.IsPrimaryKey = false;
                colvarFeederNo.IsForeignKey = false;
                colvarFeederNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarFeederNo);
                
                TableSchema.TableColumn colvarFeederCode = new TableSchema.TableColumn(schema);
                colvarFeederCode.ColumnName = "FeederCode";
                colvarFeederCode.DataType = DbType.AnsiString;
                colvarFeederCode.MaxLength = 50;
                colvarFeederCode.AutoIncrement = false;
                colvarFeederCode.IsNullable = true;
                colvarFeederCode.IsPrimaryKey = false;
                colvarFeederCode.IsForeignKey = false;
                colvarFeederCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarFeederCode);
                
                TableSchema.TableColumn colvarFeederID = new TableSchema.TableColumn(schema);
                colvarFeederID.ColumnName = "FeederID";
                colvarFeederID.DataType = DbType.Int32;
                colvarFeederID.MaxLength = 0;
                colvarFeederID.AutoIncrement = false;
                colvarFeederID.IsNullable = false;
                colvarFeederID.IsPrimaryKey = false;
                colvarFeederID.IsForeignKey = false;
                colvarFeederID.IsReadOnly = false;
                
                schema.Columns.Add(colvarFeederID);
                
                TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
                colvarMeterID.ColumnName = "MeterID";
                colvarMeterID.DataType = DbType.Int32;
                colvarMeterID.MaxLength = 0;
                colvarMeterID.AutoIncrement = false;
                colvarMeterID.IsNullable = false;
                colvarMeterID.IsPrimaryKey = false;
                colvarMeterID.IsForeignKey = false;
                colvarMeterID.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterID);
                
                TableSchema.TableColumn colvarMeterNo = new TableSchema.TableColumn(schema);
                colvarMeterNo.ColumnName = "MeterNo";
                colvarMeterNo.DataType = DbType.AnsiString;
                colvarMeterNo.MaxLength = -1;
                colvarMeterNo.AutoIncrement = false;
                colvarMeterNo.IsNullable = true;
                colvarMeterNo.IsPrimaryKey = false;
                colvarMeterNo.IsForeignKey = false;
                colvarMeterNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterNo);
                
                TableSchema.TableColumn colvarMeterIssueDate = new TableSchema.TableColumn(schema);
                colvarMeterIssueDate.ColumnName = "MeterIssueDate";
                colvarMeterIssueDate.DataType = DbType.DateTime;
                colvarMeterIssueDate.MaxLength = 0;
                colvarMeterIssueDate.AutoIncrement = false;
                colvarMeterIssueDate.IsNullable = true;
                colvarMeterIssueDate.IsPrimaryKey = false;
                colvarMeterIssueDate.IsForeignKey = false;
                colvarMeterIssueDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterIssueDate);
                
                TableSchema.TableColumn colvarIssueID = new TableSchema.TableColumn(schema);
                colvarIssueID.ColumnName = "IssueID";
                colvarIssueID.DataType = DbType.Int32;
                colvarIssueID.MaxLength = 0;
                colvarIssueID.AutoIncrement = false;
                colvarIssueID.IsNullable = false;
                colvarIssueID.IsPrimaryKey = false;
                colvarIssueID.IsForeignKey = false;
                colvarIssueID.IsReadOnly = false;
                
                schema.Columns.Add(colvarIssueID);
                
                TableSchema.TableColumn colvarIssuedBy = new TableSchema.TableColumn(schema);
                colvarIssuedBy.ColumnName = "IssuedBy";
                colvarIssuedBy.DataType = DbType.Int32;
                colvarIssuedBy.MaxLength = 0;
                colvarIssuedBy.AutoIncrement = false;
                colvarIssuedBy.IsNullable = true;
                colvarIssuedBy.IsPrimaryKey = false;
                colvarIssuedBy.IsForeignKey = false;
                colvarIssuedBy.IsReadOnly = false;
                
                schema.Columns.Add(colvarIssuedBy);
                
                TableSchema.TableColumn colvarIssueDate = new TableSchema.TableColumn(schema);
                colvarIssueDate.ColumnName = "IssueDate";
                colvarIssueDate.DataType = DbType.DateTime;
                colvarIssueDate.MaxLength = 0;
                colvarIssueDate.AutoIncrement = false;
                colvarIssueDate.IsNullable = true;
                colvarIssueDate.IsPrimaryKey = false;
                colvarIssueDate.IsForeignKey = false;
                colvarIssueDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarIssueDate);
                
                TableSchema.TableColumn colvarNewConnectionID = new TableSchema.TableColumn(schema);
                colvarNewConnectionID.ColumnName = "NewConnectionID";
                colvarNewConnectionID.DataType = DbType.Int32;
                colvarNewConnectionID.MaxLength = 0;
                colvarNewConnectionID.AutoIncrement = false;
                colvarNewConnectionID.IsNullable = true;
                colvarNewConnectionID.IsPrimaryKey = false;
                colvarNewConnectionID.IsForeignKey = false;
                colvarNewConnectionID.IsReadOnly = false;
                
                schema.Columns.Add(colvarNewConnectionID);
                
                TableSchema.TableColumn colvarRequestCode = new TableSchema.TableColumn(schema);
                colvarRequestCode.ColumnName = "RequestCode";
                colvarRequestCode.DataType = DbType.AnsiString;
                colvarRequestCode.MaxLength = 100;
                colvarRequestCode.AutoIncrement = false;
                colvarRequestCode.IsNullable = true;
                colvarRequestCode.IsPrimaryKey = false;
                colvarRequestCode.IsForeignKey = false;
                colvarRequestCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarRequestCode);
                
                TableSchema.TableColumn colvarIsApprove = new TableSchema.TableColumn(schema);
                colvarIsApprove.ColumnName = "IsApprove";
                colvarIsApprove.DataType = DbType.Boolean;
                colvarIsApprove.MaxLength = 0;
                colvarIsApprove.AutoIncrement = false;
                colvarIsApprove.IsNullable = true;
                colvarIsApprove.IsPrimaryKey = false;
                colvarIsApprove.IsForeignKey = false;
                colvarIsApprove.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsApprove);
                
                TableSchema.TableColumn colvarPremisesDetailID = new TableSchema.TableColumn(schema);
                colvarPremisesDetailID.ColumnName = "PremisesDetailID";
                colvarPremisesDetailID.DataType = DbType.Int32;
                colvarPremisesDetailID.MaxLength = 0;
                colvarPremisesDetailID.AutoIncrement = false;
                colvarPremisesDetailID.IsNullable = true;
                colvarPremisesDetailID.IsPrimaryKey = false;
                colvarPremisesDetailID.IsForeignKey = false;
                colvarPremisesDetailID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPremisesDetailID);
                
                TableSchema.TableColumn colvarAreaOfThePremises = new TableSchema.TableColumn(schema);
                colvarAreaOfThePremises.ColumnName = "AreaOfThePremises";
                colvarAreaOfThePremises.DataType = DbType.Decimal;
                colvarAreaOfThePremises.MaxLength = 0;
                colvarAreaOfThePremises.AutoIncrement = false;
                colvarAreaOfThePremises.IsNullable = true;
                colvarAreaOfThePremises.IsPrimaryKey = false;
                colvarAreaOfThePremises.IsForeignKey = false;
                colvarAreaOfThePremises.IsReadOnly = false;
                
                schema.Columns.Add(colvarAreaOfThePremises);
                
                TableSchema.TableColumn colvarNoOfConnectionMeter = new TableSchema.TableColumn(schema);
                colvarNoOfConnectionMeter.ColumnName = "NoOfConnection_Meter";
                colvarNoOfConnectionMeter.DataType = DbType.Int32;
                colvarNoOfConnectionMeter.MaxLength = 0;
                colvarNoOfConnectionMeter.AutoIncrement = false;
                colvarNoOfConnectionMeter.IsNullable = true;
                colvarNoOfConnectionMeter.IsPrimaryKey = false;
                colvarNoOfConnectionMeter.IsForeignKey = false;
                colvarNoOfConnectionMeter.IsReadOnly = false;
                
                schema.Columns.Add(colvarNoOfConnectionMeter);
                
                TableSchema.TableColumn colvarLoadRequired = new TableSchema.TableColumn(schema);
                colvarLoadRequired.ColumnName = "LoadRequired";
                colvarLoadRequired.DataType = DbType.Int32;
                colvarLoadRequired.MaxLength = 0;
                colvarLoadRequired.AutoIncrement = false;
                colvarLoadRequired.IsNullable = true;
                colvarLoadRequired.IsPrimaryKey = false;
                colvarLoadRequired.IsForeignKey = false;
                colvarLoadRequired.IsReadOnly = false;
                
                schema.Columns.Add(colvarLoadRequired);
                
                TableSchema.TableColumn colvarTotalLoadrequired = new TableSchema.TableColumn(schema);
                colvarTotalLoadrequired.ColumnName = "TotalLoadrequired";
                colvarTotalLoadrequired.DataType = DbType.Int32;
                colvarTotalLoadrequired.MaxLength = 0;
                colvarTotalLoadrequired.AutoIncrement = false;
                colvarTotalLoadrequired.IsNullable = true;
                colvarTotalLoadrequired.IsPrimaryKey = false;
                colvarTotalLoadrequired.IsForeignKey = false;
                colvarTotalLoadrequired.IsReadOnly = false;
                
                schema.Columns.Add(colvarTotalLoadrequired);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwFeederChart",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwFeederChart()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwFeederChart(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwFeederChart(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwFeederChart(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("FeederNo")]
        [Bindable(true)]
        public string FeederNo 
	    {
		    get
		    {
			    return GetColumnValue<string>("FeederNo");
		    }
            set 
		    {
			    SetColumnValue("FeederNo", value);
            }
        }
	      
        [XmlAttribute("FeederCode")]
        [Bindable(true)]
        public string FeederCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("FeederCode");
		    }
            set 
		    {
			    SetColumnValue("FeederCode", value);
            }
        }
	      
        [XmlAttribute("FeederID")]
        [Bindable(true)]
        public int FeederID 
	    {
		    get
		    {
			    return GetColumnValue<int>("FeederID");
		    }
            set 
		    {
			    SetColumnValue("FeederID", value);
            }
        }
	      
        [XmlAttribute("MeterID")]
        [Bindable(true)]
        public int MeterID 
	    {
		    get
		    {
			    return GetColumnValue<int>("MeterID");
		    }
            set 
		    {
			    SetColumnValue("MeterID", value);
            }
        }
	      
        [XmlAttribute("MeterNo")]
        [Bindable(true)]
        public string MeterNo 
	    {
		    get
		    {
			    return GetColumnValue<string>("MeterNo");
		    }
            set 
		    {
			    SetColumnValue("MeterNo", value);
            }
        }
	      
        [XmlAttribute("MeterIssueDate")]
        [Bindable(true)]
        public DateTime? MeterIssueDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("MeterIssueDate");
		    }
            set 
		    {
			    SetColumnValue("MeterIssueDate", value);
            }
        }
	      
        [XmlAttribute("IssueID")]
        [Bindable(true)]
        public int IssueID 
	    {
		    get
		    {
			    return GetColumnValue<int>("IssueID");
		    }
            set 
		    {
			    SetColumnValue("IssueID", value);
            }
        }
	      
        [XmlAttribute("IssuedBy")]
        [Bindable(true)]
        public int? IssuedBy 
	    {
		    get
		    {
			    return GetColumnValue<int?>("IssuedBy");
		    }
            set 
		    {
			    SetColumnValue("IssuedBy", value);
            }
        }
	      
        [XmlAttribute("IssueDate")]
        [Bindable(true)]
        public DateTime? IssueDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("IssueDate");
		    }
            set 
		    {
			    SetColumnValue("IssueDate", value);
            }
        }
	      
        [XmlAttribute("NewConnectionID")]
        [Bindable(true)]
        public int? NewConnectionID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("NewConnectionID");
		    }
            set 
		    {
			    SetColumnValue("NewConnectionID", value);
            }
        }
	      
        [XmlAttribute("RequestCode")]
        [Bindable(true)]
        public string RequestCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("RequestCode");
		    }
            set 
		    {
			    SetColumnValue("RequestCode", value);
            }
        }
	      
        [XmlAttribute("IsApprove")]
        [Bindable(true)]
        public bool? IsApprove 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("IsApprove");
		    }
            set 
		    {
			    SetColumnValue("IsApprove", value);
            }
        }
	      
        [XmlAttribute("PremisesDetailID")]
        [Bindable(true)]
        public int? PremisesDetailID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("PremisesDetailID");
		    }
            set 
		    {
			    SetColumnValue("PremisesDetailID", value);
            }
        }
	      
        [XmlAttribute("AreaOfThePremises")]
        [Bindable(true)]
        public decimal? AreaOfThePremises 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("AreaOfThePremises");
		    }
            set 
		    {
			    SetColumnValue("AreaOfThePremises", value);
            }
        }
	      
        [XmlAttribute("NoOfConnectionMeter")]
        [Bindable(true)]
        public int? NoOfConnectionMeter 
	    {
		    get
		    {
			    return GetColumnValue<int?>("NoOfConnection_Meter");
		    }
            set 
		    {
			    SetColumnValue("NoOfConnection_Meter", value);
            }
        }
	      
        [XmlAttribute("LoadRequired")]
        [Bindable(true)]
        public int? LoadRequired 
	    {
		    get
		    {
			    return GetColumnValue<int?>("LoadRequired");
		    }
            set 
		    {
			    SetColumnValue("LoadRequired", value);
            }
        }
	      
        [XmlAttribute("TotalLoadrequired")]
        [Bindable(true)]
        public int? TotalLoadrequired 
	    {
		    get
		    {
			    return GetColumnValue<int?>("TotalLoadrequired");
		    }
            set 
		    {
			    SetColumnValue("TotalLoadrequired", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string FeederNo = @"FeederNo";
            
            public static string FeederCode = @"FeederCode";
            
            public static string FeederID = @"FeederID";
            
            public static string MeterID = @"MeterID";
            
            public static string MeterNo = @"MeterNo";
            
            public static string MeterIssueDate = @"MeterIssueDate";
            
            public static string IssueID = @"IssueID";
            
            public static string IssuedBy = @"IssuedBy";
            
            public static string IssueDate = @"IssueDate";
            
            public static string NewConnectionID = @"NewConnectionID";
            
            public static string RequestCode = @"RequestCode";
            
            public static string IsApprove = @"IsApprove";
            
            public static string PremisesDetailID = @"PremisesDetailID";
            
            public static string AreaOfThePremises = @"AreaOfThePremises";
            
            public static string NoOfConnectionMeter = @"NoOfConnection_Meter";
            
            public static string LoadRequired = @"LoadRequired";
            
            public static string TotalLoadrequired = @"TotalLoadrequired";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
