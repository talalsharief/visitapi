using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblExpense class.
	/// </summary>
    [Serializable]
	public partial class TblExpenseCollection : ActiveList<TblExpense, TblExpenseCollection>
	{	   
		public TblExpenseCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblExpenseCollection</returns>
		public TblExpenseCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblExpense o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblExpense table.
	/// </summary>
	[Serializable]
	public partial class TblExpense : ActiveRecord<TblExpense>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblExpense()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblExpense(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblExpense(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblExpense(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblExpense", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarExpenseID = new TableSchema.TableColumn(schema);
				colvarExpenseID.ColumnName = "ExpenseID";
				colvarExpenseID.DataType = DbType.Int32;
				colvarExpenseID.MaxLength = 0;
				colvarExpenseID.AutoIncrement = true;
				colvarExpenseID.IsNullable = false;
				colvarExpenseID.IsPrimaryKey = true;
				colvarExpenseID.IsForeignKey = false;
				colvarExpenseID.IsReadOnly = false;
				colvarExpenseID.DefaultSetting = @"";
				colvarExpenseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpenseID);
				
				TableSchema.TableColumn colvarExpenseTypeID = new TableSchema.TableColumn(schema);
				colvarExpenseTypeID.ColumnName = "ExpenseTypeID";
				colvarExpenseTypeID.DataType = DbType.Int32;
				colvarExpenseTypeID.MaxLength = 0;
				colvarExpenseTypeID.AutoIncrement = false;
				colvarExpenseTypeID.IsNullable = true;
				colvarExpenseTypeID.IsPrimaryKey = false;
				colvarExpenseTypeID.IsForeignKey = true;
				colvarExpenseTypeID.IsReadOnly = false;
				colvarExpenseTypeID.DefaultSetting = @"";
				
					colvarExpenseTypeID.ForeignKeyTableName = "tblExpenseType";
				schema.Columns.Add(colvarExpenseTypeID);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Decimal;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = -1;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarExpenseDate = new TableSchema.TableColumn(schema);
				colvarExpenseDate.ColumnName = "ExpenseDate";
				colvarExpenseDate.DataType = DbType.DateTime;
				colvarExpenseDate.MaxLength = 0;
				colvarExpenseDate.AutoIncrement = false;
				colvarExpenseDate.IsNullable = true;
				colvarExpenseDate.IsPrimaryKey = false;
				colvarExpenseDate.IsForeignKey = false;
				colvarExpenseDate.IsReadOnly = false;
				colvarExpenseDate.DefaultSetting = @"";
				colvarExpenseDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpenseDate);
				
				TableSchema.TableColumn colvarUserLoginID = new TableSchema.TableColumn(schema);
				colvarUserLoginID.ColumnName = "UserLoginID";
				colvarUserLoginID.DataType = DbType.Int32;
				colvarUserLoginID.MaxLength = 0;
				colvarUserLoginID.AutoIncrement = false;
				colvarUserLoginID.IsNullable = true;
				colvarUserLoginID.IsPrimaryKey = false;
				colvarUserLoginID.IsForeignKey = true;
				colvarUserLoginID.IsReadOnly = false;
				colvarUserLoginID.DefaultSetting = @"";
				
					colvarUserLoginID.ForeignKeyTableName = "UserLogin";
				schema.Columns.Add(colvarUserLoginID);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblExpense",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ExpenseID")]
		[Bindable(true)]
		public int ExpenseID 
		{
			get { return GetColumnValue<int>(Columns.ExpenseID); }
			set { SetColumnValue(Columns.ExpenseID, value); }
		}
		  
		[XmlAttribute("ExpenseTypeID")]
		[Bindable(true)]
		public int? ExpenseTypeID 
		{
			get { return GetColumnValue<int?>(Columns.ExpenseTypeID); }
			set { SetColumnValue(Columns.ExpenseTypeID, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal? Amount 
		{
			get { return GetColumnValue<decimal?>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("ExpenseDate")]
		[Bindable(true)]
		public DateTime? ExpenseDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ExpenseDate); }
			set { SetColumnValue(Columns.ExpenseDate, value); }
		}
		  
		[XmlAttribute("UserLoginID")]
		[Bindable(true)]
		public int? UserLoginID 
		{
			get { return GetColumnValue<int?>(Columns.UserLoginID); }
			set { SetColumnValue(Columns.UserLoginID, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblExpenseType ActiveRecord object related to this TblExpense
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblExpenseType TblExpenseType
		{
			get { return SmartCBSDataAccess.TblExpenseType.FetchByID(this.ExpenseTypeID); }
			set { SetColumnValue("ExpenseTypeID", value.ExpenseTypeID); }
		}
		
		
		/// <summary>
		/// Returns a UserLogin ActiveRecord object related to this TblExpense
		/// 
		/// </summary>
		public SmartCBSDataAccess.UserLogin UserLogin
		{
			get { return SmartCBSDataAccess.UserLogin.FetchByID(this.UserLoginID); }
			set { SetColumnValue("UserLoginID", value.UserLoginId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varExpenseTypeID,decimal? varAmount,string varDescription,DateTime? varExpenseDate,int? varUserLoginID,bool? varIsActive,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblExpense item = new TblExpense();
			
			item.ExpenseTypeID = varExpenseTypeID;
			
			item.Amount = varAmount;
			
			item.Description = varDescription;
			
			item.ExpenseDate = varExpenseDate;
			
			item.UserLoginID = varUserLoginID;
			
			item.IsActive = varIsActive;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varExpenseID,int? varExpenseTypeID,decimal? varAmount,string varDescription,DateTime? varExpenseDate,int? varUserLoginID,bool? varIsActive,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblExpense item = new TblExpense();
			
				item.ExpenseID = varExpenseID;
			
				item.ExpenseTypeID = varExpenseTypeID;
			
				item.Amount = varAmount;
			
				item.Description = varDescription;
			
				item.ExpenseDate = varExpenseDate;
			
				item.UserLoginID = varUserLoginID;
			
				item.IsActive = varIsActive;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ExpenseIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ExpenseTypeIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ExpenseDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn UserLoginIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ExpenseID = @"ExpenseID";
			 public static string ExpenseTypeID = @"ExpenseTypeID";
			 public static string Amount = @"Amount";
			 public static string Description = @"Description";
			 public static string ExpenseDate = @"ExpenseDate";
			 public static string UserLoginID = @"UserLoginID";
			 public static string IsActive = @"IsActive";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
