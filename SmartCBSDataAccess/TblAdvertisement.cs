using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblAdvertisement class.
	/// </summary>
    [Serializable]
	public partial class TblAdvertisementCollection : ActiveList<TblAdvertisement, TblAdvertisementCollection>
	{	   
		public TblAdvertisementCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblAdvertisementCollection</returns>
		public TblAdvertisementCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblAdvertisement o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblAdvertisement table.
	/// </summary>
	[Serializable]
	public partial class TblAdvertisement : ActiveRecord<TblAdvertisement>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblAdvertisement()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblAdvertisement(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblAdvertisement(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblAdvertisement(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblAdvertisement", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarAdvertiseID = new TableSchema.TableColumn(schema);
				colvarAdvertiseID.ColumnName = "AdvertiseID";
				colvarAdvertiseID.DataType = DbType.Int32;
				colvarAdvertiseID.MaxLength = 0;
				colvarAdvertiseID.AutoIncrement = true;
				colvarAdvertiseID.IsNullable = false;
				colvarAdvertiseID.IsPrimaryKey = true;
				colvarAdvertiseID.IsForeignKey = false;
				colvarAdvertiseID.IsReadOnly = false;
				colvarAdvertiseID.DefaultSetting = @"";
				colvarAdvertiseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdvertiseID);
				
				TableSchema.TableColumn colvarAdsLocationID = new TableSchema.TableColumn(schema);
				colvarAdsLocationID.ColumnName = "AdsLocationID";
				colvarAdsLocationID.DataType = DbType.Int32;
				colvarAdsLocationID.MaxLength = 0;
				colvarAdsLocationID.AutoIncrement = false;
				colvarAdsLocationID.IsNullable = true;
				colvarAdsLocationID.IsPrimaryKey = false;
				colvarAdsLocationID.IsForeignKey = true;
				colvarAdsLocationID.IsReadOnly = false;
				colvarAdsLocationID.DefaultSetting = @"";
				
					colvarAdsLocationID.ForeignKeyTableName = "TblAdvertiseLocation";
				schema.Columns.Add(colvarAdsLocationID);
				
				TableSchema.TableColumn colvarImageURL = new TableSchema.TableColumn(schema);
				colvarImageURL.ColumnName = "ImageURL";
				colvarImageURL.DataType = DbType.AnsiString;
				colvarImageURL.MaxLength = -1;
				colvarImageURL.AutoIncrement = false;
				colvarImageURL.IsNullable = true;
				colvarImageURL.IsPrimaryKey = false;
				colvarImageURL.IsForeignKey = false;
				colvarImageURL.IsReadOnly = false;
				colvarImageURL.DefaultSetting = @"";
				colvarImageURL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImageURL);
				
				TableSchema.TableColumn colvarStartingBillingMonth = new TableSchema.TableColumn(schema);
				colvarStartingBillingMonth.ColumnName = "StartingBillingMonth";
				colvarStartingBillingMonth.DataType = DbType.DateTime;
				colvarStartingBillingMonth.MaxLength = 0;
				colvarStartingBillingMonth.AutoIncrement = false;
				colvarStartingBillingMonth.IsNullable = true;
				colvarStartingBillingMonth.IsPrimaryKey = false;
				colvarStartingBillingMonth.IsForeignKey = false;
				colvarStartingBillingMonth.IsReadOnly = false;
				colvarStartingBillingMonth.DefaultSetting = @"";
				colvarStartingBillingMonth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartingBillingMonth);
				
				TableSchema.TableColumn colvarEndingBillingMonth = new TableSchema.TableColumn(schema);
				colvarEndingBillingMonth.ColumnName = "EndingBillingMonth";
				colvarEndingBillingMonth.DataType = DbType.DateTime;
				colvarEndingBillingMonth.MaxLength = 0;
				colvarEndingBillingMonth.AutoIncrement = false;
				colvarEndingBillingMonth.IsNullable = true;
				colvarEndingBillingMonth.IsPrimaryKey = false;
				colvarEndingBillingMonth.IsForeignKey = false;
				colvarEndingBillingMonth.IsReadOnly = false;
				colvarEndingBillingMonth.DefaultSetting = @"";
				colvarEndingBillingMonth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndingBillingMonth);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				TableSchema.TableColumn colvarAdvertiseName = new TableSchema.TableColumn(schema);
				colvarAdvertiseName.ColumnName = "AdvertiseName";
				colvarAdvertiseName.DataType = DbType.AnsiString;
				colvarAdvertiseName.MaxLength = -1;
				colvarAdvertiseName.AutoIncrement = false;
				colvarAdvertiseName.IsNullable = true;
				colvarAdvertiseName.IsPrimaryKey = false;
				colvarAdvertiseName.IsForeignKey = false;
				colvarAdvertiseName.IsReadOnly = false;
				colvarAdvertiseName.DefaultSetting = @"";
				colvarAdvertiseName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdvertiseName);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblAdvertisement",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("AdvertiseID")]
		[Bindable(true)]
		public int AdvertiseID 
		{
			get { return GetColumnValue<int>(Columns.AdvertiseID); }
			set { SetColumnValue(Columns.AdvertiseID, value); }
		}
		  
		[XmlAttribute("AdsLocationID")]
		[Bindable(true)]
		public int? AdsLocationID 
		{
			get { return GetColumnValue<int?>(Columns.AdsLocationID); }
			set { SetColumnValue(Columns.AdsLocationID, value); }
		}
		  
		[XmlAttribute("ImageURL")]
		[Bindable(true)]
		public string ImageURL 
		{
			get { return GetColumnValue<string>(Columns.ImageURL); }
			set { SetColumnValue(Columns.ImageURL, value); }
		}
		  
		[XmlAttribute("StartingBillingMonth")]
		[Bindable(true)]
		public DateTime? StartingBillingMonth 
		{
			get { return GetColumnValue<DateTime?>(Columns.StartingBillingMonth); }
			set { SetColumnValue(Columns.StartingBillingMonth, value); }
		}
		  
		[XmlAttribute("EndingBillingMonth")]
		[Bindable(true)]
		public DateTime? EndingBillingMonth 
		{
			get { return GetColumnValue<DateTime?>(Columns.EndingBillingMonth); }
			set { SetColumnValue(Columns.EndingBillingMonth, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		  
		[XmlAttribute("AdvertiseName")]
		[Bindable(true)]
		public string AdvertiseName 
		{
			get { return GetColumnValue<string>(Columns.AdvertiseName); }
			set { SetColumnValue(Columns.AdvertiseName, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblAdvertiseLocation ActiveRecord object related to this TblAdvertisement
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblAdvertiseLocation TblAdvertiseLocation
		{
			get { return SmartCBSDataAccess.TblAdvertiseLocation.FetchByID(this.AdsLocationID); }
			set { SetColumnValue("AdsLocationID", value.AdsLocationID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varAdsLocationID,string varImageURL,DateTime? varStartingBillingMonth,DateTime? varEndingBillingMonth,DateTime? varCreatedOn,DateTime? varModifiedOn,bool? varIsActive,string varAdvertiseName)
		{
			TblAdvertisement item = new TblAdvertisement();
			
			item.AdsLocationID = varAdsLocationID;
			
			item.ImageURL = varImageURL;
			
			item.StartingBillingMonth = varStartingBillingMonth;
			
			item.EndingBillingMonth = varEndingBillingMonth;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.IsActive = varIsActive;
			
			item.AdvertiseName = varAdvertiseName;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varAdvertiseID,int? varAdsLocationID,string varImageURL,DateTime? varStartingBillingMonth,DateTime? varEndingBillingMonth,DateTime? varCreatedOn,DateTime? varModifiedOn,bool? varIsActive,string varAdvertiseName)
		{
			TblAdvertisement item = new TblAdvertisement();
			
				item.AdvertiseID = varAdvertiseID;
			
				item.AdsLocationID = varAdsLocationID;
			
				item.ImageURL = varImageURL;
			
				item.StartingBillingMonth = varStartingBillingMonth;
			
				item.EndingBillingMonth = varEndingBillingMonth;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.IsActive = varIsActive;
			
				item.AdvertiseName = varAdvertiseName;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn AdvertiseIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AdsLocationIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ImageURLColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn StartingBillingMonthColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn EndingBillingMonthColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn AdvertiseNameColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string AdvertiseID = @"AdvertiseID";
			 public static string AdsLocationID = @"AdsLocationID";
			 public static string ImageURL = @"ImageURL";
			 public static string StartingBillingMonth = @"StartingBillingMonth";
			 public static string EndingBillingMonth = @"EndingBillingMonth";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string IsActive = @"IsActive";
			 public static string AdvertiseName = @"AdvertiseName";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
