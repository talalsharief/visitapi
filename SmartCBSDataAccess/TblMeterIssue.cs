using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeterIssue class.
	/// </summary>
    [Serializable]
	public partial class TblMeterIssueCollection : ActiveList<TblMeterIssue, TblMeterIssueCollection>
	{	   
		public TblMeterIssueCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterIssueCollection</returns>
		public TblMeterIssueCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeterIssue o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeterIssue table.
	/// </summary>
	[Serializable]
	public partial class TblMeterIssue : ActiveRecord<TblMeterIssue>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeterIssue()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeterIssue(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeterIssue(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeterIssue(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeterIssue", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIssueID = new TableSchema.TableColumn(schema);
				colvarIssueID.ColumnName = "IssueID";
				colvarIssueID.DataType = DbType.Int32;
				colvarIssueID.MaxLength = 0;
				colvarIssueID.AutoIncrement = true;
				colvarIssueID.IsNullable = false;
				colvarIssueID.IsPrimaryKey = true;
				colvarIssueID.IsForeignKey = false;
				colvarIssueID.IsReadOnly = false;
				colvarIssueID.DefaultSetting = @"";
				colvarIssueID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIssueID);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = true;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarIssueDate = new TableSchema.TableColumn(schema);
				colvarIssueDate.ColumnName = "IssueDate";
				colvarIssueDate.DataType = DbType.DateTime;
				colvarIssueDate.MaxLength = 0;
				colvarIssueDate.AutoIncrement = false;
				colvarIssueDate.IsNullable = true;
				colvarIssueDate.IsPrimaryKey = false;
				colvarIssueDate.IsForeignKey = false;
				colvarIssueDate.IsReadOnly = false;
				colvarIssueDate.DefaultSetting = @"";
				colvarIssueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIssueDate);
				
				TableSchema.TableColumn colvarIssuedBy = new TableSchema.TableColumn(schema);
				colvarIssuedBy.ColumnName = "IssuedBy";
				colvarIssuedBy.DataType = DbType.Int32;
				colvarIssuedBy.MaxLength = 0;
				colvarIssuedBy.AutoIncrement = false;
				colvarIssuedBy.IsNullable = true;
				colvarIssuedBy.IsPrimaryKey = false;
				colvarIssuedBy.IsForeignKey = true;
				colvarIssuedBy.IsReadOnly = false;
				colvarIssuedBy.DefaultSetting = @"";
				
					colvarIssuedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarIssuedBy);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarIsApprove = new TableSchema.TableColumn(schema);
				colvarIsApprove.ColumnName = "IsApprove";
				colvarIsApprove.DataType = DbType.Boolean;
				colvarIsApprove.MaxLength = 0;
				colvarIsApprove.AutoIncrement = false;
				colvarIsApprove.IsNullable = true;
				colvarIsApprove.IsPrimaryKey = false;
				colvarIsApprove.IsForeignKey = false;
				colvarIsApprove.IsReadOnly = false;
				colvarIsApprove.DefaultSetting = @"";
				colvarIsApprove.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsApprove);
				
				TableSchema.TableColumn colvarNewConnectionID = new TableSchema.TableColumn(schema);
				colvarNewConnectionID.ColumnName = "NewConnectionID";
				colvarNewConnectionID.DataType = DbType.Int32;
				colvarNewConnectionID.MaxLength = 0;
				colvarNewConnectionID.AutoIncrement = false;
				colvarNewConnectionID.IsNullable = true;
				colvarNewConnectionID.IsPrimaryKey = false;
				colvarNewConnectionID.IsForeignKey = true;
				colvarNewConnectionID.IsReadOnly = false;
				colvarNewConnectionID.DefaultSetting = @"";
				
					colvarNewConnectionID.ForeignKeyTableName = "TblNewConnection";
				schema.Columns.Add(colvarNewConnectionID);
				
				TableSchema.TableColumn colvarMeterDefectedID = new TableSchema.TableColumn(schema);
				colvarMeterDefectedID.ColumnName = "MeterDefectedID";
				colvarMeterDefectedID.DataType = DbType.Int32;
				colvarMeterDefectedID.MaxLength = 0;
				colvarMeterDefectedID.AutoIncrement = false;
				colvarMeterDefectedID.IsNullable = true;
				colvarMeterDefectedID.IsPrimaryKey = false;
				colvarMeterDefectedID.IsForeignKey = true;
				colvarMeterDefectedID.IsReadOnly = false;
				colvarMeterDefectedID.DefaultSetting = @"";
				
					colvarMeterDefectedID.ForeignKeyTableName = "TblMeterDefected";
				schema.Columns.Add(colvarMeterDefectedID);
				
				TableSchema.TableColumn colvarReplacementID = new TableSchema.TableColumn(schema);
				colvarReplacementID.ColumnName = "ReplacementID";
				colvarReplacementID.DataType = DbType.Int32;
				colvarReplacementID.MaxLength = 0;
				colvarReplacementID.AutoIncrement = false;
				colvarReplacementID.IsNullable = true;
				colvarReplacementID.IsPrimaryKey = false;
				colvarReplacementID.IsForeignKey = true;
				colvarReplacementID.IsReadOnly = false;
				colvarReplacementID.DefaultSetting = @"";
				
					colvarReplacementID.ForeignKeyTableName = "TblMeterReplacement";
				schema.Columns.Add(colvarReplacementID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeterIssue",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IssueID")]
		[Bindable(true)]
		public int IssueID 
		{
			get { return GetColumnValue<int>(Columns.IssueID); }
			set { SetColumnValue(Columns.IssueID, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int? MeterID 
		{
			get { return GetColumnValue<int?>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("IssueDate")]
		[Bindable(true)]
		public DateTime? IssueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.IssueDate); }
			set { SetColumnValue(Columns.IssueDate, value); }
		}
		  
		[XmlAttribute("IssuedBy")]
		[Bindable(true)]
		public int? IssuedBy 
		{
			get { return GetColumnValue<int?>(Columns.IssuedBy); }
			set { SetColumnValue(Columns.IssuedBy, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("IsApprove")]
		[Bindable(true)]
		public bool? IsApprove 
		{
			get { return GetColumnValue<bool?>(Columns.IsApprove); }
			set { SetColumnValue(Columns.IsApprove, value); }
		}
		  
		[XmlAttribute("NewConnectionID")]
		[Bindable(true)]
		public int? NewConnectionID 
		{
			get { return GetColumnValue<int?>(Columns.NewConnectionID); }
			set { SetColumnValue(Columns.NewConnectionID, value); }
		}
		  
		[XmlAttribute("MeterDefectedID")]
		[Bindable(true)]
		public int? MeterDefectedID 
		{
			get { return GetColumnValue<int?>(Columns.MeterDefectedID); }
			set { SetColumnValue(Columns.MeterDefectedID, value); }
		}
		  
		[XmlAttribute("ReplacementID")]
		[Bindable(true)]
		public int? ReplacementID 
		{
			get { return GetColumnValue<int?>(Columns.ReplacementID); }
			set { SetColumnValue(Columns.ReplacementID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblInventoryLogCollection TblInventoryLogRecords()
		{
			return new SmartCBSDataAccess.TblInventoryLogCollection().Where(TblInventoryLog.Columns.IssueID, IssueID).Load();
		}
		public SmartCBSDataAccess.TblMeterReplacementCollection TblMeterReplacementRecords()
		{
			return new SmartCBSDataAccess.TblMeterReplacementCollection().Where(TblMeterReplacement.Columns.IssueID, IssueID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblMeterIssue
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterIssue
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.IssuedBy); }
			set { SetColumnValue("IssuedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblMeterIssue
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterDefected ActiveRecord object related to this TblMeterIssue
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterDefected TblMeterDefected
		{
			get { return SmartCBSDataAccess.TblMeterDefected.FetchByID(this.MeterDefectedID); }
			set { SetColumnValue("MeterDefectedID", value.MeterDefectedID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterReplacement ActiveRecord object related to this TblMeterIssue
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterReplacement TblMeterReplacement
		{
			get { return SmartCBSDataAccess.TblMeterReplacement.FetchByID(this.ReplacementID); }
			set { SetColumnValue("ReplacementID", value.ReplaceID); }
		}
		
		
		/// <summary>
		/// Returns a TblNewConnection ActiveRecord object related to this TblMeterIssue
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblNewConnection TblNewConnection
		{
			get { return SmartCBSDataAccess.TblNewConnection.FetchByID(this.NewConnectionID); }
			set { SetColumnValue("NewConnectionID", value.NewConnectionID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varMeterID,DateTime? varModifiedOn,DateTime? varCreatedOn,DateTime? varIssueDate,int? varIssuedBy,int? varBranchID,bool? varIsApprove,int? varNewConnectionID,int? varMeterDefectedID,int? varReplacementID)
		{
			TblMeterIssue item = new TblMeterIssue();
			
			item.MeterID = varMeterID;
			
			item.ModifiedOn = varModifiedOn;
			
			item.CreatedOn = varCreatedOn;
			
			item.IssueDate = varIssueDate;
			
			item.IssuedBy = varIssuedBy;
			
			item.BranchID = varBranchID;
			
			item.IsApprove = varIsApprove;
			
			item.NewConnectionID = varNewConnectionID;
			
			item.MeterDefectedID = varMeterDefectedID;
			
			item.ReplacementID = varReplacementID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIssueID,int? varMeterID,DateTime? varModifiedOn,DateTime? varCreatedOn,DateTime? varIssueDate,int? varIssuedBy,int? varBranchID,bool? varIsApprove,int? varNewConnectionID,int? varMeterDefectedID,int? varReplacementID)
		{
			TblMeterIssue item = new TblMeterIssue();
			
				item.IssueID = varIssueID;
			
				item.MeterID = varMeterID;
			
				item.ModifiedOn = varModifiedOn;
			
				item.CreatedOn = varCreatedOn;
			
				item.IssueDate = varIssueDate;
			
				item.IssuedBy = varIssuedBy;
			
				item.BranchID = varBranchID;
			
				item.IsApprove = varIsApprove;
			
				item.NewConnectionID = varNewConnectionID;
			
				item.MeterDefectedID = varMeterDefectedID;
			
				item.ReplacementID = varReplacementID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IssueIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IssueDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IssuedByColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IsApproveColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NewConnectionIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterDefectedIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ReplacementIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IssueID = @"IssueID";
			 public static string MeterID = @"MeterID";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string CreatedOn = @"CreatedOn";
			 public static string IssueDate = @"IssueDate";
			 public static string IssuedBy = @"IssuedBy";
			 public static string BranchID = @"BranchID";
			 public static string IsApprove = @"IsApprove";
			 public static string NewConnectionID = @"NewConnectionID";
			 public static string MeterDefectedID = @"MeterDefectedID";
			 public static string ReplacementID = @"ReplacementID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
