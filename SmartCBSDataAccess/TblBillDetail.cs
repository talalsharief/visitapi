using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblBillDetail class.
	/// </summary>
    [Serializable]
	public partial class TblBillDetailCollection : ActiveList<TblBillDetail, TblBillDetailCollection>
	{	   
		public TblBillDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblBillDetailCollection</returns>
		public TblBillDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblBillDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblBillDetail table.
	/// </summary>
	[Serializable]
	public partial class TblBillDetail : ActiveRecord<TblBillDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblBillDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblBillDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblBillDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblBillDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblBillDetail", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarBillDetailID = new TableSchema.TableColumn(schema);
				colvarBillDetailID.ColumnName = "BillDetailID";
				colvarBillDetailID.DataType = DbType.Int32;
				colvarBillDetailID.MaxLength = 0;
				colvarBillDetailID.AutoIncrement = true;
				colvarBillDetailID.IsNullable = false;
				colvarBillDetailID.IsPrimaryKey = true;
				colvarBillDetailID.IsForeignKey = false;
				colvarBillDetailID.IsReadOnly = false;
				colvarBillDetailID.DefaultSetting = @"";
				colvarBillDetailID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillDetailID);
				
				TableSchema.TableColumn colvarBillID = new TableSchema.TableColumn(schema);
				colvarBillID.ColumnName = "BillID";
				colvarBillID.DataType = DbType.Int32;
				colvarBillID.MaxLength = 0;
				colvarBillID.AutoIncrement = false;
				colvarBillID.IsNullable = true;
				colvarBillID.IsPrimaryKey = false;
				colvarBillID.IsForeignKey = true;
				colvarBillID.IsReadOnly = false;
				colvarBillID.DefaultSetting = @"";
				
					colvarBillID.ForeignKeyTableName = "TblBill";
				schema.Columns.Add(colvarBillID);
				
				TableSchema.TableColumn colvarChargeID = new TableSchema.TableColumn(schema);
				colvarChargeID.ColumnName = "ChargeID";
				colvarChargeID.DataType = DbType.Int32;
				colvarChargeID.MaxLength = 0;
				colvarChargeID.AutoIncrement = false;
				colvarChargeID.IsNullable = true;
				colvarChargeID.IsPrimaryKey = false;
				colvarChargeID.IsForeignKey = true;
				colvarChargeID.IsReadOnly = false;
				colvarChargeID.DefaultSetting = @"";
				
					colvarChargeID.ForeignKeyTableName = "TblCharges";
				schema.Columns.Add(colvarChargeID);
				
				TableSchema.TableColumn colvarRateApplicableReff = new TableSchema.TableColumn(schema);
				colvarRateApplicableReff.ColumnName = "RateApplicableReff";
				colvarRateApplicableReff.DataType = DbType.AnsiString;
				colvarRateApplicableReff.MaxLength = 100;
				colvarRateApplicableReff.AutoIncrement = false;
				colvarRateApplicableReff.IsNullable = true;
				colvarRateApplicableReff.IsPrimaryKey = false;
				colvarRateApplicableReff.IsForeignKey = false;
				colvarRateApplicableReff.IsReadOnly = false;
				colvarRateApplicableReff.DefaultSetting = @"";
				colvarRateApplicableReff.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRateApplicableReff);
				
				TableSchema.TableColumn colvarRateApplicableValue = new TableSchema.TableColumn(schema);
				colvarRateApplicableValue.ColumnName = "RateApplicableValue";
				colvarRateApplicableValue.DataType = DbType.Int32;
				colvarRateApplicableValue.MaxLength = 0;
				colvarRateApplicableValue.AutoIncrement = false;
				colvarRateApplicableValue.IsNullable = true;
				colvarRateApplicableValue.IsPrimaryKey = false;
				colvarRateApplicableValue.IsForeignKey = false;
				colvarRateApplicableValue.IsReadOnly = false;
				colvarRateApplicableValue.DefaultSetting = @"";
				colvarRateApplicableValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRateApplicableValue);
				
				TableSchema.TableColumn colvarChargeAmount = new TableSchema.TableColumn(schema);
				colvarChargeAmount.ColumnName = "ChargeAmount";
				colvarChargeAmount.DataType = DbType.Decimal;
				colvarChargeAmount.MaxLength = 0;
				colvarChargeAmount.AutoIncrement = false;
				colvarChargeAmount.IsNullable = true;
				colvarChargeAmount.IsPrimaryKey = false;
				colvarChargeAmount.IsForeignKey = false;
				colvarChargeAmount.IsReadOnly = false;
				colvarChargeAmount.DefaultSetting = @"";
				colvarChargeAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChargeAmount);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = -1;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblBillDetail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("BillDetailID")]
		[Bindable(true)]
		public int BillDetailID 
		{
			get { return GetColumnValue<int>(Columns.BillDetailID); }
			set { SetColumnValue(Columns.BillDetailID, value); }
		}
		  
		[XmlAttribute("BillID")]
		[Bindable(true)]
		public int? BillID 
		{
			get { return GetColumnValue<int?>(Columns.BillID); }
			set { SetColumnValue(Columns.BillID, value); }
		}
		  
		[XmlAttribute("ChargeID")]
		[Bindable(true)]
		public int? ChargeID 
		{
			get { return GetColumnValue<int?>(Columns.ChargeID); }
			set { SetColumnValue(Columns.ChargeID, value); }
		}
		  
		[XmlAttribute("RateApplicableReff")]
		[Bindable(true)]
		public string RateApplicableReff 
		{
			get { return GetColumnValue<string>(Columns.RateApplicableReff); }
			set { SetColumnValue(Columns.RateApplicableReff, value); }
		}
		  
		[XmlAttribute("RateApplicableValue")]
		[Bindable(true)]
		public int? RateApplicableValue 
		{
			get { return GetColumnValue<int?>(Columns.RateApplicableValue); }
			set { SetColumnValue(Columns.RateApplicableValue, value); }
		}
		  
		[XmlAttribute("ChargeAmount")]
		[Bindable(true)]
		public decimal? ChargeAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.ChargeAmount); }
			set { SetColumnValue(Columns.ChargeAmount, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBill ActiveRecord object related to this TblBillDetail
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBill TblBill
		{
			get { return SmartCBSDataAccess.TblBill.FetchByID(this.BillID); }
			set { SetColumnValue("BillID", value.BillID); }
		}
		
		
		/// <summary>
		/// Returns a TblCharge ActiveRecord object related to this TblBillDetail
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblCharge TblCharge
		{
			get { return SmartCBSDataAccess.TblCharge.FetchByID(this.ChargeID); }
			set { SetColumnValue("ChargeID", value.ChargesID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varBillID,int? varChargeID,string varRateApplicableReff,int? varRateApplicableValue,decimal? varChargeAmount,DateTime? varCreatedOn,DateTime? varModifiedOn,string varRemarks)
		{
			TblBillDetail item = new TblBillDetail();
			
			item.BillID = varBillID;
			
			item.ChargeID = varChargeID;
			
			item.RateApplicableReff = varRateApplicableReff;
			
			item.RateApplicableValue = varRateApplicableValue;
			
			item.ChargeAmount = varChargeAmount;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.Remarks = varRemarks;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varBillDetailID,int? varBillID,int? varChargeID,string varRateApplicableReff,int? varRateApplicableValue,decimal? varChargeAmount,DateTime? varCreatedOn,DateTime? varModifiedOn,string varRemarks)
		{
			TblBillDetail item = new TblBillDetail();
			
				item.BillDetailID = varBillDetailID;
			
				item.BillID = varBillID;
			
				item.ChargeID = varChargeID;
			
				item.RateApplicableReff = varRateApplicableReff;
			
				item.RateApplicableValue = varRateApplicableValue;
			
				item.ChargeAmount = varChargeAmount;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.Remarks = varRemarks;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn BillDetailIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BillIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ChargeIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RateApplicableReffColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RateApplicableValueColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ChargeAmountColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string BillDetailID = @"BillDetailID";
			 public static string BillID = @"BillID";
			 public static string ChargeID = @"ChargeID";
			 public static string RateApplicableReff = @"RateApplicableReff";
			 public static string RateApplicableValue = @"RateApplicableValue";
			 public static string ChargeAmount = @"ChargeAmount";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string Remarks = @"Remarks";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
