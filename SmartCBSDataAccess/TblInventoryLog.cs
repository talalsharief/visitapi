using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblInventoryLog class.
	/// </summary>
    [Serializable]
	public partial class TblInventoryLogCollection : ActiveList<TblInventoryLog, TblInventoryLogCollection>
	{	   
		public TblInventoryLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblInventoryLogCollection</returns>
		public TblInventoryLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblInventoryLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblInventoryLog table.
	/// </summary>
	[Serializable]
	public partial class TblInventoryLog : ActiveRecord<TblInventoryLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblInventoryLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblInventoryLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblInventoryLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblInventoryLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblInventoryLog", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarInventoryLogID = new TableSchema.TableColumn(schema);
				colvarInventoryLogID.ColumnName = "InventoryLogID";
				colvarInventoryLogID.DataType = DbType.Int32;
				colvarInventoryLogID.MaxLength = 0;
				colvarInventoryLogID.AutoIncrement = true;
				colvarInventoryLogID.IsNullable = false;
				colvarInventoryLogID.IsPrimaryKey = true;
				colvarInventoryLogID.IsForeignKey = false;
				colvarInventoryLogID.IsReadOnly = false;
				colvarInventoryLogID.DefaultSetting = @"";
				colvarInventoryLogID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInventoryLogID);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = false;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarInventoryInID = new TableSchema.TableColumn(schema);
				colvarInventoryInID.ColumnName = "InventoryInID";
				colvarInventoryInID.DataType = DbType.Int32;
				colvarInventoryInID.MaxLength = 0;
				colvarInventoryInID.AutoIncrement = false;
				colvarInventoryInID.IsNullable = true;
				colvarInventoryInID.IsPrimaryKey = false;
				colvarInventoryInID.IsForeignKey = true;
				colvarInventoryInID.IsReadOnly = false;
				colvarInventoryInID.DefaultSetting = @"";
				
					colvarInventoryInID.ForeignKeyTableName = "TblMeterInventoryDetail";
				schema.Columns.Add(colvarInventoryInID);
				
				TableSchema.TableColumn colvarDefectedID = new TableSchema.TableColumn(schema);
				colvarDefectedID.ColumnName = "DefectedID";
				colvarDefectedID.DataType = DbType.Int32;
				colvarDefectedID.MaxLength = 0;
				colvarDefectedID.AutoIncrement = false;
				colvarDefectedID.IsNullable = true;
				colvarDefectedID.IsPrimaryKey = false;
				colvarDefectedID.IsForeignKey = true;
				colvarDefectedID.IsReadOnly = false;
				colvarDefectedID.DefaultSetting = @"";
				
					colvarDefectedID.ForeignKeyTableName = "TblMeterDefectedDetail";
				schema.Columns.Add(colvarDefectedID);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarIssueID = new TableSchema.TableColumn(schema);
				colvarIssueID.ColumnName = "IssueID";
				colvarIssueID.DataType = DbType.Int32;
				colvarIssueID.MaxLength = 0;
				colvarIssueID.AutoIncrement = false;
				colvarIssueID.IsNullable = true;
				colvarIssueID.IsPrimaryKey = false;
				colvarIssueID.IsForeignKey = true;
				colvarIssueID.IsReadOnly = false;
				colvarIssueID.DefaultSetting = @"";
				
					colvarIssueID.ForeignKeyTableName = "TblMeterIssue";
				schema.Columns.Add(colvarIssueID);
				
				TableSchema.TableColumn colvarReplaceID = new TableSchema.TableColumn(schema);
				colvarReplaceID.ColumnName = "ReplaceID";
				colvarReplaceID.DataType = DbType.Int32;
				colvarReplaceID.MaxLength = 0;
				colvarReplaceID.AutoIncrement = false;
				colvarReplaceID.IsNullable = true;
				colvarReplaceID.IsPrimaryKey = false;
				colvarReplaceID.IsForeignKey = true;
				colvarReplaceID.IsReadOnly = false;
				colvarReplaceID.DefaultSetting = @"";
				
					colvarReplaceID.ForeignKeyTableName = "TblMeterReplacement";
				schema.Columns.Add(colvarReplaceID);
				
				TableSchema.TableColumn colvarInventoryLogDate = new TableSchema.TableColumn(schema);
				colvarInventoryLogDate.ColumnName = "InventoryLogDate";
				colvarInventoryLogDate.DataType = DbType.DateTime;
				colvarInventoryLogDate.MaxLength = 0;
				colvarInventoryLogDate.AutoIncrement = false;
				colvarInventoryLogDate.IsNullable = true;
				colvarInventoryLogDate.IsPrimaryKey = false;
				colvarInventoryLogDate.IsForeignKey = false;
				colvarInventoryLogDate.IsReadOnly = false;
				colvarInventoryLogDate.DefaultSetting = @"";
				colvarInventoryLogDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInventoryLogDate);
				
				TableSchema.TableColumn colvarMeterIssueRequestID = new TableSchema.TableColumn(schema);
				colvarMeterIssueRequestID.ColumnName = "MeterIssueRequestID";
				colvarMeterIssueRequestID.DataType = DbType.Int32;
				colvarMeterIssueRequestID.MaxLength = 0;
				colvarMeterIssueRequestID.AutoIncrement = false;
				colvarMeterIssueRequestID.IsNullable = true;
				colvarMeterIssueRequestID.IsPrimaryKey = false;
				colvarMeterIssueRequestID.IsForeignKey = true;
				colvarMeterIssueRequestID.IsReadOnly = false;
				colvarMeterIssueRequestID.DefaultSetting = @"";
				
					colvarMeterIssueRequestID.ForeignKeyTableName = "TblMeterIssueRequests";
				schema.Columns.Add(colvarMeterIssueRequestID);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarMeterDisConnectionID = new TableSchema.TableColumn(schema);
				colvarMeterDisConnectionID.ColumnName = "MeterDisConnectionID";
				colvarMeterDisConnectionID.DataType = DbType.Int32;
				colvarMeterDisConnectionID.MaxLength = 0;
				colvarMeterDisConnectionID.AutoIncrement = false;
				colvarMeterDisConnectionID.IsNullable = true;
				colvarMeterDisConnectionID.IsPrimaryKey = false;
				colvarMeterDisConnectionID.IsForeignKey = true;
				colvarMeterDisConnectionID.IsReadOnly = false;
				colvarMeterDisConnectionID.DefaultSetting = @"";
				
					colvarMeterDisConnectionID.ForeignKeyTableName = "TblMeterDisConnection";
				schema.Columns.Add(colvarMeterDisConnectionID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblInventoryLog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("InventoryLogID")]
		[Bindable(true)]
		public int InventoryLogID 
		{
			get { return GetColumnValue<int>(Columns.InventoryLogID); }
			set { SetColumnValue(Columns.InventoryLogID, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int MeterID 
		{
			get { return GetColumnValue<int>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("InventoryInID")]
		[Bindable(true)]
		public int? InventoryInID 
		{
			get { return GetColumnValue<int?>(Columns.InventoryInID); }
			set { SetColumnValue(Columns.InventoryInID, value); }
		}
		  
		[XmlAttribute("DefectedID")]
		[Bindable(true)]
		public int? DefectedID 
		{
			get { return GetColumnValue<int?>(Columns.DefectedID); }
			set { SetColumnValue(Columns.DefectedID, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("IssueID")]
		[Bindable(true)]
		public int? IssueID 
		{
			get { return GetColumnValue<int?>(Columns.IssueID); }
			set { SetColumnValue(Columns.IssueID, value); }
		}
		  
		[XmlAttribute("ReplaceID")]
		[Bindable(true)]
		public int? ReplaceID 
		{
			get { return GetColumnValue<int?>(Columns.ReplaceID); }
			set { SetColumnValue(Columns.ReplaceID, value); }
		}
		  
		[XmlAttribute("InventoryLogDate")]
		[Bindable(true)]
		public DateTime? InventoryLogDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InventoryLogDate); }
			set { SetColumnValue(Columns.InventoryLogDate, value); }
		}
		  
		[XmlAttribute("MeterIssueRequestID")]
		[Bindable(true)]
		public int? MeterIssueRequestID 
		{
			get { return GetColumnValue<int?>(Columns.MeterIssueRequestID); }
			set { SetColumnValue(Columns.MeterIssueRequestID, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("MeterDisConnectionID")]
		[Bindable(true)]
		public int? MeterDisConnectionID 
		{
			get { return GetColumnValue<int?>(Columns.MeterDisConnectionID); }
			set { SetColumnValue(Columns.MeterDisConnectionID, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblInventoryLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblInventoryLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterDefectedDetail ActiveRecord object related to this TblInventoryLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterDefectedDetail TblMeterDefectedDetail
		{
			get { return SmartCBSDataAccess.TblMeterDefectedDetail.FetchByID(this.DefectedID); }
			set { SetColumnValue("DefectedID", value.MeterDefectedDetailID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterDisConnection ActiveRecord object related to this TblInventoryLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterDisConnection TblMeterDisConnection
		{
			get { return SmartCBSDataAccess.TblMeterDisConnection.FetchByID(this.MeterDisConnectionID); }
			set { SetColumnValue("MeterDisConnectionID", value.DisconnectionID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterInventoryDetail ActiveRecord object related to this TblInventoryLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterInventoryDetail TblMeterInventoryDetail
		{
			get { return SmartCBSDataAccess.TblMeterInventoryDetail.FetchByID(this.InventoryInID); }
			set { SetColumnValue("InventoryInID", value.MeterInvDetID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterIssue ActiveRecord object related to this TblInventoryLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterIssue TblMeterIssue
		{
			get { return SmartCBSDataAccess.TblMeterIssue.FetchByID(this.IssueID); }
			set { SetColumnValue("IssueID", value.IssueID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterIssueRequest ActiveRecord object related to this TblInventoryLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterIssueRequest TblMeterIssueRequest
		{
			get { return SmartCBSDataAccess.TblMeterIssueRequest.FetchByID(this.MeterIssueRequestID); }
			set { SetColumnValue("MeterIssueRequestID", value.MeterIssueRequestID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterReplacement ActiveRecord object related to this TblInventoryLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterReplacement TblMeterReplacement
		{
			get { return SmartCBSDataAccess.TblMeterReplacement.FetchByID(this.ReplaceID); }
			set { SetColumnValue("ReplaceID", value.ReplaceID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varMeterID,int? varInventoryInID,int? varDefectedID,DateTime? varModifiedOn,DateTime? varCreatedOn,int? varIssueID,int? varReplaceID,DateTime? varInventoryLogDate,int? varMeterIssueRequestID,int? varBranchID,int? varMeterDisConnectionID)
		{
			TblInventoryLog item = new TblInventoryLog();
			
			item.MeterID = varMeterID;
			
			item.InventoryInID = varInventoryInID;
			
			item.DefectedID = varDefectedID;
			
			item.ModifiedOn = varModifiedOn;
			
			item.CreatedOn = varCreatedOn;
			
			item.IssueID = varIssueID;
			
			item.ReplaceID = varReplaceID;
			
			item.InventoryLogDate = varInventoryLogDate;
			
			item.MeterIssueRequestID = varMeterIssueRequestID;
			
			item.BranchID = varBranchID;
			
			item.MeterDisConnectionID = varMeterDisConnectionID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varInventoryLogID,int varMeterID,int? varInventoryInID,int? varDefectedID,DateTime? varModifiedOn,DateTime? varCreatedOn,int? varIssueID,int? varReplaceID,DateTime? varInventoryLogDate,int? varMeterIssueRequestID,int? varBranchID,int? varMeterDisConnectionID)
		{
			TblInventoryLog item = new TblInventoryLog();
			
				item.InventoryLogID = varInventoryLogID;
			
				item.MeterID = varMeterID;
			
				item.InventoryInID = varInventoryInID;
			
				item.DefectedID = varDefectedID;
			
				item.ModifiedOn = varModifiedOn;
			
				item.CreatedOn = varCreatedOn;
			
				item.IssueID = varIssueID;
			
				item.ReplaceID = varReplaceID;
			
				item.InventoryLogDate = varInventoryLogDate;
			
				item.MeterIssueRequestID = varMeterIssueRequestID;
			
				item.BranchID = varBranchID;
			
				item.MeterDisConnectionID = varMeterDisConnectionID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn InventoryLogIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn InventoryInIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DefectedIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IssueIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ReplaceIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn InventoryLogDateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIssueRequestIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterDisConnectionIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string InventoryLogID = @"InventoryLogID";
			 public static string MeterID = @"MeterID";
			 public static string InventoryInID = @"InventoryInID";
			 public static string DefectedID = @"DefectedID";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string CreatedOn = @"CreatedOn";
			 public static string IssueID = @"IssueID";
			 public static string ReplaceID = @"ReplaceID";
			 public static string InventoryLogDate = @"InventoryLogDate";
			 public static string MeterIssueRequestID = @"MeterIssueRequestID";
			 public static string BranchID = @"BranchID";
			 public static string MeterDisConnectionID = @"MeterDisConnectionID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
