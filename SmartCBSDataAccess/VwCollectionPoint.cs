using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwCollectionPoint class.
    /// </summary>
    [Serializable]
    public partial class VwCollectionPointCollection : ReadOnlyList<VwCollectionPoint, VwCollectionPointCollection>
    {        
        public VwCollectionPointCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwCollectionPoints view.
    /// </summary>
    [Serializable]
    public partial class VwCollectionPoint : ReadOnlyRecord<VwCollectionPoint>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwCollectionPoints", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarCollectionPointID = new TableSchema.TableColumn(schema);
                colvarCollectionPointID.ColumnName = "CollectionPointID";
                colvarCollectionPointID.DataType = DbType.Int32;
                colvarCollectionPointID.MaxLength = 0;
                colvarCollectionPointID.AutoIncrement = false;
                colvarCollectionPointID.IsNullable = false;
                colvarCollectionPointID.IsPrimaryKey = false;
                colvarCollectionPointID.IsForeignKey = false;
                colvarCollectionPointID.IsReadOnly = false;
                
                schema.Columns.Add(colvarCollectionPointID);
                
                TableSchema.TableColumn colvarCollectionPoint = new TableSchema.TableColumn(schema);
                colvarCollectionPoint.ColumnName = "CollectionPoint";
                colvarCollectionPoint.DataType = DbType.AnsiString;
                colvarCollectionPoint.MaxLength = 150;
                colvarCollectionPoint.AutoIncrement = false;
                colvarCollectionPoint.IsNullable = false;
                colvarCollectionPoint.IsPrimaryKey = false;
                colvarCollectionPoint.IsForeignKey = false;
                colvarCollectionPoint.IsReadOnly = false;
                
                schema.Columns.Add(colvarCollectionPoint);
                
                TableSchema.TableColumn colvarCollectionPointCategoryID = new TableSchema.TableColumn(schema);
                colvarCollectionPointCategoryID.ColumnName = "CollectionPointCategoryID";
                colvarCollectionPointCategoryID.DataType = DbType.Int32;
                colvarCollectionPointCategoryID.MaxLength = 0;
                colvarCollectionPointCategoryID.AutoIncrement = false;
                colvarCollectionPointCategoryID.IsNullable = false;
                colvarCollectionPointCategoryID.IsPrimaryKey = false;
                colvarCollectionPointCategoryID.IsForeignKey = false;
                colvarCollectionPointCategoryID.IsReadOnly = false;
                
                schema.Columns.Add(colvarCollectionPointCategoryID);
                
                TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
                colvarCreatedOn.ColumnName = "CreatedOn";
                colvarCreatedOn.DataType = DbType.DateTime;
                colvarCreatedOn.MaxLength = 0;
                colvarCreatedOn.AutoIncrement = false;
                colvarCreatedOn.IsNullable = true;
                colvarCreatedOn.IsPrimaryKey = false;
                colvarCreatedOn.IsForeignKey = false;
                colvarCreatedOn.IsReadOnly = false;
                
                schema.Columns.Add(colvarCreatedOn);
                
                TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
                colvarModifiedOn.ColumnName = "modifiedOn";
                colvarModifiedOn.DataType = DbType.DateTime;
                colvarModifiedOn.MaxLength = 0;
                colvarModifiedOn.AutoIncrement = false;
                colvarModifiedOn.IsNullable = true;
                colvarModifiedOn.IsPrimaryKey = false;
                colvarModifiedOn.IsForeignKey = false;
                colvarModifiedOn.IsReadOnly = false;
                
                schema.Columns.Add(colvarModifiedOn);
                
                TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
                colvarIsActive.ColumnName = "isActive";
                colvarIsActive.DataType = DbType.Boolean;
                colvarIsActive.MaxLength = 0;
                colvarIsActive.AutoIncrement = false;
                colvarIsActive.IsNullable = true;
                colvarIsActive.IsPrimaryKey = false;
                colvarIsActive.IsForeignKey = false;
                colvarIsActive.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsActive);
                
                TableSchema.TableColumn colvarCollectionPointCategory = new TableSchema.TableColumn(schema);
                colvarCollectionPointCategory.ColumnName = "CollectionPointCategory";
                colvarCollectionPointCategory.DataType = DbType.AnsiString;
                colvarCollectionPointCategory.MaxLength = 50;
                colvarCollectionPointCategory.AutoIncrement = false;
                colvarCollectionPointCategory.IsNullable = true;
                colvarCollectionPointCategory.IsPrimaryKey = false;
                colvarCollectionPointCategory.IsForeignKey = false;
                colvarCollectionPointCategory.IsReadOnly = false;
                
                schema.Columns.Add(colvarCollectionPointCategory);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwCollectionPoints",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwCollectionPoint()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwCollectionPoint(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwCollectionPoint(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwCollectionPoint(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("CollectionPointID")]
        [Bindable(true)]
        public int CollectionPointID 
	    {
		    get
		    {
			    return GetColumnValue<int>("CollectionPointID");
		    }
            set 
		    {
			    SetColumnValue("CollectionPointID", value);
            }
        }
	      
        [XmlAttribute("CollectionPoint")]
        [Bindable(true)]
        public string CollectionPoint 
	    {
		    get
		    {
			    return GetColumnValue<string>("CollectionPoint");
		    }
            set 
		    {
			    SetColumnValue("CollectionPoint", value);
            }
        }
	      
        [XmlAttribute("CollectionPointCategoryID")]
        [Bindable(true)]
        public int CollectionPointCategoryID 
	    {
		    get
		    {
			    return GetColumnValue<int>("CollectionPointCategoryID");
		    }
            set 
		    {
			    SetColumnValue("CollectionPointCategoryID", value);
            }
        }
	      
        [XmlAttribute("CreatedOn")]
        [Bindable(true)]
        public DateTime? CreatedOn 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("CreatedOn");
		    }
            set 
		    {
			    SetColumnValue("CreatedOn", value);
            }
        }
	      
        [XmlAttribute("ModifiedOn")]
        [Bindable(true)]
        public DateTime? ModifiedOn 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("modifiedOn");
		    }
            set 
		    {
			    SetColumnValue("modifiedOn", value);
            }
        }
	      
        [XmlAttribute("IsActive")]
        [Bindable(true)]
        public bool? IsActive 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("isActive");
		    }
            set 
		    {
			    SetColumnValue("isActive", value);
            }
        }
	      
        [XmlAttribute("CollectionPointCategory")]
        [Bindable(true)]
        public string CollectionPointCategory 
	    {
		    get
		    {
			    return GetColumnValue<string>("CollectionPointCategory");
		    }
            set 
		    {
			    SetColumnValue("CollectionPointCategory", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string CollectionPointID = @"CollectionPointID";
            
            public static string CollectionPoint = @"CollectionPoint";
            
            public static string CollectionPointCategoryID = @"CollectionPointCategoryID";
            
            public static string CreatedOn = @"CreatedOn";
            
            public static string ModifiedOn = @"modifiedOn";
            
            public static string IsActive = @"isActive";
            
            public static string CollectionPointCategory = @"CollectionPointCategory";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
