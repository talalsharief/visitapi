using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblFeeder class.
	/// </summary>
    [Serializable]
	public partial class TblFeederCollection : ActiveList<TblFeeder, TblFeederCollection>
	{	   
		public TblFeederCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblFeederCollection</returns>
		public TblFeederCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblFeeder o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblFeeder table.
	/// </summary>
	[Serializable]
	public partial class TblFeeder : ActiveRecord<TblFeeder>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblFeeder()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblFeeder(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblFeeder(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblFeeder(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblFeeder", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarFeederID = new TableSchema.TableColumn(schema);
				colvarFeederID.ColumnName = "FeederID";
				colvarFeederID.DataType = DbType.Int32;
				colvarFeederID.MaxLength = 0;
				colvarFeederID.AutoIncrement = true;
				colvarFeederID.IsNullable = false;
				colvarFeederID.IsPrimaryKey = true;
				colvarFeederID.IsForeignKey = false;
				colvarFeederID.IsReadOnly = false;
				colvarFeederID.DefaultSetting = @"";
				colvarFeederID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeederID);
				
				TableSchema.TableColumn colvarFeederNo = new TableSchema.TableColumn(schema);
				colvarFeederNo.ColumnName = "FeederNo";
				colvarFeederNo.DataType = DbType.AnsiString;
				colvarFeederNo.MaxLength = -1;
				colvarFeederNo.AutoIncrement = false;
				colvarFeederNo.IsNullable = true;
				colvarFeederNo.IsPrimaryKey = false;
				colvarFeederNo.IsForeignKey = false;
				colvarFeederNo.IsReadOnly = false;
				colvarFeederNo.DefaultSetting = @"";
				colvarFeederNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeederNo);
				
				TableSchema.TableColumn colvarBrickID = new TableSchema.TableColumn(schema);
				colvarBrickID.ColumnName = "BrickID";
				colvarBrickID.DataType = DbType.Int32;
				colvarBrickID.MaxLength = 0;
				colvarBrickID.AutoIncrement = false;
				colvarBrickID.IsNullable = true;
				colvarBrickID.IsPrimaryKey = false;
				colvarBrickID.IsForeignKey = true;
				colvarBrickID.IsReadOnly = false;
				colvarBrickID.DefaultSetting = @"";
				
					colvarBrickID.ForeignKeyTableName = "TblBrick";
				schema.Columns.Add(colvarBrickID);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarBrickTypeID = new TableSchema.TableColumn(schema);
				colvarBrickTypeID.ColumnName = "BrickTypeID";
				colvarBrickTypeID.DataType = DbType.Int32;
				colvarBrickTypeID.MaxLength = 0;
				colvarBrickTypeID.AutoIncrement = false;
				colvarBrickTypeID.IsNullable = true;
				colvarBrickTypeID.IsPrimaryKey = false;
				colvarBrickTypeID.IsForeignKey = true;
				colvarBrickTypeID.IsReadOnly = false;
				colvarBrickTypeID.DefaultSetting = @"";
				
					colvarBrickTypeID.ForeignKeyTableName = "TblBrickType";
				schema.Columns.Add(colvarBrickTypeID);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarFeederCreatedBy = new TableSchema.TableColumn(schema);
				colvarFeederCreatedBy.ColumnName = "FeederCreatedBy";
				colvarFeederCreatedBy.DataType = DbType.Int32;
				colvarFeederCreatedBy.MaxLength = 0;
				colvarFeederCreatedBy.AutoIncrement = false;
				colvarFeederCreatedBy.IsNullable = true;
				colvarFeederCreatedBy.IsPrimaryKey = false;
				colvarFeederCreatedBy.IsForeignKey = true;
				colvarFeederCreatedBy.IsReadOnly = false;
				colvarFeederCreatedBy.DefaultSetting = @"";
				
					colvarFeederCreatedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarFeederCreatedBy);
				
				TableSchema.TableColumn colvarFeederCode = new TableSchema.TableColumn(schema);
				colvarFeederCode.ColumnName = "FeederCode";
				colvarFeederCode.DataType = DbType.AnsiString;
				colvarFeederCode.MaxLength = 50;
				colvarFeederCode.AutoIncrement = false;
				colvarFeederCode.IsNullable = true;
				colvarFeederCode.IsPrimaryKey = false;
				colvarFeederCode.IsForeignKey = false;
				colvarFeederCode.IsReadOnly = false;
				colvarFeederCode.DefaultSetting = @"";
				colvarFeederCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeederCode);
				
				TableSchema.TableColumn colvarFeederStatusID = new TableSchema.TableColumn(schema);
				colvarFeederStatusID.ColumnName = "FeederStatusID";
				colvarFeederStatusID.DataType = DbType.Int32;
				colvarFeederStatusID.MaxLength = 0;
				colvarFeederStatusID.AutoIncrement = false;
				colvarFeederStatusID.IsNullable = true;
				colvarFeederStatusID.IsPrimaryKey = false;
				colvarFeederStatusID.IsForeignKey = true;
				colvarFeederStatusID.IsReadOnly = false;
				colvarFeederStatusID.DefaultSetting = @"";
				
					colvarFeederStatusID.ForeignKeyTableName = "TblFeederStatus";
				schema.Columns.Add(colvarFeederStatusID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblFeeder",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("FeederID")]
		[Bindable(true)]
		public int FeederID 
		{
			get { return GetColumnValue<int>(Columns.FeederID); }
			set { SetColumnValue(Columns.FeederID, value); }
		}
		  
		[XmlAttribute("FeederNo")]
		[Bindable(true)]
		public string FeederNo 
		{
			get { return GetColumnValue<string>(Columns.FeederNo); }
			set { SetColumnValue(Columns.FeederNo, value); }
		}
		  
		[XmlAttribute("BrickID")]
		[Bindable(true)]
		public int? BrickID 
		{
			get { return GetColumnValue<int?>(Columns.BrickID); }
			set { SetColumnValue(Columns.BrickID, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("BrickTypeID")]
		[Bindable(true)]
		public int? BrickTypeID 
		{
			get { return GetColumnValue<int?>(Columns.BrickTypeID); }
			set { SetColumnValue(Columns.BrickTypeID, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("FeederCreatedBy")]
		[Bindable(true)]
		public int? FeederCreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.FeederCreatedBy); }
			set { SetColumnValue(Columns.FeederCreatedBy, value); }
		}
		  
		[XmlAttribute("FeederCode")]
		[Bindable(true)]
		public string FeederCode 
		{
			get { return GetColumnValue<string>(Columns.FeederCode); }
			set { SetColumnValue(Columns.FeederCode, value); }
		}
		  
		[XmlAttribute("FeederStatusID")]
		[Bindable(true)]
		public int? FeederStatusID 
		{
			get { return GetColumnValue<int?>(Columns.FeederStatusID); }
			set { SetColumnValue(Columns.FeederStatusID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblFeederReadingCollection TblFeederReadingRecords()
		{
			return new SmartCBSDataAccess.TblFeederReadingCollection().Where(TblFeederReading.Columns.FeederID, FeederID).Load();
		}
		public SmartCBSDataAccess.TblMeterCollection TblMeterRecords()
		{
			return new SmartCBSDataAccess.TblMeterCollection().Where(TblMeter.Columns.FeaderID, FeederID).Load();
		}
		public SmartCBSDataAccess.TblPMTCollection TblPMTRecords()
		{
			return new SmartCBSDataAccess.TblPMTCollection().Where(TblPMT.Columns.FeederID, FeederID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblFeeder
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblBrick ActiveRecord object related to this TblFeeder
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBrick TblBrick
		{
			get { return SmartCBSDataAccess.TblBrick.FetchByID(this.BrickID); }
			set { SetColumnValue("BrickID", value.BrickID); }
		}
		
		
		/// <summary>
		/// Returns a TblBrickType ActiveRecord object related to this TblFeeder
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBrickType TblBrickType
		{
			get { return SmartCBSDataAccess.TblBrickType.FetchByID(this.BrickTypeID); }
			set { SetColumnValue("BrickTypeID", value.BrickTypeID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblFeeder
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.FeederCreatedBy); }
			set { SetColumnValue("FeederCreatedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblFeederStatus ActiveRecord object related to this TblFeeder
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblFeederStatus TblFeederStatus
		{
			get { return SmartCBSDataAccess.TblFeederStatus.FetchByID(this.FeederStatusID); }
			set { SetColumnValue("FeederStatusID", value.FeederStatusID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varFeederNo,int? varBrickID,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varBrickTypeID,int? varBranchID,int? varFeederCreatedBy,string varFeederCode,int? varFeederStatusID)
		{
			TblFeeder item = new TblFeeder();
			
			item.FeederNo = varFeederNo;
			
			item.BrickID = varBrickID;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.BrickTypeID = varBrickTypeID;
			
			item.BranchID = varBranchID;
			
			item.FeederCreatedBy = varFeederCreatedBy;
			
			item.FeederCode = varFeederCode;
			
			item.FeederStatusID = varFeederStatusID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varFeederID,string varFeederNo,int? varBrickID,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varBrickTypeID,int? varBranchID,int? varFeederCreatedBy,string varFeederCode,int? varFeederStatusID)
		{
			TblFeeder item = new TblFeeder();
			
				item.FeederID = varFeederID;
			
				item.FeederNo = varFeederNo;
			
				item.BrickID = varBrickID;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.BrickTypeID = varBrickTypeID;
			
				item.BranchID = varBranchID;
			
				item.FeederCreatedBy = varFeederCreatedBy;
			
				item.FeederCode = varFeederCode;
			
				item.FeederStatusID = varFeederStatusID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn FeederIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FeederNoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BrickIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BrickTypeIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FeederCreatedByColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn FeederCodeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FeederStatusIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string FeederID = @"FeederID";
			 public static string FeederNo = @"FeederNo";
			 public static string BrickID = @"BrickID";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string BrickTypeID = @"BrickTypeID";
			 public static string BranchID = @"BranchID";
			 public static string FeederCreatedBy = @"FeederCreatedBy";
			 public static string FeederCode = @"FeederCode";
			 public static string FeederStatusID = @"FeederStatusID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
