using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblCheque class.
	/// </summary>
    [Serializable]
	public partial class TblChequeCollection : ActiveList<TblCheque, TblChequeCollection>
	{	   
		public TblChequeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblChequeCollection</returns>
		public TblChequeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblCheque o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblCheque table.
	/// </summary>
	[Serializable]
	public partial class TblCheque : ActiveRecord<TblCheque>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblCheque()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblCheque(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblCheque(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblCheque(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblCheque", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarChequeID = new TableSchema.TableColumn(schema);
				colvarChequeID.ColumnName = "ChequeID";
				colvarChequeID.DataType = DbType.Int32;
				colvarChequeID.MaxLength = 0;
				colvarChequeID.AutoIncrement = true;
				colvarChequeID.IsNullable = false;
				colvarChequeID.IsPrimaryKey = true;
				colvarChequeID.IsForeignKey = false;
				colvarChequeID.IsReadOnly = false;
				colvarChequeID.DefaultSetting = @"";
				colvarChequeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChequeID);
				
				TableSchema.TableColumn colvarBankName = new TableSchema.TableColumn(schema);
				colvarBankName.ColumnName = "BankName";
				colvarBankName.DataType = DbType.AnsiString;
				colvarBankName.MaxLength = 150;
				colvarBankName.AutoIncrement = false;
				colvarBankName.IsNullable = true;
				colvarBankName.IsPrimaryKey = false;
				colvarBankName.IsForeignKey = false;
				colvarBankName.IsReadOnly = false;
				colvarBankName.DefaultSetting = @"";
				colvarBankName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBankName);
				
				TableSchema.TableColumn colvarBranchName = new TableSchema.TableColumn(schema);
				colvarBranchName.ColumnName = "BranchName";
				colvarBranchName.DataType = DbType.AnsiString;
				colvarBranchName.MaxLength = 150;
				colvarBranchName.AutoIncrement = false;
				colvarBranchName.IsNullable = true;
				colvarBranchName.IsPrimaryKey = false;
				colvarBranchName.IsForeignKey = false;
				colvarBranchName.IsReadOnly = false;
				colvarBranchName.DefaultSetting = @"";
				colvarBranchName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBranchName);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Decimal;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarBillID = new TableSchema.TableColumn(schema);
				colvarBillID.ColumnName = "BillID";
				colvarBillID.DataType = DbType.Int32;
				colvarBillID.MaxLength = 0;
				colvarBillID.AutoIncrement = false;
				colvarBillID.IsNullable = true;
				colvarBillID.IsPrimaryKey = false;
				colvarBillID.IsForeignKey = false;
				colvarBillID.IsReadOnly = false;
				colvarBillID.DefaultSetting = @"";
				colvarBillID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillID);
				
				TableSchema.TableColumn colvarIsBounced = new TableSchema.TableColumn(schema);
				colvarIsBounced.ColumnName = "IsBounced";
				colvarIsBounced.DataType = DbType.Boolean;
				colvarIsBounced.MaxLength = 0;
				colvarIsBounced.AutoIncrement = false;
				colvarIsBounced.IsNullable = true;
				colvarIsBounced.IsPrimaryKey = false;
				colvarIsBounced.IsForeignKey = false;
				colvarIsBounced.IsReadOnly = false;
				colvarIsBounced.DefaultSetting = @"";
				colvarIsBounced.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsBounced);
				
				TableSchema.TableColumn colvarIsCleared = new TableSchema.TableColumn(schema);
				colvarIsCleared.ColumnName = "IsCleared";
				colvarIsCleared.DataType = DbType.Boolean;
				colvarIsCleared.MaxLength = 0;
				colvarIsCleared.AutoIncrement = false;
				colvarIsCleared.IsNullable = true;
				colvarIsCleared.IsPrimaryKey = false;
				colvarIsCleared.IsForeignKey = false;
				colvarIsCleared.IsReadOnly = false;
				colvarIsCleared.DefaultSetting = @"";
				colvarIsCleared.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCleared);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = true;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				
					colvarConsumerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarChequeDate = new TableSchema.TableColumn(schema);
				colvarChequeDate.ColumnName = "ChequeDate";
				colvarChequeDate.DataType = DbType.DateTime;
				colvarChequeDate.MaxLength = 0;
				colvarChequeDate.AutoIncrement = false;
				colvarChequeDate.IsNullable = true;
				colvarChequeDate.IsPrimaryKey = false;
				colvarChequeDate.IsForeignKey = false;
				colvarChequeDate.IsReadOnly = false;
				colvarChequeDate.DefaultSetting = @"";
				colvarChequeDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChequeDate);
				
				TableSchema.TableColumn colvarChequeNo = new TableSchema.TableColumn(schema);
				colvarChequeNo.ColumnName = "ChequeNo";
				colvarChequeNo.DataType = DbType.AnsiString;
				colvarChequeNo.MaxLength = 50;
				colvarChequeNo.AutoIncrement = false;
				colvarChequeNo.IsNullable = true;
				colvarChequeNo.IsPrimaryKey = false;
				colvarChequeNo.IsForeignKey = false;
				colvarChequeNo.IsReadOnly = false;
				colvarChequeNo.DefaultSetting = @"";
				colvarChequeNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChequeNo);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = 250;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblCheque",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ChequeID")]
		[Bindable(true)]
		public int ChequeID 
		{
			get { return GetColumnValue<int>(Columns.ChequeID); }
			set { SetColumnValue(Columns.ChequeID, value); }
		}
		  
		[XmlAttribute("BankName")]
		[Bindable(true)]
		public string BankName 
		{
			get { return GetColumnValue<string>(Columns.BankName); }
			set { SetColumnValue(Columns.BankName, value); }
		}
		  
		[XmlAttribute("BranchName")]
		[Bindable(true)]
		public string BranchName 
		{
			get { return GetColumnValue<string>(Columns.BranchName); }
			set { SetColumnValue(Columns.BranchName, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal? Amount 
		{
			get { return GetColumnValue<decimal?>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("BillID")]
		[Bindable(true)]
		public int? BillID 
		{
			get { return GetColumnValue<int?>(Columns.BillID); }
			set { SetColumnValue(Columns.BillID, value); }
		}
		  
		[XmlAttribute("IsBounced")]
		[Bindable(true)]
		public bool? IsBounced 
		{
			get { return GetColumnValue<bool?>(Columns.IsBounced); }
			set { SetColumnValue(Columns.IsBounced, value); }
		}
		  
		[XmlAttribute("IsCleared")]
		[Bindable(true)]
		public bool? IsCleared 
		{
			get { return GetColumnValue<bool?>(Columns.IsCleared); }
			set { SetColumnValue(Columns.IsCleared, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("ChequeDate")]
		[Bindable(true)]
		public DateTime? ChequeDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ChequeDate); }
			set { SetColumnValue(Columns.ChequeDate, value); }
		}
		  
		[XmlAttribute("ChequeNo")]
		[Bindable(true)]
		public string ChequeNo 
		{
			get { return GetColumnValue<string>(Columns.ChequeNo); }
			set { SetColumnValue(Columns.ChequeNo, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblBillPaymentCollection TblBillPaymentRecords()
		{
			return new SmartCBSDataAccess.TblBillPaymentCollection().Where(TblBillPayment.Columns.ChequeID, ChequeID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblCheque
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.ConsumerID); }
			set { SetColumnValue("ConsumerID", value.CunsumerID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varBankName,string varBranchName,decimal? varAmount,int? varBillID,bool? varIsBounced,bool? varIsCleared,int? varConsumerID,DateTime? varChequeDate,string varChequeNo,string varRemarks)
		{
			TblCheque item = new TblCheque();
			
			item.BankName = varBankName;
			
			item.BranchName = varBranchName;
			
			item.Amount = varAmount;
			
			item.BillID = varBillID;
			
			item.IsBounced = varIsBounced;
			
			item.IsCleared = varIsCleared;
			
			item.ConsumerID = varConsumerID;
			
			item.ChequeDate = varChequeDate;
			
			item.ChequeNo = varChequeNo;
			
			item.Remarks = varRemarks;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varChequeID,string varBankName,string varBranchName,decimal? varAmount,int? varBillID,bool? varIsBounced,bool? varIsCleared,int? varConsumerID,DateTime? varChequeDate,string varChequeNo,string varRemarks)
		{
			TblCheque item = new TblCheque();
			
				item.ChequeID = varChequeID;
			
				item.BankName = varBankName;
			
				item.BranchName = varBranchName;
			
				item.Amount = varAmount;
			
				item.BillID = varBillID;
			
				item.IsBounced = varIsBounced;
			
				item.IsCleared = varIsCleared;
			
				item.ConsumerID = varConsumerID;
			
				item.ChequeDate = varChequeDate;
			
				item.ChequeNo = varChequeNo;
			
				item.Remarks = varRemarks;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ChequeIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BankNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BillIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IsBouncedColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsClearedColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ChequeDateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ChequeNoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ChequeID = @"ChequeID";
			 public static string BankName = @"BankName";
			 public static string BranchName = @"BranchName";
			 public static string Amount = @"Amount";
			 public static string BillID = @"BillID";
			 public static string IsBounced = @"IsBounced";
			 public static string IsCleared = @"IsCleared";
			 public static string ConsumerID = @"ConsumerID";
			 public static string ChequeDate = @"ChequeDate";
			 public static string ChequeNo = @"ChequeNo";
			 public static string Remarks = @"Remarks";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
