using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblDetectionBillPayment class.
	/// </summary>
    [Serializable]
	public partial class TblDetectionBillPaymentCollection : ActiveList<TblDetectionBillPayment, TblDetectionBillPaymentCollection>
	{	   
		public TblDetectionBillPaymentCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblDetectionBillPaymentCollection</returns>
		public TblDetectionBillPaymentCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblDetectionBillPayment o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblDetectionBillPayment table.
	/// </summary>
	[Serializable]
	public partial class TblDetectionBillPayment : ActiveRecord<TblDetectionBillPayment>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblDetectionBillPayment()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblDetectionBillPayment(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblDetectionBillPayment(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblDetectionBillPayment(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblDetectionBillPayment", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDetectionBillPaymentID = new TableSchema.TableColumn(schema);
				colvarDetectionBillPaymentID.ColumnName = "DetectionBillPaymentID";
				colvarDetectionBillPaymentID.DataType = DbType.Int32;
				colvarDetectionBillPaymentID.MaxLength = 0;
				colvarDetectionBillPaymentID.AutoIncrement = true;
				colvarDetectionBillPaymentID.IsNullable = false;
				colvarDetectionBillPaymentID.IsPrimaryKey = true;
				colvarDetectionBillPaymentID.IsForeignKey = false;
				colvarDetectionBillPaymentID.IsReadOnly = false;
				colvarDetectionBillPaymentID.DefaultSetting = @"";
				colvarDetectionBillPaymentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetectionBillPaymentID);
				
				TableSchema.TableColumn colvarDetectionBillID = new TableSchema.TableColumn(schema);
				colvarDetectionBillID.ColumnName = "DetectionBillID";
				colvarDetectionBillID.DataType = DbType.Int32;
				colvarDetectionBillID.MaxLength = 0;
				colvarDetectionBillID.AutoIncrement = false;
				colvarDetectionBillID.IsNullable = true;
				colvarDetectionBillID.IsPrimaryKey = false;
				colvarDetectionBillID.IsForeignKey = true;
				colvarDetectionBillID.IsReadOnly = false;
				colvarDetectionBillID.DefaultSetting = @"";
				
					colvarDetectionBillID.ForeignKeyTableName = "tblDetectionBill";
				schema.Columns.Add(colvarDetectionBillID);
				
				TableSchema.TableColumn colvarDetectionBillAmount = new TableSchema.TableColumn(schema);
				colvarDetectionBillAmount.ColumnName = "DetectionBillAmount";
				colvarDetectionBillAmount.DataType = DbType.Decimal;
				colvarDetectionBillAmount.MaxLength = 0;
				colvarDetectionBillAmount.AutoIncrement = false;
				colvarDetectionBillAmount.IsNullable = true;
				colvarDetectionBillAmount.IsPrimaryKey = false;
				colvarDetectionBillAmount.IsForeignKey = false;
				colvarDetectionBillAmount.IsReadOnly = false;
				colvarDetectionBillAmount.DefaultSetting = @"";
				colvarDetectionBillAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetectionBillAmount);
				
				TableSchema.TableColumn colvarAmountPaid = new TableSchema.TableColumn(schema);
				colvarAmountPaid.ColumnName = "AmountPaid";
				colvarAmountPaid.DataType = DbType.Decimal;
				colvarAmountPaid.MaxLength = 0;
				colvarAmountPaid.AutoIncrement = false;
				colvarAmountPaid.IsNullable = true;
				colvarAmountPaid.IsPrimaryKey = false;
				colvarAmountPaid.IsForeignKey = false;
				colvarAmountPaid.IsReadOnly = false;
				colvarAmountPaid.DefaultSetting = @"";
				colvarAmountPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmountPaid);
				
				TableSchema.TableColumn colvarUploadedByUser = new TableSchema.TableColumn(schema);
				colvarUploadedByUser.ColumnName = "UploadedByUser";
				colvarUploadedByUser.DataType = DbType.Int32;
				colvarUploadedByUser.MaxLength = 0;
				colvarUploadedByUser.AutoIncrement = false;
				colvarUploadedByUser.IsNullable = true;
				colvarUploadedByUser.IsPrimaryKey = false;
				colvarUploadedByUser.IsForeignKey = true;
				colvarUploadedByUser.IsReadOnly = false;
				colvarUploadedByUser.DefaultSetting = @"";
				
					colvarUploadedByUser.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarUploadedByUser);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = -1;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarPaymentDate = new TableSchema.TableColumn(schema);
				colvarPaymentDate.ColumnName = "PaymentDate";
				colvarPaymentDate.DataType = DbType.DateTime;
				colvarPaymentDate.MaxLength = 0;
				colvarPaymentDate.AutoIncrement = false;
				colvarPaymentDate.IsNullable = true;
				colvarPaymentDate.IsPrimaryKey = false;
				colvarPaymentDate.IsForeignKey = false;
				colvarPaymentDate.IsReadOnly = false;
				colvarPaymentDate.DefaultSetting = @"";
				colvarPaymentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentDate);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblDetectionBillPayment",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DetectionBillPaymentID")]
		[Bindable(true)]
		public int DetectionBillPaymentID 
		{
			get { return GetColumnValue<int>(Columns.DetectionBillPaymentID); }
			set { SetColumnValue(Columns.DetectionBillPaymentID, value); }
		}
		  
		[XmlAttribute("DetectionBillID")]
		[Bindable(true)]
		public int? DetectionBillID 
		{
			get { return GetColumnValue<int?>(Columns.DetectionBillID); }
			set { SetColumnValue(Columns.DetectionBillID, value); }
		}
		  
		[XmlAttribute("DetectionBillAmount")]
		[Bindable(true)]
		public decimal? DetectionBillAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.DetectionBillAmount); }
			set { SetColumnValue(Columns.DetectionBillAmount, value); }
		}
		  
		[XmlAttribute("AmountPaid")]
		[Bindable(true)]
		public decimal? AmountPaid 
		{
			get { return GetColumnValue<decimal?>(Columns.AmountPaid); }
			set { SetColumnValue(Columns.AmountPaid, value); }
		}
		  
		[XmlAttribute("UploadedByUser")]
		[Bindable(true)]
		public int? UploadedByUser 
		{
			get { return GetColumnValue<int?>(Columns.UploadedByUser); }
			set { SetColumnValue(Columns.UploadedByUser, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("PaymentDate")]
		[Bindable(true)]
		public DateTime? PaymentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentDate); }
			set { SetColumnValue(Columns.PaymentDate, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblDetectionBill ActiveRecord object related to this TblDetectionBillPayment
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblDetectionBill TblDetectionBill
		{
			get { return SmartCBSDataAccess.TblDetectionBill.FetchByID(this.DetectionBillID); }
			set { SetColumnValue("DetectionBillID", value.DetectionBillID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblDetectionBillPayment
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.UploadedByUser); }
			set { SetColumnValue("UploadedByUser", value.EmployeeID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varDetectionBillID,decimal? varDetectionBillAmount,decimal? varAmountPaid,int? varUploadedByUser,string varRemarks,DateTime? varPaymentDate,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblDetectionBillPayment item = new TblDetectionBillPayment();
			
			item.DetectionBillID = varDetectionBillID;
			
			item.DetectionBillAmount = varDetectionBillAmount;
			
			item.AmountPaid = varAmountPaid;
			
			item.UploadedByUser = varUploadedByUser;
			
			item.Remarks = varRemarks;
			
			item.PaymentDate = varPaymentDate;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDetectionBillPaymentID,int? varDetectionBillID,decimal? varDetectionBillAmount,decimal? varAmountPaid,int? varUploadedByUser,string varRemarks,DateTime? varPaymentDate,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblDetectionBillPayment item = new TblDetectionBillPayment();
			
				item.DetectionBillPaymentID = varDetectionBillPaymentID;
			
				item.DetectionBillID = varDetectionBillID;
			
				item.DetectionBillAmount = varDetectionBillAmount;
			
				item.AmountPaid = varAmountPaid;
			
				item.UploadedByUser = varUploadedByUser;
			
				item.Remarks = varRemarks;
			
				item.PaymentDate = varPaymentDate;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DetectionBillPaymentIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DetectionBillIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DetectionBillAmountColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountPaidColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn UploadedByUserColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DetectionBillPaymentID = @"DetectionBillPaymentID";
			 public static string DetectionBillID = @"DetectionBillID";
			 public static string DetectionBillAmount = @"DetectionBillAmount";
			 public static string AmountPaid = @"AmountPaid";
			 public static string UploadedByUser = @"UploadedByUser";
			 public static string Remarks = @"Remarks";
			 public static string PaymentDate = @"PaymentDate";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
