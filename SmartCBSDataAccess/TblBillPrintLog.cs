using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblBillPrintLog class.
	/// </summary>
    [Serializable]
	public partial class TblBillPrintLogCollection : ActiveList<TblBillPrintLog, TblBillPrintLogCollection>
	{	   
		public TblBillPrintLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblBillPrintLogCollection</returns>
		public TblBillPrintLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblBillPrintLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblBillPrintLog table.
	/// </summary>
	[Serializable]
	public partial class TblBillPrintLog : ActiveRecord<TblBillPrintLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblBillPrintLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblBillPrintLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblBillPrintLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblBillPrintLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblBillPrintLog", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarBillPrintLogID = new TableSchema.TableColumn(schema);
				colvarBillPrintLogID.ColumnName = "BillPrintLogID";
				colvarBillPrintLogID.DataType = DbType.Int32;
				colvarBillPrintLogID.MaxLength = 0;
				colvarBillPrintLogID.AutoIncrement = true;
				colvarBillPrintLogID.IsNullable = false;
				colvarBillPrintLogID.IsPrimaryKey = true;
				colvarBillPrintLogID.IsForeignKey = false;
				colvarBillPrintLogID.IsReadOnly = false;
				colvarBillPrintLogID.DefaultSetting = @"";
				colvarBillPrintLogID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillPrintLogID);
				
				TableSchema.TableColumn colvarBillID = new TableSchema.TableColumn(schema);
				colvarBillID.ColumnName = "BillID";
				colvarBillID.DataType = DbType.Int32;
				colvarBillID.MaxLength = 0;
				colvarBillID.AutoIncrement = false;
				colvarBillID.IsNullable = true;
				colvarBillID.IsPrimaryKey = false;
				colvarBillID.IsForeignKey = true;
				colvarBillID.IsReadOnly = false;
				colvarBillID.DefaultSetting = @"";
				
					colvarBillID.ForeignKeyTableName = "TblBill";
				schema.Columns.Add(colvarBillID);
				
				TableSchema.TableColumn colvarBillPrintedBy = new TableSchema.TableColumn(schema);
				colvarBillPrintedBy.ColumnName = "BillPrintedBy";
				colvarBillPrintedBy.DataType = DbType.Int32;
				colvarBillPrintedBy.MaxLength = 0;
				colvarBillPrintedBy.AutoIncrement = false;
				colvarBillPrintedBy.IsNullable = true;
				colvarBillPrintedBy.IsPrimaryKey = false;
				colvarBillPrintedBy.IsForeignKey = true;
				colvarBillPrintedBy.IsReadOnly = false;
				colvarBillPrintedBy.DefaultSetting = @"";
				
					colvarBillPrintedBy.ForeignKeyTableName = "UserLogin";
				schema.Columns.Add(colvarBillPrintedBy);
				
				TableSchema.TableColumn colvarBillPrintTime = new TableSchema.TableColumn(schema);
				colvarBillPrintTime.ColumnName = "BillPrintTime";
				colvarBillPrintTime.DataType = DbType.DateTime;
				colvarBillPrintTime.MaxLength = 0;
				colvarBillPrintTime.AutoIncrement = false;
				colvarBillPrintTime.IsNullable = true;
				colvarBillPrintTime.IsPrimaryKey = false;
				colvarBillPrintTime.IsForeignKey = false;
				colvarBillPrintTime.IsReadOnly = false;
				colvarBillPrintTime.DefaultSetting = @"";
				colvarBillPrintTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillPrintTime);
				
				TableSchema.TableColumn colvarActivity = new TableSchema.TableColumn(schema);
				colvarActivity.ColumnName = "Activity";
				colvarActivity.DataType = DbType.AnsiString;
				colvarActivity.MaxLength = 50;
				colvarActivity.AutoIncrement = false;
				colvarActivity.IsNullable = true;
				colvarActivity.IsPrimaryKey = false;
				colvarActivity.IsForeignKey = false;
				colvarActivity.IsReadOnly = false;
				colvarActivity.DefaultSetting = @"";
				colvarActivity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivity);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblBillPrintLog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("BillPrintLogID")]
		[Bindable(true)]
		public int BillPrintLogID 
		{
			get { return GetColumnValue<int>(Columns.BillPrintLogID); }
			set { SetColumnValue(Columns.BillPrintLogID, value); }
		}
		  
		[XmlAttribute("BillID")]
		[Bindable(true)]
		public int? BillID 
		{
			get { return GetColumnValue<int?>(Columns.BillID); }
			set { SetColumnValue(Columns.BillID, value); }
		}
		  
		[XmlAttribute("BillPrintedBy")]
		[Bindable(true)]
		public int? BillPrintedBy 
		{
			get { return GetColumnValue<int?>(Columns.BillPrintedBy); }
			set { SetColumnValue(Columns.BillPrintedBy, value); }
		}
		  
		[XmlAttribute("BillPrintTime")]
		[Bindable(true)]
		public DateTime? BillPrintTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.BillPrintTime); }
			set { SetColumnValue(Columns.BillPrintTime, value); }
		}
		  
		[XmlAttribute("Activity")]
		[Bindable(true)]
		public string Activity 
		{
			get { return GetColumnValue<string>(Columns.Activity); }
			set { SetColumnValue(Columns.Activity, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBill ActiveRecord object related to this TblBillPrintLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBill TblBill
		{
			get { return SmartCBSDataAccess.TblBill.FetchByID(this.BillID); }
			set { SetColumnValue("BillID", value.BillID); }
		}
		
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblBillPrintLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a UserLogin ActiveRecord object related to this TblBillPrintLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.UserLogin UserLogin
		{
			get { return SmartCBSDataAccess.UserLogin.FetchByID(this.BillPrintedBy); }
			set { SetColumnValue("BillPrintedBy", value.UserLoginId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varBillID,int? varBillPrintedBy,DateTime? varBillPrintTime,string varActivity,int? varBranchID,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblBillPrintLog item = new TblBillPrintLog();
			
			item.BillID = varBillID;
			
			item.BillPrintedBy = varBillPrintedBy;
			
			item.BillPrintTime = varBillPrintTime;
			
			item.Activity = varActivity;
			
			item.BranchID = varBranchID;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varBillPrintLogID,int? varBillID,int? varBillPrintedBy,DateTime? varBillPrintTime,string varActivity,int? varBranchID,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblBillPrintLog item = new TblBillPrintLog();
			
				item.BillPrintLogID = varBillPrintLogID;
			
				item.BillID = varBillID;
			
				item.BillPrintedBy = varBillPrintedBy;
			
				item.BillPrintTime = varBillPrintTime;
			
				item.Activity = varActivity;
			
				item.BranchID = varBranchID;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn BillPrintLogIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BillIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BillPrintedByColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn BillPrintTimeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivityColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string BillPrintLogID = @"BillPrintLogID";
			 public static string BillID = @"BillID";
			 public static string BillPrintedBy = @"BillPrintedBy";
			 public static string BillPrintTime = @"BillPrintTime";
			 public static string Activity = @"Activity";
			 public static string BranchID = @"BranchID";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
