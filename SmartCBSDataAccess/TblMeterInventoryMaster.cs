using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeterInventoryMaster class.
	/// </summary>
    [Serializable]
	public partial class TblMeterInventoryMasterCollection : ActiveList<TblMeterInventoryMaster, TblMeterInventoryMasterCollection>
	{	   
		public TblMeterInventoryMasterCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterInventoryMasterCollection</returns>
		public TblMeterInventoryMasterCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeterInventoryMaster o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeterInventoryMaster table.
	/// </summary>
	[Serializable]
	public partial class TblMeterInventoryMaster : ActiveRecord<TblMeterInventoryMaster>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeterInventoryMaster()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeterInventoryMaster(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeterInventoryMaster(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeterInventoryMaster(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeterInventoryMaster", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMeterInventoryID = new TableSchema.TableColumn(schema);
				colvarMeterInventoryID.ColumnName = "MeterInventoryID";
				colvarMeterInventoryID.DataType = DbType.Int32;
				colvarMeterInventoryID.MaxLength = 0;
				colvarMeterInventoryID.AutoIncrement = true;
				colvarMeterInventoryID.IsNullable = false;
				colvarMeterInventoryID.IsPrimaryKey = true;
				colvarMeterInventoryID.IsForeignKey = false;
				colvarMeterInventoryID.IsReadOnly = false;
				colvarMeterInventoryID.DefaultSetting = @"";
				colvarMeterInventoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterInventoryID);
				
				TableSchema.TableColumn colvarInvCreatedBy = new TableSchema.TableColumn(schema);
				colvarInvCreatedBy.ColumnName = "InvCreatedBy";
				colvarInvCreatedBy.DataType = DbType.Int32;
				colvarInvCreatedBy.MaxLength = 0;
				colvarInvCreatedBy.AutoIncrement = false;
				colvarInvCreatedBy.IsNullable = true;
				colvarInvCreatedBy.IsPrimaryKey = false;
				colvarInvCreatedBy.IsForeignKey = true;
				colvarInvCreatedBy.IsReadOnly = false;
				colvarInvCreatedBy.DefaultSetting = @"";
				
					colvarInvCreatedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarInvCreatedBy);
				
				TableSchema.TableColumn colvarInvCreatedOn = new TableSchema.TableColumn(schema);
				colvarInvCreatedOn.ColumnName = "InvCreatedOn";
				colvarInvCreatedOn.DataType = DbType.DateTime;
				colvarInvCreatedOn.MaxLength = 0;
				colvarInvCreatedOn.AutoIncrement = false;
				colvarInvCreatedOn.IsNullable = true;
				colvarInvCreatedOn.IsPrimaryKey = false;
				colvarInvCreatedOn.IsForeignKey = false;
				colvarInvCreatedOn.IsReadOnly = false;
				colvarInvCreatedOn.DefaultSetting = @"";
				colvarInvCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvCreatedOn);
				
				TableSchema.TableColumn colvarQtyInTo = new TableSchema.TableColumn(schema);
				colvarQtyInTo.ColumnName = "QtyInTo";
				colvarQtyInTo.DataType = DbType.Int32;
				colvarQtyInTo.MaxLength = 0;
				colvarQtyInTo.AutoIncrement = false;
				colvarQtyInTo.IsNullable = true;
				colvarQtyInTo.IsPrimaryKey = false;
				colvarQtyInTo.IsForeignKey = false;
				colvarQtyInTo.IsReadOnly = false;
				colvarQtyInTo.DefaultSetting = @"";
				colvarQtyInTo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQtyInTo);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeterInventoryMaster",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MeterInventoryID")]
		[Bindable(true)]
		public int MeterInventoryID 
		{
			get { return GetColumnValue<int>(Columns.MeterInventoryID); }
			set { SetColumnValue(Columns.MeterInventoryID, value); }
		}
		  
		[XmlAttribute("InvCreatedBy")]
		[Bindable(true)]
		public int? InvCreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.InvCreatedBy); }
			set { SetColumnValue(Columns.InvCreatedBy, value); }
		}
		  
		[XmlAttribute("InvCreatedOn")]
		[Bindable(true)]
		public DateTime? InvCreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.InvCreatedOn); }
			set { SetColumnValue(Columns.InvCreatedOn, value); }
		}
		  
		[XmlAttribute("QtyInTo")]
		[Bindable(true)]
		public int? QtyInTo 
		{
			get { return GetColumnValue<int?>(Columns.QtyInTo); }
			set { SetColumnValue(Columns.QtyInTo, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblMeterInventoryDetailCollection TblMeterInventoryDetailRecords()
		{
			return new SmartCBSDataAccess.TblMeterInventoryDetailCollection().Where(TblMeterInventoryDetail.Columns.MeterInventoryID, MeterInventoryID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblMeterInventoryMaster
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterInventoryMaster
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.InvCreatedBy); }
			set { SetColumnValue("InvCreatedBy", value.EmployeeID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varInvCreatedBy,DateTime? varInvCreatedOn,int? varQtyInTo,int? varBranchID,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblMeterInventoryMaster item = new TblMeterInventoryMaster();
			
			item.InvCreatedBy = varInvCreatedBy;
			
			item.InvCreatedOn = varInvCreatedOn;
			
			item.QtyInTo = varQtyInTo;
			
			item.BranchID = varBranchID;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMeterInventoryID,int? varInvCreatedBy,DateTime? varInvCreatedOn,int? varQtyInTo,int? varBranchID,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblMeterInventoryMaster item = new TblMeterInventoryMaster();
			
				item.MeterInventoryID = varMeterInventoryID;
			
				item.InvCreatedBy = varInvCreatedBy;
			
				item.InvCreatedOn = varInvCreatedOn;
			
				item.QtyInTo = varQtyInTo;
			
				item.BranchID = varBranchID;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MeterInventoryIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn InvCreatedByColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn InvCreatedOnColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn QtyInToColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MeterInventoryID = @"MeterInventoryID";
			 public static string InvCreatedBy = @"InvCreatedBy";
			 public static string InvCreatedOn = @"InvCreatedOn";
			 public static string QtyInTo = @"QtyInTo";
			 public static string BranchID = @"BranchID";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
