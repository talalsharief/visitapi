using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwPMTChart class.
    /// </summary>
    [Serializable]
    public partial class VwPMTChartCollection : ReadOnlyList<VwPMTChart, VwPMTChartCollection>
    {        
        public VwPMTChartCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwPMTChart view.
    /// </summary>
    [Serializable]
    public partial class VwPMTChart : ReadOnlyRecord<VwPMTChart>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwPMTChart", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarPmtid = new TableSchema.TableColumn(schema);
                colvarPmtid.ColumnName = "PMTID";
                colvarPmtid.DataType = DbType.Int32;
                colvarPmtid.MaxLength = 0;
                colvarPmtid.AutoIncrement = false;
                colvarPmtid.IsNullable = false;
                colvarPmtid.IsPrimaryKey = false;
                colvarPmtid.IsForeignKey = false;
                colvarPmtid.IsReadOnly = false;
                
                schema.Columns.Add(colvarPmtid);
                
                TableSchema.TableColumn colvarPMTNo = new TableSchema.TableColumn(schema);
                colvarPMTNo.ColumnName = "PMTNo";
                colvarPMTNo.DataType = DbType.AnsiString;
                colvarPMTNo.MaxLength = 50;
                colvarPMTNo.AutoIncrement = false;
                colvarPMTNo.IsNullable = true;
                colvarPMTNo.IsPrimaryKey = false;
                colvarPMTNo.IsForeignKey = false;
                colvarPMTNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTNo);
                
                TableSchema.TableColumn colvarPMTCode = new TableSchema.TableColumn(schema);
                colvarPMTCode.ColumnName = "PMTCode";
                colvarPMTCode.DataType = DbType.AnsiString;
                colvarPMTCode.MaxLength = 50;
                colvarPMTCode.AutoIncrement = false;
                colvarPMTCode.IsNullable = true;
                colvarPMTCode.IsPrimaryKey = false;
                colvarPMTCode.IsForeignKey = false;
                colvarPMTCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTCode);
                
                TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
                colvarCreatedBy.ColumnName = "CreatedBy";
                colvarCreatedBy.DataType = DbType.Int32;
                colvarCreatedBy.MaxLength = 0;
                colvarCreatedBy.AutoIncrement = false;
                colvarCreatedBy.IsNullable = true;
                colvarCreatedBy.IsPrimaryKey = false;
                colvarCreatedBy.IsForeignKey = false;
                colvarCreatedBy.IsReadOnly = false;
                
                schema.Columns.Add(colvarCreatedBy);
                
                TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
                colvarModifiedBy.ColumnName = "ModifiedBy";
                colvarModifiedBy.DataType = DbType.Int32;
                colvarModifiedBy.MaxLength = 0;
                colvarModifiedBy.AutoIncrement = false;
                colvarModifiedBy.IsNullable = true;
                colvarModifiedBy.IsPrimaryKey = false;
                colvarModifiedBy.IsForeignKey = false;
                colvarModifiedBy.IsReadOnly = false;
                
                schema.Columns.Add(colvarModifiedBy);
                
                TableSchema.TableColumn colvarMeterNo = new TableSchema.TableColumn(schema);
                colvarMeterNo.ColumnName = "MeterNo";
                colvarMeterNo.DataType = DbType.AnsiString;
                colvarMeterNo.MaxLength = -1;
                colvarMeterNo.AutoIncrement = false;
                colvarMeterNo.IsNullable = true;
                colvarMeterNo.IsPrimaryKey = false;
                colvarMeterNo.IsForeignKey = false;
                colvarMeterNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterNo);
                
                TableSchema.TableColumn colvarPMTStatusID = new TableSchema.TableColumn(schema);
                colvarPMTStatusID.ColumnName = "PMTStatusID";
                colvarPMTStatusID.DataType = DbType.Int32;
                colvarPMTStatusID.MaxLength = 0;
                colvarPMTStatusID.AutoIncrement = false;
                colvarPMTStatusID.IsNullable = false;
                colvarPMTStatusID.IsPrimaryKey = false;
                colvarPMTStatusID.IsForeignKey = false;
                colvarPMTStatusID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTStatusID);
                
                TableSchema.TableColumn colvarPMTStatusName = new TableSchema.TableColumn(schema);
                colvarPMTStatusName.ColumnName = "PMTStatusName";
                colvarPMTStatusName.DataType = DbType.AnsiString;
                colvarPMTStatusName.MaxLength = 50;
                colvarPMTStatusName.AutoIncrement = false;
                colvarPMTStatusName.IsNullable = true;
                colvarPMTStatusName.IsPrimaryKey = false;
                colvarPMTStatusName.IsForeignKey = false;
                colvarPMTStatusName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPMTStatusName);
                
                TableSchema.TableColumn colvarIssueID = new TableSchema.TableColumn(schema);
                colvarIssueID.ColumnName = "IssueID";
                colvarIssueID.DataType = DbType.Int32;
                colvarIssueID.MaxLength = 0;
                colvarIssueID.AutoIncrement = false;
                colvarIssueID.IsNullable = false;
                colvarIssueID.IsPrimaryKey = false;
                colvarIssueID.IsForeignKey = false;
                colvarIssueID.IsReadOnly = false;
                
                schema.Columns.Add(colvarIssueID);
                
                TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
                colvarMeterID.ColumnName = "MeterID";
                colvarMeterID.DataType = DbType.Int32;
                colvarMeterID.MaxLength = 0;
                colvarMeterID.AutoIncrement = false;
                colvarMeterID.IsNullable = true;
                colvarMeterID.IsPrimaryKey = false;
                colvarMeterID.IsForeignKey = false;
                colvarMeterID.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterID);
                
                TableSchema.TableColumn colvarNewConnectionID = new TableSchema.TableColumn(schema);
                colvarNewConnectionID.ColumnName = "NewConnectionID";
                colvarNewConnectionID.DataType = DbType.Int32;
                colvarNewConnectionID.MaxLength = 0;
                colvarNewConnectionID.AutoIncrement = false;
                colvarNewConnectionID.IsNullable = false;
                colvarNewConnectionID.IsPrimaryKey = false;
                colvarNewConnectionID.IsForeignKey = false;
                colvarNewConnectionID.IsReadOnly = false;
                
                schema.Columns.Add(colvarNewConnectionID);
                
                TableSchema.TableColumn colvarTotalLoadrequired = new TableSchema.TableColumn(schema);
                colvarTotalLoadrequired.ColumnName = "TotalLoadrequired";
                colvarTotalLoadrequired.DataType = DbType.Int32;
                colvarTotalLoadrequired.MaxLength = 0;
                colvarTotalLoadrequired.AutoIncrement = false;
                colvarTotalLoadrequired.IsNullable = true;
                colvarTotalLoadrequired.IsPrimaryKey = false;
                colvarTotalLoadrequired.IsForeignKey = false;
                colvarTotalLoadrequired.IsReadOnly = false;
                
                schema.Columns.Add(colvarTotalLoadrequired);
                
                TableSchema.TableColumn colvarPremisesDetailID = new TableSchema.TableColumn(schema);
                colvarPremisesDetailID.ColumnName = "PremisesDetailID";
                colvarPremisesDetailID.DataType = DbType.Int32;
                colvarPremisesDetailID.MaxLength = 0;
                colvarPremisesDetailID.AutoIncrement = false;
                colvarPremisesDetailID.IsNullable = false;
                colvarPremisesDetailID.IsPrimaryKey = false;
                colvarPremisesDetailID.IsForeignKey = false;
                colvarPremisesDetailID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPremisesDetailID);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwPMTChart",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwPMTChart()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwPMTChart(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwPMTChart(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwPMTChart(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Pmtid")]
        [Bindable(true)]
        public int Pmtid 
	    {
		    get
		    {
			    return GetColumnValue<int>("PMTID");
		    }
            set 
		    {
			    SetColumnValue("PMTID", value);
            }
        }
	      
        [XmlAttribute("PMTNo")]
        [Bindable(true)]
        public string PMTNo 
	    {
		    get
		    {
			    return GetColumnValue<string>("PMTNo");
		    }
            set 
		    {
			    SetColumnValue("PMTNo", value);
            }
        }
	      
        [XmlAttribute("PMTCode")]
        [Bindable(true)]
        public string PMTCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("PMTCode");
		    }
            set 
		    {
			    SetColumnValue("PMTCode", value);
            }
        }
	      
        [XmlAttribute("CreatedBy")]
        [Bindable(true)]
        public int? CreatedBy 
	    {
		    get
		    {
			    return GetColumnValue<int?>("CreatedBy");
		    }
            set 
		    {
			    SetColumnValue("CreatedBy", value);
            }
        }
	      
        [XmlAttribute("ModifiedBy")]
        [Bindable(true)]
        public int? ModifiedBy 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ModifiedBy");
		    }
            set 
		    {
			    SetColumnValue("ModifiedBy", value);
            }
        }
	      
        [XmlAttribute("MeterNo")]
        [Bindable(true)]
        public string MeterNo 
	    {
		    get
		    {
			    return GetColumnValue<string>("MeterNo");
		    }
            set 
		    {
			    SetColumnValue("MeterNo", value);
            }
        }
	      
        [XmlAttribute("PMTStatusID")]
        [Bindable(true)]
        public int PMTStatusID 
	    {
		    get
		    {
			    return GetColumnValue<int>("PMTStatusID");
		    }
            set 
		    {
			    SetColumnValue("PMTStatusID", value);
            }
        }
	      
        [XmlAttribute("PMTStatusName")]
        [Bindable(true)]
        public string PMTStatusName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PMTStatusName");
		    }
            set 
		    {
			    SetColumnValue("PMTStatusName", value);
            }
        }
	      
        [XmlAttribute("IssueID")]
        [Bindable(true)]
        public int IssueID 
	    {
		    get
		    {
			    return GetColumnValue<int>("IssueID");
		    }
            set 
		    {
			    SetColumnValue("IssueID", value);
            }
        }
	      
        [XmlAttribute("MeterID")]
        [Bindable(true)]
        public int? MeterID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("MeterID");
		    }
            set 
		    {
			    SetColumnValue("MeterID", value);
            }
        }
	      
        [XmlAttribute("NewConnectionID")]
        [Bindable(true)]
        public int NewConnectionID 
	    {
		    get
		    {
			    return GetColumnValue<int>("NewConnectionID");
		    }
            set 
		    {
			    SetColumnValue("NewConnectionID", value);
            }
        }
	      
        [XmlAttribute("TotalLoadrequired")]
        [Bindable(true)]
        public int? TotalLoadrequired 
	    {
		    get
		    {
			    return GetColumnValue<int?>("TotalLoadrequired");
		    }
            set 
		    {
			    SetColumnValue("TotalLoadrequired", value);
            }
        }
	      
        [XmlAttribute("PremisesDetailID")]
        [Bindable(true)]
        public int PremisesDetailID 
	    {
		    get
		    {
			    return GetColumnValue<int>("PremisesDetailID");
		    }
            set 
		    {
			    SetColumnValue("PremisesDetailID", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Pmtid = @"PMTID";
            
            public static string PMTNo = @"PMTNo";
            
            public static string PMTCode = @"PMTCode";
            
            public static string CreatedBy = @"CreatedBy";
            
            public static string ModifiedBy = @"ModifiedBy";
            
            public static string MeterNo = @"MeterNo";
            
            public static string PMTStatusID = @"PMTStatusID";
            
            public static string PMTStatusName = @"PMTStatusName";
            
            public static string IssueID = @"IssueID";
            
            public static string MeterID = @"MeterID";
            
            public static string NewConnectionID = @"NewConnectionID";
            
            public static string TotalLoadrequired = @"TotalLoadrequired";
            
            public static string PremisesDetailID = @"PremisesDetailID";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
