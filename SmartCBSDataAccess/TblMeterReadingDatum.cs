using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeterReadingDatum class.
	/// </summary>
    [Serializable]
	public partial class TblMeterReadingDatumCollection : ActiveList<TblMeterReadingDatum, TblMeterReadingDatumCollection>
	{	   
		public TblMeterReadingDatumCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterReadingDatumCollection</returns>
		public TblMeterReadingDatumCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeterReadingDatum o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeterReadingData table.
	/// </summary>
	[Serializable]
	public partial class TblMeterReadingDatum : ActiveRecord<TblMeterReadingDatum>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeterReadingDatum()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeterReadingDatum(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeterReadingDatum(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeterReadingDatum(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeterReadingData", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDataID = new TableSchema.TableColumn(schema);
				colvarDataID.ColumnName = "DataID";
				colvarDataID.DataType = DbType.Int32;
				colvarDataID.MaxLength = 0;
				colvarDataID.AutoIncrement = true;
				colvarDataID.IsNullable = false;
				colvarDataID.IsPrimaryKey = true;
				colvarDataID.IsForeignKey = false;
				colvarDataID.IsReadOnly = false;
				colvarDataID.DefaultSetting = @"";
				colvarDataID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDataID);
				
				TableSchema.TableColumn colvarMeterNo = new TableSchema.TableColumn(schema);
				colvarMeterNo.ColumnName = "MeterNo";
				colvarMeterNo.DataType = DbType.AnsiString;
				colvarMeterNo.MaxLength = 100;
				colvarMeterNo.AutoIncrement = false;
				colvarMeterNo.IsNullable = true;
				colvarMeterNo.IsPrimaryKey = false;
				colvarMeterNo.IsForeignKey = false;
				colvarMeterNo.IsReadOnly = false;
				colvarMeterNo.DefaultSetting = @"";
				colvarMeterNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterNo);
				
				TableSchema.TableColumn colvarMeterReadingDate = new TableSchema.TableColumn(schema);
				colvarMeterReadingDate.ColumnName = "MeterReadingDate";
				colvarMeterReadingDate.DataType = DbType.DateTime;
				colvarMeterReadingDate.MaxLength = 0;
				colvarMeterReadingDate.AutoIncrement = false;
				colvarMeterReadingDate.IsNullable = true;
				colvarMeterReadingDate.IsPrimaryKey = false;
				colvarMeterReadingDate.IsForeignKey = false;
				colvarMeterReadingDate.IsReadOnly = false;
				colvarMeterReadingDate.DefaultSetting = @"";
				colvarMeterReadingDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterReadingDate);
				
				TableSchema.TableColumn colvarMeterReading = new TableSchema.TableColumn(schema);
				colvarMeterReading.ColumnName = "MeterReading";
				colvarMeterReading.DataType = DbType.Decimal;
				colvarMeterReading.MaxLength = 0;
				colvarMeterReading.AutoIncrement = false;
				colvarMeterReading.IsNullable = true;
				colvarMeterReading.IsPrimaryKey = false;
				colvarMeterReading.IsForeignKey = false;
				colvarMeterReading.IsReadOnly = false;
				colvarMeterReading.DefaultSetting = @"";
				colvarMeterReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterReading);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = 100;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarApprovalStatusID = new TableSchema.TableColumn(schema);
				colvarApprovalStatusID.ColumnName = "ApprovalStatusID";
				colvarApprovalStatusID.DataType = DbType.Int32;
				colvarApprovalStatusID.MaxLength = 0;
				colvarApprovalStatusID.AutoIncrement = false;
				colvarApprovalStatusID.IsNullable = true;
				colvarApprovalStatusID.IsPrimaryKey = false;
				colvarApprovalStatusID.IsForeignKey = true;
				colvarApprovalStatusID.IsReadOnly = false;
				colvarApprovalStatusID.DefaultSetting = @"";
				
					colvarApprovalStatusID.ForeignKeyTableName = "TblApprovalStatus";
				schema.Columns.Add(colvarApprovalStatusID);
				
				TableSchema.TableColumn colvarUploadedBy = new TableSchema.TableColumn(schema);
				colvarUploadedBy.ColumnName = "UploadedBy";
				colvarUploadedBy.DataType = DbType.Int32;
				colvarUploadedBy.MaxLength = 0;
				colvarUploadedBy.AutoIncrement = false;
				colvarUploadedBy.IsNullable = true;
				colvarUploadedBy.IsPrimaryKey = false;
				colvarUploadedBy.IsForeignKey = true;
				colvarUploadedBy.IsReadOnly = false;
				colvarUploadedBy.DefaultSetting = @"";
				
					colvarUploadedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarUploadedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarMonth = new TableSchema.TableColumn(schema);
				colvarMonth.ColumnName = "Month";
				colvarMonth.DataType = DbType.AnsiString;
				colvarMonth.MaxLength = 50;
				colvarMonth.AutoIncrement = false;
				colvarMonth.IsNullable = true;
				colvarMonth.IsPrimaryKey = false;
				colvarMonth.IsForeignKey = false;
				colvarMonth.IsReadOnly = false;
				colvarMonth.DefaultSetting = @"";
				colvarMonth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonth);
				
				TableSchema.TableColumn colvarYear = new TableSchema.TableColumn(schema);
				colvarYear.ColumnName = "Year";
				colvarYear.DataType = DbType.AnsiString;
				colvarYear.MaxLength = 50;
				colvarYear.AutoIncrement = false;
				colvarYear.IsNullable = true;
				colvarYear.IsPrimaryKey = false;
				colvarYear.IsForeignKey = false;
				colvarYear.IsReadOnly = false;
				colvarYear.DefaultSetting = @"";
				colvarYear.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYear);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = true;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				
					colvarConsumerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarMultiplyingFactor = new TableSchema.TableColumn(schema);
				colvarMultiplyingFactor.ColumnName = "MultiplyingFactor";
				colvarMultiplyingFactor.DataType = DbType.Int32;
				colvarMultiplyingFactor.MaxLength = 0;
				colvarMultiplyingFactor.AutoIncrement = false;
				colvarMultiplyingFactor.IsNullable = true;
				colvarMultiplyingFactor.IsPrimaryKey = false;
				colvarMultiplyingFactor.IsForeignKey = false;
				colvarMultiplyingFactor.IsReadOnly = false;
				colvarMultiplyingFactor.DefaultSetting = @"";
				colvarMultiplyingFactor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiplyingFactor);
				
				TableSchema.TableColumn colvarCLoad = new TableSchema.TableColumn(schema);
				colvarCLoad.ColumnName = "CLoad";
				colvarCLoad.DataType = DbType.Int32;
				colvarCLoad.MaxLength = 0;
				colvarCLoad.AutoIncrement = false;
				colvarCLoad.IsNullable = true;
				colvarCLoad.IsPrimaryKey = false;
				colvarCLoad.IsForeignKey = false;
				colvarCLoad.IsReadOnly = false;
				colvarCLoad.DefaultSetting = @"";
				colvarCLoad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCLoad);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeterReadingData",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DataID")]
		[Bindable(true)]
		public int DataID 
		{
			get { return GetColumnValue<int>(Columns.DataID); }
			set { SetColumnValue(Columns.DataID, value); }
		}
		  
		[XmlAttribute("MeterNo")]
		[Bindable(true)]
		public string MeterNo 
		{
			get { return GetColumnValue<string>(Columns.MeterNo); }
			set { SetColumnValue(Columns.MeterNo, value); }
		}
		  
		[XmlAttribute("MeterReadingDate")]
		[Bindable(true)]
		public DateTime? MeterReadingDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.MeterReadingDate); }
			set { SetColumnValue(Columns.MeterReadingDate, value); }
		}
		  
		[XmlAttribute("MeterReading")]
		[Bindable(true)]
		public decimal? MeterReading 
		{
			get { return GetColumnValue<decimal?>(Columns.MeterReading); }
			set { SetColumnValue(Columns.MeterReading, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("ApprovalStatusID")]
		[Bindable(true)]
		public int? ApprovalStatusID 
		{
			get { return GetColumnValue<int?>(Columns.ApprovalStatusID); }
			set { SetColumnValue(Columns.ApprovalStatusID, value); }
		}
		  
		[XmlAttribute("UploadedBy")]
		[Bindable(true)]
		public int? UploadedBy 
		{
			get { return GetColumnValue<int?>(Columns.UploadedBy); }
			set { SetColumnValue(Columns.UploadedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("Month")]
		[Bindable(true)]
		public string Month 
		{
			get { return GetColumnValue<string>(Columns.Month); }
			set { SetColumnValue(Columns.Month, value); }
		}
		  
		[XmlAttribute("Year")]
		[Bindable(true)]
		public string Year 
		{
			get { return GetColumnValue<string>(Columns.Year); }
			set { SetColumnValue(Columns.Year, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("MultiplyingFactor")]
		[Bindable(true)]
		public int? MultiplyingFactor 
		{
			get { return GetColumnValue<int?>(Columns.MultiplyingFactor); }
			set { SetColumnValue(Columns.MultiplyingFactor, value); }
		}
		  
		[XmlAttribute("CLoad")]
		[Bindable(true)]
		public int? CLoad 
		{
			get { return GetColumnValue<int?>(Columns.CLoad); }
			set { SetColumnValue(Columns.CLoad, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblDupMeterReadingCollection TblDupMeterReadingRecords()
		{
			return new SmartCBSDataAccess.TblDupMeterReadingCollection().Where(TblDupMeterReading.Columns.DataID, DataID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblApprovalStatus ActiveRecord object related to this TblMeterReadingDatum
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblApprovalStatus TblApprovalStatus
		{
			get { return SmartCBSDataAccess.TblApprovalStatus.FetchByID(this.ApprovalStatusID); }
			set { SetColumnValue("ApprovalStatusID", value.ApprovalID); }
		}
		
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblMeterReadingDatum
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.ConsumerID); }
			set { SetColumnValue("ConsumerID", value.CunsumerID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterReadingDatum
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.UploadedBy); }
			set { SetColumnValue("UploadedBy", value.EmployeeID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMeterNo,DateTime? varMeterReadingDate,decimal? varMeterReading,string varRemarks,int? varApprovalStatusID,int? varUploadedBy,DateTime? varCreatedOn,DateTime? varModifiedOn,string varMonth,string varYear,int? varConsumerID,int? varMultiplyingFactor,int? varCLoad)
		{
			TblMeterReadingDatum item = new TblMeterReadingDatum();
			
			item.MeterNo = varMeterNo;
			
			item.MeterReadingDate = varMeterReadingDate;
			
			item.MeterReading = varMeterReading;
			
			item.Remarks = varRemarks;
			
			item.ApprovalStatusID = varApprovalStatusID;
			
			item.UploadedBy = varUploadedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.Month = varMonth;
			
			item.Year = varYear;
			
			item.ConsumerID = varConsumerID;
			
			item.MultiplyingFactor = varMultiplyingFactor;
			
			item.CLoad = varCLoad;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDataID,string varMeterNo,DateTime? varMeterReadingDate,decimal? varMeterReading,string varRemarks,int? varApprovalStatusID,int? varUploadedBy,DateTime? varCreatedOn,DateTime? varModifiedOn,string varMonth,string varYear,int? varConsumerID,int? varMultiplyingFactor,int? varCLoad)
		{
			TblMeterReadingDatum item = new TblMeterReadingDatum();
			
				item.DataID = varDataID;
			
				item.MeterNo = varMeterNo;
			
				item.MeterReadingDate = varMeterReadingDate;
			
				item.MeterReading = varMeterReading;
			
				item.Remarks = varRemarks;
			
				item.ApprovalStatusID = varApprovalStatusID;
			
				item.UploadedBy = varUploadedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.Month = varMonth;
			
				item.Year = varYear;
			
				item.ConsumerID = varConsumerID;
			
				item.MultiplyingFactor = varMultiplyingFactor;
			
				item.CLoad = varCLoad;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DataIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterNoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ApprovalStatusIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UploadedByColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn MonthColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn YearColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiplyingFactorColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CLoadColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DataID = @"DataID";
			 public static string MeterNo = @"MeterNo";
			 public static string MeterReadingDate = @"MeterReadingDate";
			 public static string MeterReading = @"MeterReading";
			 public static string Remarks = @"Remarks";
			 public static string ApprovalStatusID = @"ApprovalStatusID";
			 public static string UploadedBy = @"UploadedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string Month = @"Month";
			 public static string Year = @"Year";
			 public static string ConsumerID = @"ConsumerID";
			 public static string MultiplyingFactor = @"MultiplyingFactor";
			 public static string CLoad = @"CLoad";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
