using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblPMTReading class.
	/// </summary>
    [Serializable]
	public partial class TblPMTReadingCollection : ActiveList<TblPMTReading, TblPMTReadingCollection>
	{	   
		public TblPMTReadingCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblPMTReadingCollection</returns>
		public TblPMTReadingCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblPMTReading o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblPMTReading table.
	/// </summary>
	[Serializable]
	public partial class TblPMTReading : ActiveRecord<TblPMTReading>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblPMTReading()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblPMTReading(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblPMTReading(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblPMTReading(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblPMTReading", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPMTReadingID = new TableSchema.TableColumn(schema);
				colvarPMTReadingID.ColumnName = "PMTReadingID";
				colvarPMTReadingID.DataType = DbType.Int32;
				colvarPMTReadingID.MaxLength = 0;
				colvarPMTReadingID.AutoIncrement = true;
				colvarPMTReadingID.IsNullable = false;
				colvarPMTReadingID.IsPrimaryKey = true;
				colvarPMTReadingID.IsForeignKey = false;
				colvarPMTReadingID.IsReadOnly = false;
				colvarPMTReadingID.DefaultSetting = @"";
				colvarPMTReadingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMTReadingID);
				
				TableSchema.TableColumn colvarPmtid = new TableSchema.TableColumn(schema);
				colvarPmtid.ColumnName = "PMTID";
				colvarPmtid.DataType = DbType.Int32;
				colvarPmtid.MaxLength = 0;
				colvarPmtid.AutoIncrement = false;
				colvarPmtid.IsNullable = true;
				colvarPmtid.IsPrimaryKey = false;
				colvarPmtid.IsForeignKey = true;
				colvarPmtid.IsReadOnly = false;
				colvarPmtid.DefaultSetting = @"";
				
					colvarPmtid.ForeignKeyTableName = "TblPMT";
				schema.Columns.Add(colvarPmtid);
				
				TableSchema.TableColumn colvarPMTReadModeID = new TableSchema.TableColumn(schema);
				colvarPMTReadModeID.ColumnName = "PMTReadModeID";
				colvarPMTReadModeID.DataType = DbType.Int32;
				colvarPMTReadModeID.MaxLength = 0;
				colvarPMTReadModeID.AutoIncrement = false;
				colvarPMTReadModeID.IsNullable = true;
				colvarPMTReadModeID.IsPrimaryKey = false;
				colvarPMTReadModeID.IsForeignKey = true;
				colvarPMTReadModeID.IsReadOnly = false;
				colvarPMTReadModeID.DefaultSetting = @"";
				
					colvarPMTReadModeID.ForeignKeyTableName = "TblPMTReadMode";
				schema.Columns.Add(colvarPMTReadModeID);
				
				TableSchema.TableColumn colvarPMTReadingMonth = new TableSchema.TableColumn(schema);
				colvarPMTReadingMonth.ColumnName = "PMTReadingMonth";
				colvarPMTReadingMonth.DataType = DbType.AnsiString;
				colvarPMTReadingMonth.MaxLength = 50;
				colvarPMTReadingMonth.AutoIncrement = false;
				colvarPMTReadingMonth.IsNullable = true;
				colvarPMTReadingMonth.IsPrimaryKey = false;
				colvarPMTReadingMonth.IsForeignKey = false;
				colvarPMTReadingMonth.IsReadOnly = false;
				colvarPMTReadingMonth.DefaultSetting = @"";
				colvarPMTReadingMonth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMTReadingMonth);
				
				TableSchema.TableColumn colvarPMTReadingYear = new TableSchema.TableColumn(schema);
				colvarPMTReadingYear.ColumnName = "PMTReadingYear";
				colvarPMTReadingYear.DataType = DbType.AnsiString;
				colvarPMTReadingYear.MaxLength = 50;
				colvarPMTReadingYear.AutoIncrement = false;
				colvarPMTReadingYear.IsNullable = true;
				colvarPMTReadingYear.IsPrimaryKey = false;
				colvarPMTReadingYear.IsForeignKey = false;
				colvarPMTReadingYear.IsReadOnly = false;
				colvarPMTReadingYear.DefaultSetting = @"";
				colvarPMTReadingYear.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMTReadingYear);
				
				TableSchema.TableColumn colvarPreviousReading = new TableSchema.TableColumn(schema);
				colvarPreviousReading.ColumnName = "PreviousReading";
				colvarPreviousReading.DataType = DbType.Decimal;
				colvarPreviousReading.MaxLength = 0;
				colvarPreviousReading.AutoIncrement = false;
				colvarPreviousReading.IsNullable = true;
				colvarPreviousReading.IsPrimaryKey = false;
				colvarPreviousReading.IsForeignKey = false;
				colvarPreviousReading.IsReadOnly = false;
				colvarPreviousReading.DefaultSetting = @"";
				colvarPreviousReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreviousReading);
				
				TableSchema.TableColumn colvarCurrentReading = new TableSchema.TableColumn(schema);
				colvarCurrentReading.ColumnName = "CurrentReading";
				colvarCurrentReading.DataType = DbType.Decimal;
				colvarCurrentReading.MaxLength = 0;
				colvarCurrentReading.AutoIncrement = false;
				colvarCurrentReading.IsNullable = true;
				colvarCurrentReading.IsPrimaryKey = false;
				colvarCurrentReading.IsForeignKey = false;
				colvarCurrentReading.IsReadOnly = false;
				colvarCurrentReading.DefaultSetting = @"";
				colvarCurrentReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentReading);
				
				TableSchema.TableColumn colvarTotalUnits = new TableSchema.TableColumn(schema);
				colvarTotalUnits.ColumnName = "TotalUnits";
				colvarTotalUnits.DataType = DbType.Decimal;
				colvarTotalUnits.MaxLength = 0;
				colvarTotalUnits.AutoIncrement = false;
				colvarTotalUnits.IsNullable = true;
				colvarTotalUnits.IsPrimaryKey = false;
				colvarTotalUnits.IsForeignKey = false;
				colvarTotalUnits.IsReadOnly = false;
				colvarTotalUnits.DefaultSetting = @"";
				colvarTotalUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalUnits);
				
				TableSchema.TableColumn colvarMultiplyingFactor = new TableSchema.TableColumn(schema);
				colvarMultiplyingFactor.ColumnName = "MultiplyingFactor";
				colvarMultiplyingFactor.DataType = DbType.Decimal;
				colvarMultiplyingFactor.MaxLength = 0;
				colvarMultiplyingFactor.AutoIncrement = false;
				colvarMultiplyingFactor.IsNullable = true;
				colvarMultiplyingFactor.IsPrimaryKey = false;
				colvarMultiplyingFactor.IsForeignKey = false;
				colvarMultiplyingFactor.IsReadOnly = false;
				colvarMultiplyingFactor.DefaultSetting = @"";
				colvarMultiplyingFactor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiplyingFactor);
				
				TableSchema.TableColumn colvarUnitsConsumed = new TableSchema.TableColumn(schema);
				colvarUnitsConsumed.ColumnName = "UnitsConsumed";
				colvarUnitsConsumed.DataType = DbType.Decimal;
				colvarUnitsConsumed.MaxLength = 0;
				colvarUnitsConsumed.AutoIncrement = false;
				colvarUnitsConsumed.IsNullable = true;
				colvarUnitsConsumed.IsPrimaryKey = false;
				colvarUnitsConsumed.IsForeignKey = false;
				colvarUnitsConsumed.IsReadOnly = false;
				colvarUnitsConsumed.DefaultSetting = @"";
				colvarUnitsConsumed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitsConsumed);
				
				TableSchema.TableColumn colvarPMTReadingDate = new TableSchema.TableColumn(schema);
				colvarPMTReadingDate.ColumnName = "PMTReadingDate";
				colvarPMTReadingDate.DataType = DbType.DateTime;
				colvarPMTReadingDate.MaxLength = 0;
				colvarPMTReadingDate.AutoIncrement = false;
				colvarPMTReadingDate.IsNullable = true;
				colvarPMTReadingDate.IsPrimaryKey = false;
				colvarPMTReadingDate.IsForeignKey = false;
				colvarPMTReadingDate.IsReadOnly = false;
				colvarPMTReadingDate.DefaultSetting = @"";
				colvarPMTReadingDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMTReadingDate);
				
				TableSchema.TableColumn colvarPMTReadBy = new TableSchema.TableColumn(schema);
				colvarPMTReadBy.ColumnName = "PMTReadBy";
				colvarPMTReadBy.DataType = DbType.Int32;
				colvarPMTReadBy.MaxLength = 0;
				colvarPMTReadBy.AutoIncrement = false;
				colvarPMTReadBy.IsNullable = true;
				colvarPMTReadBy.IsPrimaryKey = false;
				colvarPMTReadBy.IsForeignKey = true;
				colvarPMTReadBy.IsReadOnly = false;
				colvarPMTReadBy.DefaultSetting = @"";
				
					colvarPMTReadBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarPMTReadBy);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Int32;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Int32;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarPMTImage = new TableSchema.TableColumn(schema);
				colvarPMTImage.ColumnName = "PMTImage";
				colvarPMTImage.DataType = DbType.AnsiString;
				colvarPMTImage.MaxLength = 200;
				colvarPMTImage.AutoIncrement = false;
				colvarPMTImage.IsNullable = true;
				colvarPMTImage.IsPrimaryKey = false;
				colvarPMTImage.IsForeignKey = false;
				colvarPMTImage.IsReadOnly = false;
				colvarPMTImage.DefaultSetting = @"";
				colvarPMTImage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMTImage);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarReadingInsertedBy = new TableSchema.TableColumn(schema);
				colvarReadingInsertedBy.ColumnName = "ReadingInsertedBy";
				colvarReadingInsertedBy.DataType = DbType.Int32;
				colvarReadingInsertedBy.MaxLength = 0;
				colvarReadingInsertedBy.AutoIncrement = false;
				colvarReadingInsertedBy.IsNullable = true;
				colvarReadingInsertedBy.IsPrimaryKey = false;
				colvarReadingInsertedBy.IsForeignKey = true;
				colvarReadingInsertedBy.IsReadOnly = false;
				colvarReadingInsertedBy.DefaultSetting = @"";
				
					colvarReadingInsertedBy.ForeignKeyTableName = "UserLogin";
				schema.Columns.Add(colvarReadingInsertedBy);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblPMTReading",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PMTReadingID")]
		[Bindable(true)]
		public int PMTReadingID 
		{
			get { return GetColumnValue<int>(Columns.PMTReadingID); }
			set { SetColumnValue(Columns.PMTReadingID, value); }
		}
		  
		[XmlAttribute("Pmtid")]
		[Bindable(true)]
		public int? Pmtid 
		{
			get { return GetColumnValue<int?>(Columns.Pmtid); }
			set { SetColumnValue(Columns.Pmtid, value); }
		}
		  
		[XmlAttribute("PMTReadModeID")]
		[Bindable(true)]
		public int? PMTReadModeID 
		{
			get { return GetColumnValue<int?>(Columns.PMTReadModeID); }
			set { SetColumnValue(Columns.PMTReadModeID, value); }
		}
		  
		[XmlAttribute("PMTReadingMonth")]
		[Bindable(true)]
		public string PMTReadingMonth 
		{
			get { return GetColumnValue<string>(Columns.PMTReadingMonth); }
			set { SetColumnValue(Columns.PMTReadingMonth, value); }
		}
		  
		[XmlAttribute("PMTReadingYear")]
		[Bindable(true)]
		public string PMTReadingYear 
		{
			get { return GetColumnValue<string>(Columns.PMTReadingYear); }
			set { SetColumnValue(Columns.PMTReadingYear, value); }
		}
		  
		[XmlAttribute("PreviousReading")]
		[Bindable(true)]
		public decimal? PreviousReading 
		{
			get { return GetColumnValue<decimal?>(Columns.PreviousReading); }
			set { SetColumnValue(Columns.PreviousReading, value); }
		}
		  
		[XmlAttribute("CurrentReading")]
		[Bindable(true)]
		public decimal? CurrentReading 
		{
			get { return GetColumnValue<decimal?>(Columns.CurrentReading); }
			set { SetColumnValue(Columns.CurrentReading, value); }
		}
		  
		[XmlAttribute("TotalUnits")]
		[Bindable(true)]
		public decimal? TotalUnits 
		{
			get { return GetColumnValue<decimal?>(Columns.TotalUnits); }
			set { SetColumnValue(Columns.TotalUnits, value); }
		}
		  
		[XmlAttribute("MultiplyingFactor")]
		[Bindable(true)]
		public decimal? MultiplyingFactor 
		{
			get { return GetColumnValue<decimal?>(Columns.MultiplyingFactor); }
			set { SetColumnValue(Columns.MultiplyingFactor, value); }
		}
		  
		[XmlAttribute("UnitsConsumed")]
		[Bindable(true)]
		public decimal? UnitsConsumed 
		{
			get { return GetColumnValue<decimal?>(Columns.UnitsConsumed); }
			set { SetColumnValue(Columns.UnitsConsumed, value); }
		}
		  
		[XmlAttribute("PMTReadingDate")]
		[Bindable(true)]
		public DateTime? PMTReadingDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PMTReadingDate); }
			set { SetColumnValue(Columns.PMTReadingDate, value); }
		}
		  
		[XmlAttribute("PMTReadBy")]
		[Bindable(true)]
		public int? PMTReadBy 
		{
			get { return GetColumnValue<int?>(Columns.PMTReadBy); }
			set { SetColumnValue(Columns.PMTReadBy, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public int? CreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public int? ModifiedBy 
		{
			get { return GetColumnValue<int?>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("PMTImage")]
		[Bindable(true)]
		public string PMTImage 
		{
			get { return GetColumnValue<string>(Columns.PMTImage); }
			set { SetColumnValue(Columns.PMTImage, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("ReadingInsertedBy")]
		[Bindable(true)]
		public int? ReadingInsertedBy 
		{
			get { return GetColumnValue<int?>(Columns.ReadingInsertedBy); }
			set { SetColumnValue(Columns.ReadingInsertedBy, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblPMTReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblPMTReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.PMTReadBy); }
			set { SetColumnValue("PMTReadBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblPMT ActiveRecord object related to this TblPMTReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblPMT TblPMT
		{
			get { return SmartCBSDataAccess.TblPMT.FetchByID(this.Pmtid); }
			set { SetColumnValue("PMTID", value.Pmtid); }
		}
		
		
		/// <summary>
		/// Returns a TblPMTReadMode ActiveRecord object related to this TblPMTReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblPMTReadMode TblPMTReadMode
		{
			get { return SmartCBSDataAccess.TblPMTReadMode.FetchByID(this.PMTReadModeID); }
			set { SetColumnValue("PMTReadModeID", value.PMTReadID); }
		}
		
		
		/// <summary>
		/// Returns a UserLogin ActiveRecord object related to this TblPMTReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.UserLogin UserLogin
		{
			get { return SmartCBSDataAccess.UserLogin.FetchByID(this.ReadingInsertedBy); }
			set { SetColumnValue("ReadingInsertedBy", value.UserLoginId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varPmtid,int? varPMTReadModeID,string varPMTReadingMonth,string varPMTReadingYear,decimal? varPreviousReading,decimal? varCurrentReading,decimal? varTotalUnits,decimal? varMultiplyingFactor,decimal? varUnitsConsumed,DateTime? varPMTReadingDate,int? varPMTReadBy,int? varCreatedBy,int? varModifiedBy,DateTime? varCreatedOn,DateTime? varModifiedOn,string varPMTImage,int? varBranchID,int? varReadingInsertedBy)
		{
			TblPMTReading item = new TblPMTReading();
			
			item.Pmtid = varPmtid;
			
			item.PMTReadModeID = varPMTReadModeID;
			
			item.PMTReadingMonth = varPMTReadingMonth;
			
			item.PMTReadingYear = varPMTReadingYear;
			
			item.PreviousReading = varPreviousReading;
			
			item.CurrentReading = varCurrentReading;
			
			item.TotalUnits = varTotalUnits;
			
			item.MultiplyingFactor = varMultiplyingFactor;
			
			item.UnitsConsumed = varUnitsConsumed;
			
			item.PMTReadingDate = varPMTReadingDate;
			
			item.PMTReadBy = varPMTReadBy;
			
			item.CreatedBy = varCreatedBy;
			
			item.ModifiedBy = varModifiedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.PMTImage = varPMTImage;
			
			item.BranchID = varBranchID;
			
			item.ReadingInsertedBy = varReadingInsertedBy;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPMTReadingID,int? varPmtid,int? varPMTReadModeID,string varPMTReadingMonth,string varPMTReadingYear,decimal? varPreviousReading,decimal? varCurrentReading,decimal? varTotalUnits,decimal? varMultiplyingFactor,decimal? varUnitsConsumed,DateTime? varPMTReadingDate,int? varPMTReadBy,int? varCreatedBy,int? varModifiedBy,DateTime? varCreatedOn,DateTime? varModifiedOn,string varPMTImage,int? varBranchID,int? varReadingInsertedBy)
		{
			TblPMTReading item = new TblPMTReading();
			
				item.PMTReadingID = varPMTReadingID;
			
				item.Pmtid = varPmtid;
			
				item.PMTReadModeID = varPMTReadModeID;
			
				item.PMTReadingMonth = varPMTReadingMonth;
			
				item.PMTReadingYear = varPMTReadingYear;
			
				item.PreviousReading = varPreviousReading;
			
				item.CurrentReading = varCurrentReading;
			
				item.TotalUnits = varTotalUnits;
			
				item.MultiplyingFactor = varMultiplyingFactor;
			
				item.UnitsConsumed = varUnitsConsumed;
			
				item.PMTReadingDate = varPMTReadingDate;
			
				item.PMTReadBy = varPMTReadBy;
			
				item.CreatedBy = varCreatedBy;
			
				item.ModifiedBy = varModifiedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.PMTImage = varPMTImage;
			
				item.BranchID = varBranchID;
			
				item.ReadingInsertedBy = varReadingInsertedBy;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PMTReadingIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PmtidColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PMTReadModeIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PMTReadingMonthColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PMTReadingYearColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PreviousReadingColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentReadingColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalUnitsColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiplyingFactorColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitsConsumedColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PMTReadingDateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn PMTReadByColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn PMTImageColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn ReadingInsertedByColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PMTReadingID = @"PMTReadingID";
			 public static string Pmtid = @"PMTID";
			 public static string PMTReadModeID = @"PMTReadModeID";
			 public static string PMTReadingMonth = @"PMTReadingMonth";
			 public static string PMTReadingYear = @"PMTReadingYear";
			 public static string PreviousReading = @"PreviousReading";
			 public static string CurrentReading = @"CurrentReading";
			 public static string TotalUnits = @"TotalUnits";
			 public static string MultiplyingFactor = @"MultiplyingFactor";
			 public static string UnitsConsumed = @"UnitsConsumed";
			 public static string PMTReadingDate = @"PMTReadingDate";
			 public static string PMTReadBy = @"PMTReadBy";
			 public static string CreatedBy = @"CreatedBy";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string PMTImage = @"PMTImage";
			 public static string BranchID = @"BranchID";
			 public static string ReadingInsertedBy = @"ReadingInsertedBy";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
