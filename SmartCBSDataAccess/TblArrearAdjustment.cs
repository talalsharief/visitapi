using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblArrearAdjustment class.
	/// </summary>
    [Serializable]
	public partial class TblArrearAdjustmentCollection : ActiveList<TblArrearAdjustment, TblArrearAdjustmentCollection>
	{	   
		public TblArrearAdjustmentCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblArrearAdjustmentCollection</returns>
		public TblArrearAdjustmentCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblArrearAdjustment o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblArrearAdjustment table.
	/// </summary>
	[Serializable]
	public partial class TblArrearAdjustment : ActiveRecord<TblArrearAdjustment>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblArrearAdjustment()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblArrearAdjustment(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblArrearAdjustment(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblArrearAdjustment(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblArrearAdjustment", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarArrearAdjustmentID = new TableSchema.TableColumn(schema);
				colvarArrearAdjustmentID.ColumnName = "ArrearAdjustmentID";
				colvarArrearAdjustmentID.DataType = DbType.Int32;
				colvarArrearAdjustmentID.MaxLength = 0;
				colvarArrearAdjustmentID.AutoIncrement = true;
				colvarArrearAdjustmentID.IsNullable = false;
				colvarArrearAdjustmentID.IsPrimaryKey = true;
				colvarArrearAdjustmentID.IsForeignKey = false;
				colvarArrearAdjustmentID.IsReadOnly = false;
				colvarArrearAdjustmentID.DefaultSetting = @"";
				colvarArrearAdjustmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrearAdjustmentID);
				
				TableSchema.TableColumn colvarPreviousAmount = new TableSchema.TableColumn(schema);
				colvarPreviousAmount.ColumnName = "PreviousAmount";
				colvarPreviousAmount.DataType = DbType.Decimal;
				colvarPreviousAmount.MaxLength = 0;
				colvarPreviousAmount.AutoIncrement = false;
				colvarPreviousAmount.IsNullable = true;
				colvarPreviousAmount.IsPrimaryKey = false;
				colvarPreviousAmount.IsForeignKey = false;
				colvarPreviousAmount.IsReadOnly = false;
				colvarPreviousAmount.DefaultSetting = @"";
				colvarPreviousAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreviousAmount);
				
				TableSchema.TableColumn colvarNewAmount = new TableSchema.TableColumn(schema);
				colvarNewAmount.ColumnName = "NewAmount";
				colvarNewAmount.DataType = DbType.Decimal;
				colvarNewAmount.MaxLength = 0;
				colvarNewAmount.AutoIncrement = false;
				colvarNewAmount.IsNullable = true;
				colvarNewAmount.IsPrimaryKey = false;
				colvarNewAmount.IsForeignKey = false;
				colvarNewAmount.IsReadOnly = false;
				colvarNewAmount.DefaultSetting = @"";
				colvarNewAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewAmount);
				
				TableSchema.TableColumn colvarArrearID = new TableSchema.TableColumn(schema);
				colvarArrearID.ColumnName = "ArrearID";
				colvarArrearID.DataType = DbType.Int32;
				colvarArrearID.MaxLength = 0;
				colvarArrearID.AutoIncrement = false;
				colvarArrearID.IsNullable = true;
				colvarArrearID.IsPrimaryKey = false;
				colvarArrearID.IsForeignKey = true;
				colvarArrearID.IsReadOnly = false;
				colvarArrearID.DefaultSetting = @"";
				
					colvarArrearID.ForeignKeyTableName = "TblArrear";
				schema.Columns.Add(colvarArrearID);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = -1;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarIsApprove = new TableSchema.TableColumn(schema);
				colvarIsApprove.ColumnName = "IsApprove";
				colvarIsApprove.DataType = DbType.Boolean;
				colvarIsApprove.MaxLength = 0;
				colvarIsApprove.AutoIncrement = false;
				colvarIsApprove.IsNullable = true;
				colvarIsApprove.IsPrimaryKey = false;
				colvarIsApprove.IsForeignKey = false;
				colvarIsApprove.IsReadOnly = false;
				colvarIsApprove.DefaultSetting = @"";
				colvarIsApprove.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsApprove);
				
				TableSchema.TableColumn colvarIsPending = new TableSchema.TableColumn(schema);
				colvarIsPending.ColumnName = "IsPending";
				colvarIsPending.DataType = DbType.Boolean;
				colvarIsPending.MaxLength = 0;
				colvarIsPending.AutoIncrement = false;
				colvarIsPending.IsNullable = true;
				colvarIsPending.IsPrimaryKey = false;
				colvarIsPending.IsForeignKey = false;
				colvarIsPending.IsReadOnly = false;
				colvarIsPending.DefaultSetting = @"";
				colvarIsPending.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPending);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblArrearAdjustment",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ArrearAdjustmentID")]
		[Bindable(true)]
		public int ArrearAdjustmentID 
		{
			get { return GetColumnValue<int>(Columns.ArrearAdjustmentID); }
			set { SetColumnValue(Columns.ArrearAdjustmentID, value); }
		}
		  
		[XmlAttribute("PreviousAmount")]
		[Bindable(true)]
		public decimal? PreviousAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.PreviousAmount); }
			set { SetColumnValue(Columns.PreviousAmount, value); }
		}
		  
		[XmlAttribute("NewAmount")]
		[Bindable(true)]
		public decimal? NewAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.NewAmount); }
			set { SetColumnValue(Columns.NewAmount, value); }
		}
		  
		[XmlAttribute("ArrearID")]
		[Bindable(true)]
		public int? ArrearID 
		{
			get { return GetColumnValue<int?>(Columns.ArrearID); }
			set { SetColumnValue(Columns.ArrearID, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("IsApprove")]
		[Bindable(true)]
		public bool? IsApprove 
		{
			get { return GetColumnValue<bool?>(Columns.IsApprove); }
			set { SetColumnValue(Columns.IsApprove, value); }
		}
		  
		[XmlAttribute("IsPending")]
		[Bindable(true)]
		public bool? IsPending 
		{
			get { return GetColumnValue<bool?>(Columns.IsPending); }
			set { SetColumnValue(Columns.IsPending, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblArrear ActiveRecord object related to this TblArrearAdjustment
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblArrear TblArrear
		{
			get { return SmartCBSDataAccess.TblArrear.FetchByID(this.ArrearID); }
			set { SetColumnValue("ArrearID", value.ArrearID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal? varPreviousAmount,decimal? varNewAmount,int? varArrearID,DateTime? varCreatedOn,DateTime? varModifiedOn,bool? varIsActive,string varDescription,bool? varIsApprove,bool? varIsPending)
		{
			TblArrearAdjustment item = new TblArrearAdjustment();
			
			item.PreviousAmount = varPreviousAmount;
			
			item.NewAmount = varNewAmount;
			
			item.ArrearID = varArrearID;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.IsActive = varIsActive;
			
			item.Description = varDescription;
			
			item.IsApprove = varIsApprove;
			
			item.IsPending = varIsPending;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varArrearAdjustmentID,decimal? varPreviousAmount,decimal? varNewAmount,int? varArrearID,DateTime? varCreatedOn,DateTime? varModifiedOn,bool? varIsActive,string varDescription,bool? varIsApprove,bool? varIsPending)
		{
			TblArrearAdjustment item = new TblArrearAdjustment();
			
				item.ArrearAdjustmentID = varArrearAdjustmentID;
			
				item.PreviousAmount = varPreviousAmount;
			
				item.NewAmount = varNewAmount;
			
				item.ArrearID = varArrearID;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.IsActive = varIsActive;
			
				item.Description = varDescription;
			
				item.IsApprove = varIsApprove;
			
				item.IsPending = varIsPending;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ArrearAdjustmentIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PreviousAmountColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NewAmountColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ArrearIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IsApproveColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPendingColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ArrearAdjustmentID = @"ArrearAdjustmentID";
			 public static string PreviousAmount = @"PreviousAmount";
			 public static string NewAmount = @"NewAmount";
			 public static string ArrearID = @"ArrearID";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string IsActive = @"IsActive";
			 public static string Description = @"Description";
			 public static string IsApprove = @"IsApprove";
			 public static string IsPending = @"IsPending";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
