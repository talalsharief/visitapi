using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeterDefected class.
	/// </summary>
    [Serializable]
	public partial class TblMeterDefectedCollection : ActiveList<TblMeterDefected, TblMeterDefectedCollection>
	{	   
		public TblMeterDefectedCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterDefectedCollection</returns>
		public TblMeterDefectedCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeterDefected o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeterDefected table.
	/// </summary>
	[Serializable]
	public partial class TblMeterDefected : ActiveRecord<TblMeterDefected>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeterDefected()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeterDefected(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeterDefected(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeterDefected(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeterDefected", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMeterDefectedID = new TableSchema.TableColumn(schema);
				colvarMeterDefectedID.ColumnName = "MeterDefectedID";
				colvarMeterDefectedID.DataType = DbType.Int32;
				colvarMeterDefectedID.MaxLength = 0;
				colvarMeterDefectedID.AutoIncrement = true;
				colvarMeterDefectedID.IsNullable = false;
				colvarMeterDefectedID.IsPrimaryKey = true;
				colvarMeterDefectedID.IsForeignKey = false;
				colvarMeterDefectedID.IsReadOnly = false;
				colvarMeterDefectedID.DefaultSetting = @"";
				colvarMeterDefectedID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterDefectedID);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = -1;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarDefectedDate = new TableSchema.TableColumn(schema);
				colvarDefectedDate.ColumnName = "DefectedDate";
				colvarDefectedDate.DataType = DbType.DateTime;
				colvarDefectedDate.MaxLength = 0;
				colvarDefectedDate.AutoIncrement = false;
				colvarDefectedDate.IsNullable = true;
				colvarDefectedDate.IsPrimaryKey = false;
				colvarDefectedDate.IsForeignKey = false;
				colvarDefectedDate.IsReadOnly = false;
				colvarDefectedDate.DefaultSetting = @"";
				colvarDefectedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefectedDate);
				
				TableSchema.TableColumn colvarIsApproved = new TableSchema.TableColumn(schema);
				colvarIsApproved.ColumnName = "IsApproved";
				colvarIsApproved.DataType = DbType.Boolean;
				colvarIsApproved.MaxLength = 0;
				colvarIsApproved.AutoIncrement = false;
				colvarIsApproved.IsNullable = true;
				colvarIsApproved.IsPrimaryKey = false;
				colvarIsApproved.IsForeignKey = false;
				colvarIsApproved.IsReadOnly = false;
				colvarIsApproved.DefaultSetting = @"";
				colvarIsApproved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsApproved);
				
				TableSchema.TableColumn colvarDefectedBy = new TableSchema.TableColumn(schema);
				colvarDefectedBy.ColumnName = "DefectedBy";
				colvarDefectedBy.DataType = DbType.Int32;
				colvarDefectedBy.MaxLength = 0;
				colvarDefectedBy.AutoIncrement = false;
				colvarDefectedBy.IsNullable = true;
				colvarDefectedBy.IsPrimaryKey = false;
				colvarDefectedBy.IsForeignKey = true;
				colvarDefectedBy.IsReadOnly = false;
				colvarDefectedBy.DefaultSetting = @"";
				
					colvarDefectedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarDefectedBy);
				
				TableSchema.TableColumn colvarApprovedBy = new TableSchema.TableColumn(schema);
				colvarApprovedBy.ColumnName = "ApprovedBy";
				colvarApprovedBy.DataType = DbType.Int32;
				colvarApprovedBy.MaxLength = 0;
				colvarApprovedBy.AutoIncrement = false;
				colvarApprovedBy.IsNullable = true;
				colvarApprovedBy.IsPrimaryKey = false;
				colvarApprovedBy.IsForeignKey = true;
				colvarApprovedBy.IsReadOnly = false;
				colvarApprovedBy.DefaultSetting = @"";
				
					colvarApprovedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarApprovedBy);
				
				TableSchema.TableColumn colvarCLoad = new TableSchema.TableColumn(schema);
				colvarCLoad.ColumnName = "CLoad";
				colvarCLoad.DataType = DbType.Decimal;
				colvarCLoad.MaxLength = 0;
				colvarCLoad.AutoIncrement = false;
				colvarCLoad.IsNullable = true;
				colvarCLoad.IsPrimaryKey = false;
				colvarCLoad.IsForeignKey = false;
				colvarCLoad.IsReadOnly = false;
				colvarCLoad.DefaultSetting = @"";
				colvarCLoad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCLoad);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeterDefected",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MeterDefectedID")]
		[Bindable(true)]
		public int MeterDefectedID 
		{
			get { return GetColumnValue<int>(Columns.MeterDefectedID); }
			set { SetColumnValue(Columns.MeterDefectedID, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("DefectedDate")]
		[Bindable(true)]
		public DateTime? DefectedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DefectedDate); }
			set { SetColumnValue(Columns.DefectedDate, value); }
		}
		  
		[XmlAttribute("IsApproved")]
		[Bindable(true)]
		public bool? IsApproved 
		{
			get { return GetColumnValue<bool?>(Columns.IsApproved); }
			set { SetColumnValue(Columns.IsApproved, value); }
		}
		  
		[XmlAttribute("DefectedBy")]
		[Bindable(true)]
		public int? DefectedBy 
		{
			get { return GetColumnValue<int?>(Columns.DefectedBy); }
			set { SetColumnValue(Columns.DefectedBy, value); }
		}
		  
		[XmlAttribute("ApprovedBy")]
		[Bindable(true)]
		public int? ApprovedBy 
		{
			get { return GetColumnValue<int?>(Columns.ApprovedBy); }
			set { SetColumnValue(Columns.ApprovedBy, value); }
		}
		  
		[XmlAttribute("CLoad")]
		[Bindable(true)]
		public decimal? CLoad 
		{
			get { return GetColumnValue<decimal?>(Columns.CLoad); }
			set { SetColumnValue(Columns.CLoad, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblMeterDefectedDetailCollection TblMeterDefectedDetailRecords()
		{
			return new SmartCBSDataAccess.TblMeterDefectedDetailCollection().Where(TblMeterDefectedDetail.Columns.MeterDefectedID, MeterDefectedID).Load();
		}
		public SmartCBSDataAccess.TblMeterIssueCollection TblMeterIssueRecords()
		{
			return new SmartCBSDataAccess.TblMeterIssueCollection().Where(TblMeterIssue.Columns.MeterDefectedID, MeterDefectedID).Load();
		}
		public SmartCBSDataAccess.TblMeterIssueRequestCollection TblMeterIssueRequests()
		{
			return new SmartCBSDataAccess.TblMeterIssueRequestCollection().Where(TblMeterIssueRequest.Columns.DefectedID, MeterDefectedID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterDefected
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.DefectedBy); }
			set { SetColumnValue("DefectedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterDefected
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployeeToApprovedBy
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.ApprovedBy); }
			set { SetColumnValue("ApprovedBy", value.EmployeeID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varRemarks,DateTime? varCreatedOn,DateTime? varModifiedOn,DateTime? varDefectedDate,bool? varIsApproved,int? varDefectedBy,int? varApprovedBy,decimal? varCLoad)
		{
			TblMeterDefected item = new TblMeterDefected();
			
			item.Remarks = varRemarks;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.DefectedDate = varDefectedDate;
			
			item.IsApproved = varIsApproved;
			
			item.DefectedBy = varDefectedBy;
			
			item.ApprovedBy = varApprovedBy;
			
			item.CLoad = varCLoad;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMeterDefectedID,string varRemarks,DateTime? varCreatedOn,DateTime? varModifiedOn,DateTime? varDefectedDate,bool? varIsApproved,int? varDefectedBy,int? varApprovedBy,decimal? varCLoad)
		{
			TblMeterDefected item = new TblMeterDefected();
			
				item.MeterDefectedID = varMeterDefectedID;
			
				item.Remarks = varRemarks;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.DefectedDate = varDefectedDate;
			
				item.IsApproved = varIsApproved;
			
				item.DefectedBy = varDefectedBy;
			
				item.ApprovedBy = varApprovedBy;
			
				item.CLoad = varCLoad;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MeterDefectedIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DefectedDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IsApprovedColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DefectedByColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ApprovedByColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CLoadColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MeterDefectedID = @"MeterDefectedID";
			 public static string Remarks = @"Remarks";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string DefectedDate = @"DefectedDate";
			 public static string IsApproved = @"IsApproved";
			 public static string DefectedBy = @"DefectedBy";
			 public static string ApprovedBy = @"ApprovedBy";
			 public static string CLoad = @"CLoad";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
