using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblBillAdjustment class.
	/// </summary>
    [Serializable]
	public partial class TblBillAdjustmentCollection : ActiveList<TblBillAdjustment, TblBillAdjustmentCollection>
	{	   
		public TblBillAdjustmentCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblBillAdjustmentCollection</returns>
		public TblBillAdjustmentCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblBillAdjustment o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblBillAdjustment table.
	/// </summary>
	[Serializable]
	public partial class TblBillAdjustment : ActiveRecord<TblBillAdjustment>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblBillAdjustment()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblBillAdjustment(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblBillAdjustment(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblBillAdjustment(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblBillAdjustment", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarBillAdjustmentID = new TableSchema.TableColumn(schema);
				colvarBillAdjustmentID.ColumnName = "BillAdjustmentID";
				colvarBillAdjustmentID.DataType = DbType.Int32;
				colvarBillAdjustmentID.MaxLength = 0;
				colvarBillAdjustmentID.AutoIncrement = true;
				colvarBillAdjustmentID.IsNullable = false;
				colvarBillAdjustmentID.IsPrimaryKey = true;
				colvarBillAdjustmentID.IsForeignKey = false;
				colvarBillAdjustmentID.IsReadOnly = false;
				colvarBillAdjustmentID.DefaultSetting = @"";
				colvarBillAdjustmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillAdjustmentID);
				
				TableSchema.TableColumn colvarBillID = new TableSchema.TableColumn(schema);
				colvarBillID.ColumnName = "BillID";
				colvarBillID.DataType = DbType.Int32;
				colvarBillID.MaxLength = 0;
				colvarBillID.AutoIncrement = false;
				colvarBillID.IsNullable = true;
				colvarBillID.IsPrimaryKey = false;
				colvarBillID.IsForeignKey = true;
				colvarBillID.IsReadOnly = false;
				colvarBillID.DefaultSetting = @"";
				
					colvarBillID.ForeignKeyTableName = "TblBill";
				schema.Columns.Add(colvarBillID);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarIsApprove = new TableSchema.TableColumn(schema);
				colvarIsApprove.ColumnName = "IsApprove";
				colvarIsApprove.DataType = DbType.Boolean;
				colvarIsApprove.MaxLength = 0;
				colvarIsApprove.AutoIncrement = false;
				colvarIsApprove.IsNullable = true;
				colvarIsApprove.IsPrimaryKey = false;
				colvarIsApprove.IsForeignKey = false;
				colvarIsApprove.IsReadOnly = false;
				colvarIsApprove.DefaultSetting = @"";
				colvarIsApprove.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsApprove);
				
				TableSchema.TableColumn colvarAdjustmentAmount = new TableSchema.TableColumn(schema);
				colvarAdjustmentAmount.ColumnName = "AdjustmentAmount";
				colvarAdjustmentAmount.DataType = DbType.Decimal;
				colvarAdjustmentAmount.MaxLength = 0;
				colvarAdjustmentAmount.AutoIncrement = false;
				colvarAdjustmentAmount.IsNullable = true;
				colvarAdjustmentAmount.IsPrimaryKey = false;
				colvarAdjustmentAmount.IsForeignKey = false;
				colvarAdjustmentAmount.IsReadOnly = false;
				colvarAdjustmentAmount.DefaultSetting = @"";
				colvarAdjustmentAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdjustmentAmount);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = -1;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarDueDate = new TableSchema.TableColumn(schema);
				colvarDueDate.ColumnName = "DueDate";
				colvarDueDate.DataType = DbType.DateTime;
				colvarDueDate.MaxLength = 0;
				colvarDueDate.AutoIncrement = false;
				colvarDueDate.IsNullable = true;
				colvarDueDate.IsPrimaryKey = false;
				colvarDueDate.IsForeignKey = false;
				colvarDueDate.IsReadOnly = false;
				colvarDueDate.DefaultSetting = @"";
				colvarDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDueDate);
				
				TableSchema.TableColumn colvarIsPending = new TableSchema.TableColumn(schema);
				colvarIsPending.ColumnName = "IsPending";
				colvarIsPending.DataType = DbType.Boolean;
				colvarIsPending.MaxLength = 0;
				colvarIsPending.AutoIncrement = false;
				colvarIsPending.IsNullable = true;
				colvarIsPending.IsPrimaryKey = false;
				colvarIsPending.IsForeignKey = false;
				colvarIsPending.IsReadOnly = false;
				colvarIsPending.DefaultSetting = @"";
				colvarIsPending.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPending);
				
				TableSchema.TableColumn colvarIsPayment = new TableSchema.TableColumn(schema);
				colvarIsPayment.ColumnName = "IsPayment";
				colvarIsPayment.DataType = DbType.Boolean;
				colvarIsPayment.MaxLength = 0;
				colvarIsPayment.AutoIncrement = false;
				colvarIsPayment.IsNullable = true;
				colvarIsPayment.IsPrimaryKey = false;
				colvarIsPayment.IsForeignKey = false;
				colvarIsPayment.IsReadOnly = false;
				colvarIsPayment.DefaultSetting = @"";
				colvarIsPayment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPayment);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblBillAdjustment",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("BillAdjustmentID")]
		[Bindable(true)]
		public int BillAdjustmentID 
		{
			get { return GetColumnValue<int>(Columns.BillAdjustmentID); }
			set { SetColumnValue(Columns.BillAdjustmentID, value); }
		}
		  
		[XmlAttribute("BillID")]
		[Bindable(true)]
		public int? BillID 
		{
			get { return GetColumnValue<int?>(Columns.BillID); }
			set { SetColumnValue(Columns.BillID, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("IsApprove")]
		[Bindable(true)]
		public bool? IsApprove 
		{
			get { return GetColumnValue<bool?>(Columns.IsApprove); }
			set { SetColumnValue(Columns.IsApprove, value); }
		}
		  
		[XmlAttribute("AdjustmentAmount")]
		[Bindable(true)]
		public decimal? AdjustmentAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.AdjustmentAmount); }
			set { SetColumnValue(Columns.AdjustmentAmount, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("DueDate")]
		[Bindable(true)]
		public DateTime? DueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DueDate); }
			set { SetColumnValue(Columns.DueDate, value); }
		}
		  
		[XmlAttribute("IsPending")]
		[Bindable(true)]
		public bool? IsPending 
		{
			get { return GetColumnValue<bool?>(Columns.IsPending); }
			set { SetColumnValue(Columns.IsPending, value); }
		}
		  
		[XmlAttribute("IsPayment")]
		[Bindable(true)]
		public bool? IsPayment 
		{
			get { return GetColumnValue<bool?>(Columns.IsPayment); }
			set { SetColumnValue(Columns.IsPayment, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblLedgerCollection TblLedgerRecords()
		{
			return new SmartCBSDataAccess.TblLedgerCollection().Where(TblLedger.Columns.BillAdjustmentID, BillAdjustmentID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBill ActiveRecord object related to this TblBillAdjustment
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBill TblBill
		{
			get { return SmartCBSDataAccess.TblBill.FetchByID(this.BillID); }
			set { SetColumnValue("BillID", value.BillID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varBillID,DateTime? varCreatedOn,DateTime? varModifiedOn,bool? varIsApprove,decimal? varAdjustmentAmount,string varRemarks,DateTime? varDueDate,bool? varIsPending,bool? varIsPayment)
		{
			TblBillAdjustment item = new TblBillAdjustment();
			
			item.BillID = varBillID;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.IsApprove = varIsApprove;
			
			item.AdjustmentAmount = varAdjustmentAmount;
			
			item.Remarks = varRemarks;
			
			item.DueDate = varDueDate;
			
			item.IsPending = varIsPending;
			
			item.IsPayment = varIsPayment;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varBillAdjustmentID,int? varBillID,DateTime? varCreatedOn,DateTime? varModifiedOn,bool? varIsApprove,decimal? varAdjustmentAmount,string varRemarks,DateTime? varDueDate,bool? varIsPending,bool? varIsPayment)
		{
			TblBillAdjustment item = new TblBillAdjustment();
			
				item.BillAdjustmentID = varBillAdjustmentID;
			
				item.BillID = varBillID;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.IsApprove = varIsApprove;
			
				item.AdjustmentAmount = varAdjustmentAmount;
			
				item.Remarks = varRemarks;
			
				item.DueDate = varDueDate;
			
				item.IsPending = varIsPending;
			
				item.IsPayment = varIsPayment;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn BillAdjustmentIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BillIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IsApproveColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn AdjustmentAmountColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DueDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPendingColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPaymentColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string BillAdjustmentID = @"BillAdjustmentID";
			 public static string BillID = @"BillID";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string IsApprove = @"IsApprove";
			 public static string AdjustmentAmount = @"AdjustmentAmount";
			 public static string Remarks = @"Remarks";
			 public static string DueDate = @"DueDate";
			 public static string IsPending = @"IsPending";
			 public static string IsPayment = @"IsPayment";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
