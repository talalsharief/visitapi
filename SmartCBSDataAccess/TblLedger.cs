using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblLedger class.
	/// </summary>
    [Serializable]
	public partial class TblLedgerCollection : ActiveList<TblLedger, TblLedgerCollection>
	{	   
		public TblLedgerCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblLedgerCollection</returns>
		public TblLedgerCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblLedger o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblLedger table.
	/// </summary>
	[Serializable]
	public partial class TblLedger : ActiveRecord<TblLedger>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblLedger()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblLedger(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblLedger(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblLedger(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblLedger", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarLedgerID = new TableSchema.TableColumn(schema);
				colvarLedgerID.ColumnName = "LedgerID";
				colvarLedgerID.DataType = DbType.Int32;
				colvarLedgerID.MaxLength = 0;
				colvarLedgerID.AutoIncrement = true;
				colvarLedgerID.IsNullable = false;
				colvarLedgerID.IsPrimaryKey = true;
				colvarLedgerID.IsForeignKey = false;
				colvarLedgerID.IsReadOnly = false;
				colvarLedgerID.DefaultSetting = @"";
				colvarLedgerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLedgerID);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = true;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				
					colvarConsumerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = true;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarBillID = new TableSchema.TableColumn(schema);
				colvarBillID.ColumnName = "BillID";
				colvarBillID.DataType = DbType.Int32;
				colvarBillID.MaxLength = 0;
				colvarBillID.AutoIncrement = false;
				colvarBillID.IsNullable = true;
				colvarBillID.IsPrimaryKey = false;
				colvarBillID.IsForeignKey = true;
				colvarBillID.IsReadOnly = false;
				colvarBillID.DefaultSetting = @"";
				
					colvarBillID.ForeignKeyTableName = "TblBill";
				schema.Columns.Add(colvarBillID);
				
				TableSchema.TableColumn colvarBillAdjustmentID = new TableSchema.TableColumn(schema);
				colvarBillAdjustmentID.ColumnName = "BillAdjustmentID";
				colvarBillAdjustmentID.DataType = DbType.Int32;
				colvarBillAdjustmentID.MaxLength = 0;
				colvarBillAdjustmentID.AutoIncrement = false;
				colvarBillAdjustmentID.IsNullable = true;
				colvarBillAdjustmentID.IsPrimaryKey = false;
				colvarBillAdjustmentID.IsForeignKey = true;
				colvarBillAdjustmentID.IsReadOnly = false;
				colvarBillAdjustmentID.DefaultSetting = @"";
				
					colvarBillAdjustmentID.ForeignKeyTableName = "TblBillAdjustment";
				schema.Columns.Add(colvarBillAdjustmentID);
				
				TableSchema.TableColumn colvarBillPaymentID = new TableSchema.TableColumn(schema);
				colvarBillPaymentID.ColumnName = "BillPaymentID";
				colvarBillPaymentID.DataType = DbType.Int32;
				colvarBillPaymentID.MaxLength = 0;
				colvarBillPaymentID.AutoIncrement = false;
				colvarBillPaymentID.IsNullable = true;
				colvarBillPaymentID.IsPrimaryKey = false;
				colvarBillPaymentID.IsForeignKey = true;
				colvarBillPaymentID.IsReadOnly = false;
				colvarBillPaymentID.DefaultSetting = @"";
				
					colvarBillPaymentID.ForeignKeyTableName = "TblBillPayment";
				schema.Columns.Add(colvarBillPaymentID);
				
				TableSchema.TableColumn colvarInstallmentID = new TableSchema.TableColumn(schema);
				colvarInstallmentID.ColumnName = "InstallmentID";
				colvarInstallmentID.DataType = DbType.Int32;
				colvarInstallmentID.MaxLength = 0;
				colvarInstallmentID.AutoIncrement = false;
				colvarInstallmentID.IsNullable = true;
				colvarInstallmentID.IsPrimaryKey = false;
				colvarInstallmentID.IsForeignKey = true;
				colvarInstallmentID.IsReadOnly = false;
				colvarInstallmentID.DefaultSetting = @"";
				
					colvarInstallmentID.ForeignKeyTableName = "TblInstallement";
				schema.Columns.Add(colvarInstallmentID);
				
				TableSchema.TableColumn colvarDebit = new TableSchema.TableColumn(schema);
				colvarDebit.ColumnName = "Debit";
				colvarDebit.DataType = DbType.Int32;
				colvarDebit.MaxLength = 0;
				colvarDebit.AutoIncrement = false;
				colvarDebit.IsNullable = true;
				colvarDebit.IsPrimaryKey = false;
				colvarDebit.IsForeignKey = false;
				colvarDebit.IsReadOnly = false;
				colvarDebit.DefaultSetting = @"";
				colvarDebit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDebit);
				
				TableSchema.TableColumn colvarCredit = new TableSchema.TableColumn(schema);
				colvarCredit.ColumnName = "Credit";
				colvarCredit.DataType = DbType.Int32;
				colvarCredit.MaxLength = 0;
				colvarCredit.AutoIncrement = false;
				colvarCredit.IsNullable = true;
				colvarCredit.IsPrimaryKey = false;
				colvarCredit.IsForeignKey = false;
				colvarCredit.IsReadOnly = false;
				colvarCredit.DefaultSetting = @"";
				colvarCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCredit);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = 500;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarEntryDate = new TableSchema.TableColumn(schema);
				colvarEntryDate.ColumnName = "EntryDate";
				colvarEntryDate.DataType = DbType.DateTime;
				colvarEntryDate.MaxLength = 0;
				colvarEntryDate.AutoIncrement = false;
				colvarEntryDate.IsNullable = true;
				colvarEntryDate.IsPrimaryKey = false;
				colvarEntryDate.IsForeignKey = false;
				colvarEntryDate.IsReadOnly = false;
				colvarEntryDate.DefaultSetting = @"";
				colvarEntryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntryDate);
				
				TableSchema.TableColumn colvarAdvanceID = new TableSchema.TableColumn(schema);
				colvarAdvanceID.ColumnName = "AdvanceID";
				colvarAdvanceID.DataType = DbType.Int32;
				colvarAdvanceID.MaxLength = 0;
				colvarAdvanceID.AutoIncrement = false;
				colvarAdvanceID.IsNullable = true;
				colvarAdvanceID.IsPrimaryKey = false;
				colvarAdvanceID.IsForeignKey = true;
				colvarAdvanceID.IsReadOnly = false;
				colvarAdvanceID.DefaultSetting = @"";
				
					colvarAdvanceID.ForeignKeyTableName = "tblAdvance";
				schema.Columns.Add(colvarAdvanceID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblLedger",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("LedgerID")]
		[Bindable(true)]
		public int LedgerID 
		{
			get { return GetColumnValue<int>(Columns.LedgerID); }
			set { SetColumnValue(Columns.LedgerID, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int? MeterID 
		{
			get { return GetColumnValue<int?>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("BillID")]
		[Bindable(true)]
		public int? BillID 
		{
			get { return GetColumnValue<int?>(Columns.BillID); }
			set { SetColumnValue(Columns.BillID, value); }
		}
		  
		[XmlAttribute("BillAdjustmentID")]
		[Bindable(true)]
		public int? BillAdjustmentID 
		{
			get { return GetColumnValue<int?>(Columns.BillAdjustmentID); }
			set { SetColumnValue(Columns.BillAdjustmentID, value); }
		}
		  
		[XmlAttribute("BillPaymentID")]
		[Bindable(true)]
		public int? BillPaymentID 
		{
			get { return GetColumnValue<int?>(Columns.BillPaymentID); }
			set { SetColumnValue(Columns.BillPaymentID, value); }
		}
		  
		[XmlAttribute("InstallmentID")]
		[Bindable(true)]
		public int? InstallmentID 
		{
			get { return GetColumnValue<int?>(Columns.InstallmentID); }
			set { SetColumnValue(Columns.InstallmentID, value); }
		}
		  
		[XmlAttribute("Debit")]
		[Bindable(true)]
		public int? Debit 
		{
			get { return GetColumnValue<int?>(Columns.Debit); }
			set { SetColumnValue(Columns.Debit, value); }
		}
		  
		[XmlAttribute("Credit")]
		[Bindable(true)]
		public int? Credit 
		{
			get { return GetColumnValue<int?>(Columns.Credit); }
			set { SetColumnValue(Columns.Credit, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("EntryDate")]
		[Bindable(true)]
		public DateTime? EntryDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EntryDate); }
			set { SetColumnValue(Columns.EntryDate, value); }
		}
		  
		[XmlAttribute("AdvanceID")]
		[Bindable(true)]
		public int? AdvanceID 
		{
			get { return GetColumnValue<int?>(Columns.AdvanceID); }
			set { SetColumnValue(Columns.AdvanceID, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblAdvance ActiveRecord object related to this TblLedger
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblAdvance TblAdvance
		{
			get { return SmartCBSDataAccess.TblAdvance.FetchByID(this.AdvanceID); }
			set { SetColumnValue("AdvanceID", value.AdvanceID); }
		}
		
		
		/// <summary>
		/// Returns a TblBill ActiveRecord object related to this TblLedger
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBill TblBill
		{
			get { return SmartCBSDataAccess.TblBill.FetchByID(this.BillID); }
			set { SetColumnValue("BillID", value.BillID); }
		}
		
		
		/// <summary>
		/// Returns a TblBillAdjustment ActiveRecord object related to this TblLedger
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBillAdjustment TblBillAdjustment
		{
			get { return SmartCBSDataAccess.TblBillAdjustment.FetchByID(this.BillAdjustmentID); }
			set { SetColumnValue("BillAdjustmentID", value.BillAdjustmentID); }
		}
		
		
		/// <summary>
		/// Returns a TblBillPayment ActiveRecord object related to this TblLedger
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBillPayment TblBillPayment
		{
			get { return SmartCBSDataAccess.TblBillPayment.FetchByID(this.BillPaymentID); }
			set { SetColumnValue("BillPaymentID", value.BillPaymentID); }
		}
		
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblLedger
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.ConsumerID); }
			set { SetColumnValue("ConsumerID", value.CunsumerID); }
		}
		
		
		/// <summary>
		/// Returns a TblInstallement ActiveRecord object related to this TblLedger
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblInstallement TblInstallement
		{
			get { return SmartCBSDataAccess.TblInstallement.FetchByID(this.InstallmentID); }
			set { SetColumnValue("InstallmentID", value.InstallementID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblLedger
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varConsumerID,int? varMeterID,int? varBillID,int? varBillAdjustmentID,int? varBillPaymentID,int? varInstallmentID,int? varDebit,int? varCredit,string varRemarks,DateTime? varCreatedOn,DateTime? varModifiedOn,DateTime? varEntryDate,int? varAdvanceID)
		{
			TblLedger item = new TblLedger();
			
			item.ConsumerID = varConsumerID;
			
			item.MeterID = varMeterID;
			
			item.BillID = varBillID;
			
			item.BillAdjustmentID = varBillAdjustmentID;
			
			item.BillPaymentID = varBillPaymentID;
			
			item.InstallmentID = varInstallmentID;
			
			item.Debit = varDebit;
			
			item.Credit = varCredit;
			
			item.Remarks = varRemarks;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.EntryDate = varEntryDate;
			
			item.AdvanceID = varAdvanceID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varLedgerID,int? varConsumerID,int? varMeterID,int? varBillID,int? varBillAdjustmentID,int? varBillPaymentID,int? varInstallmentID,int? varDebit,int? varCredit,string varRemarks,DateTime? varCreatedOn,DateTime? varModifiedOn,DateTime? varEntryDate,int? varAdvanceID)
		{
			TblLedger item = new TblLedger();
			
				item.LedgerID = varLedgerID;
			
				item.ConsumerID = varConsumerID;
			
				item.MeterID = varMeterID;
			
				item.BillID = varBillID;
			
				item.BillAdjustmentID = varBillAdjustmentID;
			
				item.BillPaymentID = varBillPaymentID;
			
				item.InstallmentID = varInstallmentID;
			
				item.Debit = varDebit;
			
				item.Credit = varCredit;
			
				item.Remarks = varRemarks;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.EntryDate = varEntryDate;
			
				item.AdvanceID = varAdvanceID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn LedgerIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn BillIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BillAdjustmentIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BillPaymentIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn InstallmentIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DebitColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CreditColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn EntryDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn AdvanceIDColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string LedgerID = @"LedgerID";
			 public static string ConsumerID = @"ConsumerID";
			 public static string MeterID = @"MeterID";
			 public static string BillID = @"BillID";
			 public static string BillAdjustmentID = @"BillAdjustmentID";
			 public static string BillPaymentID = @"BillPaymentID";
			 public static string InstallmentID = @"InstallmentID";
			 public static string Debit = @"Debit";
			 public static string Credit = @"Credit";
			 public static string Remarks = @"Remarks";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string EntryDate = @"EntryDate";
			 public static string AdvanceID = @"AdvanceID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
