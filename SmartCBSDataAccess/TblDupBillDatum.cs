using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblDupBillDatum class.
	/// </summary>
    [Serializable]
	public partial class TblDupBillDatumCollection : ActiveList<TblDupBillDatum, TblDupBillDatumCollection>
	{	   
		public TblDupBillDatumCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblDupBillDatumCollection</returns>
		public TblDupBillDatumCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblDupBillDatum o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblDupBillData table.
	/// </summary>
	[Serializable]
	public partial class TblDupBillDatum : ActiveRecord<TblDupBillDatum>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblDupBillDatum()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblDupBillDatum(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblDupBillDatum(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblDupBillDatum(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblDupBillData", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDuplicateDataID = new TableSchema.TableColumn(schema);
				colvarDuplicateDataID.ColumnName = "DuplicateDataID";
				colvarDuplicateDataID.DataType = DbType.Int32;
				colvarDuplicateDataID.MaxLength = 0;
				colvarDuplicateDataID.AutoIncrement = true;
				colvarDuplicateDataID.IsNullable = false;
				colvarDuplicateDataID.IsPrimaryKey = true;
				colvarDuplicateDataID.IsForeignKey = false;
				colvarDuplicateDataID.IsReadOnly = false;
				colvarDuplicateDataID.DefaultSetting = @"";
				colvarDuplicateDataID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDuplicateDataID);
				
				TableSchema.TableColumn colvarDataID = new TableSchema.TableColumn(schema);
				colvarDataID.ColumnName = "DataID";
				colvarDataID.DataType = DbType.Int32;
				colvarDataID.MaxLength = 0;
				colvarDataID.AutoIncrement = false;
				colvarDataID.IsNullable = true;
				colvarDataID.IsPrimaryKey = false;
				colvarDataID.IsForeignKey = true;
				colvarDataID.IsReadOnly = false;
				colvarDataID.DefaultSetting = @"";
				
					colvarDataID.ForeignKeyTableName = "TblBillPaymentData";
				schema.Columns.Add(colvarDataID);
				
				TableSchema.TableColumn colvarPaymentDate = new TableSchema.TableColumn(schema);
				colvarPaymentDate.ColumnName = "PaymentDate";
				colvarPaymentDate.DataType = DbType.DateTime;
				colvarPaymentDate.MaxLength = 0;
				colvarPaymentDate.AutoIncrement = false;
				colvarPaymentDate.IsNullable = true;
				colvarPaymentDate.IsPrimaryKey = false;
				colvarPaymentDate.IsForeignKey = false;
				colvarPaymentDate.IsReadOnly = false;
				colvarPaymentDate.DefaultSetting = @"";
				colvarPaymentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentDate);
				
				TableSchema.TableColumn colvarAmountPaid = new TableSchema.TableColumn(schema);
				colvarAmountPaid.ColumnName = "AmountPaid";
				colvarAmountPaid.DataType = DbType.Decimal;
				colvarAmountPaid.MaxLength = 0;
				colvarAmountPaid.AutoIncrement = false;
				colvarAmountPaid.IsNullable = true;
				colvarAmountPaid.IsPrimaryKey = false;
				colvarAmountPaid.IsForeignKey = false;
				colvarAmountPaid.IsReadOnly = false;
				colvarAmountPaid.DefaultSetting = @"";
				colvarAmountPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmountPaid);
				
				TableSchema.TableColumn colvarCollectionPointID = new TableSchema.TableColumn(schema);
				colvarCollectionPointID.ColumnName = "CollectionPointID";
				colvarCollectionPointID.DataType = DbType.Int32;
				colvarCollectionPointID.MaxLength = 0;
				colvarCollectionPointID.AutoIncrement = false;
				colvarCollectionPointID.IsNullable = true;
				colvarCollectionPointID.IsPrimaryKey = false;
				colvarCollectionPointID.IsForeignKey = true;
				colvarCollectionPointID.IsReadOnly = false;
				colvarCollectionPointID.DefaultSetting = @"";
				
					colvarCollectionPointID.ForeignKeyTableName = "TblCollectionPoint";
				schema.Columns.Add(colvarCollectionPointID);
				
				TableSchema.TableColumn colvarIsApproved = new TableSchema.TableColumn(schema);
				colvarIsApproved.ColumnName = "IsApproved";
				colvarIsApproved.DataType = DbType.Boolean;
				colvarIsApproved.MaxLength = 0;
				colvarIsApproved.AutoIncrement = false;
				colvarIsApproved.IsNullable = true;
				colvarIsApproved.IsPrimaryKey = false;
				colvarIsApproved.IsForeignKey = false;
				colvarIsApproved.IsReadOnly = false;
				colvarIsApproved.DefaultSetting = @"";
				colvarIsApproved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsApproved);
				
				TableSchema.TableColumn colvarUploadedBy = new TableSchema.TableColumn(schema);
				colvarUploadedBy.ColumnName = "UploadedBy";
				colvarUploadedBy.DataType = DbType.Int32;
				colvarUploadedBy.MaxLength = 0;
				colvarUploadedBy.AutoIncrement = false;
				colvarUploadedBy.IsNullable = true;
				colvarUploadedBy.IsPrimaryKey = false;
				colvarUploadedBy.IsForeignKey = false;
				colvarUploadedBy.IsReadOnly = false;
				colvarUploadedBy.DefaultSetting = @"";
				colvarUploadedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUploadedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblDupBillData",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DuplicateDataID")]
		[Bindable(true)]
		public int DuplicateDataID 
		{
			get { return GetColumnValue<int>(Columns.DuplicateDataID); }
			set { SetColumnValue(Columns.DuplicateDataID, value); }
		}
		  
		[XmlAttribute("DataID")]
		[Bindable(true)]
		public int? DataID 
		{
			get { return GetColumnValue<int?>(Columns.DataID); }
			set { SetColumnValue(Columns.DataID, value); }
		}
		  
		[XmlAttribute("PaymentDate")]
		[Bindable(true)]
		public DateTime? PaymentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentDate); }
			set { SetColumnValue(Columns.PaymentDate, value); }
		}
		  
		[XmlAttribute("AmountPaid")]
		[Bindable(true)]
		public decimal? AmountPaid 
		{
			get { return GetColumnValue<decimal?>(Columns.AmountPaid); }
			set { SetColumnValue(Columns.AmountPaid, value); }
		}
		  
		[XmlAttribute("CollectionPointID")]
		[Bindable(true)]
		public int? CollectionPointID 
		{
			get { return GetColumnValue<int?>(Columns.CollectionPointID); }
			set { SetColumnValue(Columns.CollectionPointID, value); }
		}
		  
		[XmlAttribute("IsApproved")]
		[Bindable(true)]
		public bool? IsApproved 
		{
			get { return GetColumnValue<bool?>(Columns.IsApproved); }
			set { SetColumnValue(Columns.IsApproved, value); }
		}
		  
		[XmlAttribute("UploadedBy")]
		[Bindable(true)]
		public int? UploadedBy 
		{
			get { return GetColumnValue<int?>(Columns.UploadedBy); }
			set { SetColumnValue(Columns.UploadedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBillPaymentDatum ActiveRecord object related to this TblDupBillDatum
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBillPaymentDatum TblBillPaymentDatum
		{
			get { return SmartCBSDataAccess.TblBillPaymentDatum.FetchByID(this.DataID); }
			set { SetColumnValue("DataID", value.DataID); }
		}
		
		
		/// <summary>
		/// Returns a TblCollectionPoint ActiveRecord object related to this TblDupBillDatum
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblCollectionPoint TblCollectionPoint
		{
			get { return SmartCBSDataAccess.TblCollectionPoint.FetchByID(this.CollectionPointID); }
			set { SetColumnValue("CollectionPointID", value.CollectionPointID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varDataID,DateTime? varPaymentDate,decimal? varAmountPaid,int? varCollectionPointID,bool? varIsApproved,int? varUploadedBy,DateTime? varModifiedOn,DateTime? varCreatedOn)
		{
			TblDupBillDatum item = new TblDupBillDatum();
			
			item.DataID = varDataID;
			
			item.PaymentDate = varPaymentDate;
			
			item.AmountPaid = varAmountPaid;
			
			item.CollectionPointID = varCollectionPointID;
			
			item.IsApproved = varIsApproved;
			
			item.UploadedBy = varUploadedBy;
			
			item.ModifiedOn = varModifiedOn;
			
			item.CreatedOn = varCreatedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDuplicateDataID,int? varDataID,DateTime? varPaymentDate,decimal? varAmountPaid,int? varCollectionPointID,bool? varIsApproved,int? varUploadedBy,DateTime? varModifiedOn,DateTime? varCreatedOn)
		{
			TblDupBillDatum item = new TblDupBillDatum();
			
				item.DuplicateDataID = varDuplicateDataID;
			
				item.DataID = varDataID;
			
				item.PaymentDate = varPaymentDate;
			
				item.AmountPaid = varAmountPaid;
			
				item.CollectionPointID = varCollectionPointID;
			
				item.IsApproved = varIsApproved;
			
				item.UploadedBy = varUploadedBy;
			
				item.ModifiedOn = varModifiedOn;
			
				item.CreatedOn = varCreatedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DuplicateDataIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DataIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountPaidColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CollectionPointIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IsApprovedColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UploadedByColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DuplicateDataID = @"DuplicateDataID";
			 public static string DataID = @"DataID";
			 public static string PaymentDate = @"PaymentDate";
			 public static string AmountPaid = @"AmountPaid";
			 public static string CollectionPointID = @"CollectionPointID";
			 public static string IsApproved = @"IsApproved";
			 public static string UploadedBy = @"UploadedBy";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string CreatedOn = @"CreatedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
