using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwTblRecoveryTarget class.
    /// </summary>
    [Serializable]
    public partial class VwTblRecoveryTargetCollection : ReadOnlyList<VwTblRecoveryTarget, VwTblRecoveryTargetCollection>
    {        
        public VwTblRecoveryTargetCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwTblRecoveryTarget view.
    /// </summary>
    [Serializable]
    public partial class VwTblRecoveryTarget : ReadOnlyRecord<VwTblRecoveryTarget>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwTblRecoveryTarget", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarRecoveryTargetID = new TableSchema.TableColumn(schema);
                colvarRecoveryTargetID.ColumnName = "RecoveryTargetID";
                colvarRecoveryTargetID.DataType = DbType.Int32;
                colvarRecoveryTargetID.MaxLength = 0;
                colvarRecoveryTargetID.AutoIncrement = false;
                colvarRecoveryTargetID.IsNullable = false;
                colvarRecoveryTargetID.IsPrimaryKey = false;
                colvarRecoveryTargetID.IsForeignKey = false;
                colvarRecoveryTargetID.IsReadOnly = false;
                
                schema.Columns.Add(colvarRecoveryTargetID);
                
                TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
                colvarAmount.ColumnName = "Amount";
                colvarAmount.DataType = DbType.Decimal;
                colvarAmount.MaxLength = 0;
                colvarAmount.AutoIncrement = false;
                colvarAmount.IsNullable = true;
                colvarAmount.IsPrimaryKey = false;
                colvarAmount.IsForeignKey = false;
                colvarAmount.IsReadOnly = false;
                
                schema.Columns.Add(colvarAmount);
                
                TableSchema.TableColumn colvarMonth = new TableSchema.TableColumn(schema);
                colvarMonth.ColumnName = "Month";
                colvarMonth.DataType = DbType.AnsiString;
                colvarMonth.MaxLength = 50;
                colvarMonth.AutoIncrement = false;
                colvarMonth.IsNullable = true;
                colvarMonth.IsPrimaryKey = false;
                colvarMonth.IsForeignKey = false;
                colvarMonth.IsReadOnly = false;
                
                schema.Columns.Add(colvarMonth);
                
                TableSchema.TableColumn colvarYear = new TableSchema.TableColumn(schema);
                colvarYear.ColumnName = "Year";
                colvarYear.DataType = DbType.AnsiString;
                colvarYear.MaxLength = 50;
                colvarYear.AutoIncrement = false;
                colvarYear.IsNullable = true;
                colvarYear.IsPrimaryKey = false;
                colvarYear.IsForeignKey = false;
                colvarYear.IsReadOnly = false;
                
                schema.Columns.Add(colvarYear);
                
                TableSchema.TableColumn colvarBrickID = new TableSchema.TableColumn(schema);
                colvarBrickID.ColumnName = "BrickID";
                colvarBrickID.DataType = DbType.Int32;
                colvarBrickID.MaxLength = 0;
                colvarBrickID.AutoIncrement = false;
                colvarBrickID.IsNullable = false;
                colvarBrickID.IsPrimaryKey = false;
                colvarBrickID.IsForeignKey = false;
                colvarBrickID.IsReadOnly = false;
                
                schema.Columns.Add(colvarBrickID);
                
                TableSchema.TableColumn colvarBrickName = new TableSchema.TableColumn(schema);
                colvarBrickName.ColumnName = "BrickName";
                colvarBrickName.DataType = DbType.AnsiString;
                colvarBrickName.MaxLength = 50;
                colvarBrickName.AutoIncrement = false;
                colvarBrickName.IsNullable = true;
                colvarBrickName.IsPrimaryKey = false;
                colvarBrickName.IsForeignKey = false;
                colvarBrickName.IsReadOnly = false;
                
                schema.Columns.Add(colvarBrickName);
                
                TableSchema.TableColumn colvarBrickTypeID = new TableSchema.TableColumn(schema);
                colvarBrickTypeID.ColumnName = "BrickTypeID";
                colvarBrickTypeID.DataType = DbType.Int32;
                colvarBrickTypeID.MaxLength = 0;
                colvarBrickTypeID.AutoIncrement = false;
                colvarBrickTypeID.IsNullable = false;
                colvarBrickTypeID.IsPrimaryKey = false;
                colvarBrickTypeID.IsForeignKey = false;
                colvarBrickTypeID.IsReadOnly = false;
                
                schema.Columns.Add(colvarBrickTypeID);
                
                TableSchema.TableColumn colvarBrickTypeName = new TableSchema.TableColumn(schema);
                colvarBrickTypeName.ColumnName = "BrickTypeName";
                colvarBrickTypeName.DataType = DbType.AnsiString;
                colvarBrickTypeName.MaxLength = 50;
                colvarBrickTypeName.AutoIncrement = false;
                colvarBrickTypeName.IsNullable = true;
                colvarBrickTypeName.IsPrimaryKey = false;
                colvarBrickTypeName.IsForeignKey = false;
                colvarBrickTypeName.IsReadOnly = false;
                
                schema.Columns.Add(colvarBrickTypeName);
                
                TableSchema.TableColumn colvarBrickTypeLevel = new TableSchema.TableColumn(schema);
                colvarBrickTypeLevel.ColumnName = "BrickTypeLevel";
                colvarBrickTypeLevel.DataType = DbType.Int32;
                colvarBrickTypeLevel.MaxLength = 0;
                colvarBrickTypeLevel.AutoIncrement = false;
                colvarBrickTypeLevel.IsNullable = true;
                colvarBrickTypeLevel.IsPrimaryKey = false;
                colvarBrickTypeLevel.IsForeignKey = false;
                colvarBrickTypeLevel.IsReadOnly = false;
                
                schema.Columns.Add(colvarBrickTypeLevel);
                
                TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
                colvarCreatedOn.ColumnName = "CreatedOn";
                colvarCreatedOn.DataType = DbType.DateTime;
                colvarCreatedOn.MaxLength = 0;
                colvarCreatedOn.AutoIncrement = false;
                colvarCreatedOn.IsNullable = true;
                colvarCreatedOn.IsPrimaryKey = false;
                colvarCreatedOn.IsForeignKey = false;
                colvarCreatedOn.IsReadOnly = false;
                
                schema.Columns.Add(colvarCreatedOn);
                
                TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
                colvarModifiedOn.ColumnName = "ModifiedOn";
                colvarModifiedOn.DataType = DbType.DateTime;
                colvarModifiedOn.MaxLength = 0;
                colvarModifiedOn.AutoIncrement = false;
                colvarModifiedOn.IsNullable = true;
                colvarModifiedOn.IsPrimaryKey = false;
                colvarModifiedOn.IsForeignKey = false;
                colvarModifiedOn.IsReadOnly = false;
                
                schema.Columns.Add(colvarModifiedOn);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwTblRecoveryTarget",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwTblRecoveryTarget()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwTblRecoveryTarget(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwTblRecoveryTarget(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwTblRecoveryTarget(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("RecoveryTargetID")]
        [Bindable(true)]
        public int RecoveryTargetID 
	    {
		    get
		    {
			    return GetColumnValue<int>("RecoveryTargetID");
		    }
            set 
		    {
			    SetColumnValue("RecoveryTargetID", value);
            }
        }
	      
        [XmlAttribute("Amount")]
        [Bindable(true)]
        public decimal? Amount 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("Amount");
		    }
            set 
		    {
			    SetColumnValue("Amount", value);
            }
        }
	      
        [XmlAttribute("Month")]
        [Bindable(true)]
        public string Month 
	    {
		    get
		    {
			    return GetColumnValue<string>("Month");
		    }
            set 
		    {
			    SetColumnValue("Month", value);
            }
        }
	      
        [XmlAttribute("Year")]
        [Bindable(true)]
        public string Year 
	    {
		    get
		    {
			    return GetColumnValue<string>("Year");
		    }
            set 
		    {
			    SetColumnValue("Year", value);
            }
        }
	      
        [XmlAttribute("BrickID")]
        [Bindable(true)]
        public int BrickID 
	    {
		    get
		    {
			    return GetColumnValue<int>("BrickID");
		    }
            set 
		    {
			    SetColumnValue("BrickID", value);
            }
        }
	      
        [XmlAttribute("BrickName")]
        [Bindable(true)]
        public string BrickName 
	    {
		    get
		    {
			    return GetColumnValue<string>("BrickName");
		    }
            set 
		    {
			    SetColumnValue("BrickName", value);
            }
        }
	      
        [XmlAttribute("BrickTypeID")]
        [Bindable(true)]
        public int BrickTypeID 
	    {
		    get
		    {
			    return GetColumnValue<int>("BrickTypeID");
		    }
            set 
		    {
			    SetColumnValue("BrickTypeID", value);
            }
        }
	      
        [XmlAttribute("BrickTypeName")]
        [Bindable(true)]
        public string BrickTypeName 
	    {
		    get
		    {
			    return GetColumnValue<string>("BrickTypeName");
		    }
            set 
		    {
			    SetColumnValue("BrickTypeName", value);
            }
        }
	      
        [XmlAttribute("BrickTypeLevel")]
        [Bindable(true)]
        public int? BrickTypeLevel 
	    {
		    get
		    {
			    return GetColumnValue<int?>("BrickTypeLevel");
		    }
            set 
		    {
			    SetColumnValue("BrickTypeLevel", value);
            }
        }
	      
        [XmlAttribute("CreatedOn")]
        [Bindable(true)]
        public DateTime? CreatedOn 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("CreatedOn");
		    }
            set 
		    {
			    SetColumnValue("CreatedOn", value);
            }
        }
	      
        [XmlAttribute("ModifiedOn")]
        [Bindable(true)]
        public DateTime? ModifiedOn 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("ModifiedOn");
		    }
            set 
		    {
			    SetColumnValue("ModifiedOn", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string RecoveryTargetID = @"RecoveryTargetID";
            
            public static string Amount = @"Amount";
            
            public static string Month = @"Month";
            
            public static string Year = @"Year";
            
            public static string BrickID = @"BrickID";
            
            public static string BrickName = @"BrickName";
            
            public static string BrickTypeID = @"BrickTypeID";
            
            public static string BrickTypeName = @"BrickTypeName";
            
            public static string BrickTypeLevel = @"BrickTypeLevel";
            
            public static string CreatedOn = @"CreatedOn";
            
            public static string ModifiedOn = @"ModifiedOn";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
