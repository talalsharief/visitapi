using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblNewConDocumentRequiredDet class.
	/// </summary>
    [Serializable]
	public partial class TblNewConDocumentRequiredDetCollection : ActiveList<TblNewConDocumentRequiredDet, TblNewConDocumentRequiredDetCollection>
	{	   
		public TblNewConDocumentRequiredDetCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblNewConDocumentRequiredDetCollection</returns>
		public TblNewConDocumentRequiredDetCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblNewConDocumentRequiredDet o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblNewConDocumentRequiredDet table.
	/// </summary>
	[Serializable]
	public partial class TblNewConDocumentRequiredDet : ActiveRecord<TblNewConDocumentRequiredDet>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblNewConDocumentRequiredDet()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblNewConDocumentRequiredDet(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblNewConDocumentRequiredDet(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblNewConDocumentRequiredDet(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblNewConDocumentRequiredDet", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarNewConDocumentReqID = new TableSchema.TableColumn(schema);
				colvarNewConDocumentReqID.ColumnName = "NewConDocumentReqID";
				colvarNewConDocumentReqID.DataType = DbType.Int32;
				colvarNewConDocumentReqID.MaxLength = 0;
				colvarNewConDocumentReqID.AutoIncrement = true;
				colvarNewConDocumentReqID.IsNullable = false;
				colvarNewConDocumentReqID.IsPrimaryKey = true;
				colvarNewConDocumentReqID.IsForeignKey = false;
				colvarNewConDocumentReqID.IsReadOnly = false;
				colvarNewConDocumentReqID.DefaultSetting = @"";
				colvarNewConDocumentReqID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewConDocumentReqID);
				
				TableSchema.TableColumn colvarDocumentID = new TableSchema.TableColumn(schema);
				colvarDocumentID.ColumnName = "DocumentID";
				colvarDocumentID.DataType = DbType.Int32;
				colvarDocumentID.MaxLength = 0;
				colvarDocumentID.AutoIncrement = false;
				colvarDocumentID.IsNullable = true;
				colvarDocumentID.IsPrimaryKey = false;
				colvarDocumentID.IsForeignKey = true;
				colvarDocumentID.IsReadOnly = false;
				colvarDocumentID.DefaultSetting = @"";
				
					colvarDocumentID.ForeignKeyTableName = "TblDocumentRequired";
				schema.Columns.Add(colvarDocumentID);
				
				TableSchema.TableColumn colvarNewConnectionID = new TableSchema.TableColumn(schema);
				colvarNewConnectionID.ColumnName = "NewConnectionID";
				colvarNewConnectionID.DataType = DbType.Int32;
				colvarNewConnectionID.MaxLength = 0;
				colvarNewConnectionID.AutoIncrement = false;
				colvarNewConnectionID.IsNullable = true;
				colvarNewConnectionID.IsPrimaryKey = false;
				colvarNewConnectionID.IsForeignKey = true;
				colvarNewConnectionID.IsReadOnly = false;
				colvarNewConnectionID.DefaultSetting = @"";
				
					colvarNewConnectionID.ForeignKeyTableName = "TblNewConnection";
				schema.Columns.Add(colvarNewConnectionID);
				
				TableSchema.TableColumn colvarIsResidential = new TableSchema.TableColumn(schema);
				colvarIsResidential.ColumnName = "IsResidential";
				colvarIsResidential.DataType = DbType.Boolean;
				colvarIsResidential.MaxLength = 0;
				colvarIsResidential.AutoIncrement = false;
				colvarIsResidential.IsNullable = true;
				colvarIsResidential.IsPrimaryKey = false;
				colvarIsResidential.IsForeignKey = false;
				colvarIsResidential.IsReadOnly = false;
				colvarIsResidential.DefaultSetting = @"";
				colvarIsResidential.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsResidential);
				
				TableSchema.TableColumn colvarIsCommercial = new TableSchema.TableColumn(schema);
				colvarIsCommercial.ColumnName = "IsCommercial";
				colvarIsCommercial.DataType = DbType.Boolean;
				colvarIsCommercial.MaxLength = 0;
				colvarIsCommercial.AutoIncrement = false;
				colvarIsCommercial.IsNullable = true;
				colvarIsCommercial.IsPrimaryKey = false;
				colvarIsCommercial.IsForeignKey = false;
				colvarIsCommercial.IsReadOnly = false;
				colvarIsCommercial.DefaultSetting = @"";
				colvarIsCommercial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCommercial);
				
				TableSchema.TableColumn colvarIsIndustrial = new TableSchema.TableColumn(schema);
				colvarIsIndustrial.ColumnName = "IsIndustrial";
				colvarIsIndustrial.DataType = DbType.Boolean;
				colvarIsIndustrial.MaxLength = 0;
				colvarIsIndustrial.AutoIncrement = false;
				colvarIsIndustrial.IsNullable = true;
				colvarIsIndustrial.IsPrimaryKey = false;
				colvarIsIndustrial.IsForeignKey = false;
				colvarIsIndustrial.IsReadOnly = false;
				colvarIsIndustrial.DefaultSetting = @"";
				colvarIsIndustrial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsIndustrial);
				
				TableSchema.TableColumn colvarIsAgriculture = new TableSchema.TableColumn(schema);
				colvarIsAgriculture.ColumnName = "IsAgriculture";
				colvarIsAgriculture.DataType = DbType.Boolean;
				colvarIsAgriculture.MaxLength = 0;
				colvarIsAgriculture.AutoIncrement = false;
				colvarIsAgriculture.IsNullable = true;
				colvarIsAgriculture.IsPrimaryKey = false;
				colvarIsAgriculture.IsForeignKey = false;
				colvarIsAgriculture.IsReadOnly = false;
				colvarIsAgriculture.DefaultSetting = @"";
				colvarIsAgriculture.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAgriculture);
				
				TableSchema.TableColumn colvarFileDocument = new TableSchema.TableColumn(schema);
				colvarFileDocument.ColumnName = "FileDocument";
				colvarFileDocument.DataType = DbType.AnsiString;
				colvarFileDocument.MaxLength = -1;
				colvarFileDocument.AutoIncrement = false;
				colvarFileDocument.IsNullable = true;
				colvarFileDocument.IsPrimaryKey = false;
				colvarFileDocument.IsForeignKey = false;
				colvarFileDocument.IsReadOnly = false;
				colvarFileDocument.DefaultSetting = @"";
				colvarFileDocument.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileDocument);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblNewConDocumentRequiredDet",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("NewConDocumentReqID")]
		[Bindable(true)]
		public int NewConDocumentReqID 
		{
			get { return GetColumnValue<int>(Columns.NewConDocumentReqID); }
			set { SetColumnValue(Columns.NewConDocumentReqID, value); }
		}
		  
		[XmlAttribute("DocumentID")]
		[Bindable(true)]
		public int? DocumentID 
		{
			get { return GetColumnValue<int?>(Columns.DocumentID); }
			set { SetColumnValue(Columns.DocumentID, value); }
		}
		  
		[XmlAttribute("NewConnectionID")]
		[Bindable(true)]
		public int? NewConnectionID 
		{
			get { return GetColumnValue<int?>(Columns.NewConnectionID); }
			set { SetColumnValue(Columns.NewConnectionID, value); }
		}
		  
		[XmlAttribute("IsResidential")]
		[Bindable(true)]
		public bool? IsResidential 
		{
			get { return GetColumnValue<bool?>(Columns.IsResidential); }
			set { SetColumnValue(Columns.IsResidential, value); }
		}
		  
		[XmlAttribute("IsCommercial")]
		[Bindable(true)]
		public bool? IsCommercial 
		{
			get { return GetColumnValue<bool?>(Columns.IsCommercial); }
			set { SetColumnValue(Columns.IsCommercial, value); }
		}
		  
		[XmlAttribute("IsIndustrial")]
		[Bindable(true)]
		public bool? IsIndustrial 
		{
			get { return GetColumnValue<bool?>(Columns.IsIndustrial); }
			set { SetColumnValue(Columns.IsIndustrial, value); }
		}
		  
		[XmlAttribute("IsAgriculture")]
		[Bindable(true)]
		public bool? IsAgriculture 
		{
			get { return GetColumnValue<bool?>(Columns.IsAgriculture); }
			set { SetColumnValue(Columns.IsAgriculture, value); }
		}
		  
		[XmlAttribute("FileDocument")]
		[Bindable(true)]
		public string FileDocument 
		{
			get { return GetColumnValue<string>(Columns.FileDocument); }
			set { SetColumnValue(Columns.FileDocument, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblDocumentRequired ActiveRecord object related to this TblNewConDocumentRequiredDet
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblDocumentRequired TblDocumentRequired
		{
			get { return SmartCBSDataAccess.TblDocumentRequired.FetchByID(this.DocumentID); }
			set { SetColumnValue("DocumentID", value.DocumentRequiredID); }
		}
		
		
		/// <summary>
		/// Returns a TblNewConnection ActiveRecord object related to this TblNewConDocumentRequiredDet
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblNewConnection TblNewConnection
		{
			get { return SmartCBSDataAccess.TblNewConnection.FetchByID(this.NewConnectionID); }
			set { SetColumnValue("NewConnectionID", value.NewConnectionID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varDocumentID,int? varNewConnectionID,bool? varIsResidential,bool? varIsCommercial,bool? varIsIndustrial,bool? varIsAgriculture,string varFileDocument,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblNewConDocumentRequiredDet item = new TblNewConDocumentRequiredDet();
			
			item.DocumentID = varDocumentID;
			
			item.NewConnectionID = varNewConnectionID;
			
			item.IsResidential = varIsResidential;
			
			item.IsCommercial = varIsCommercial;
			
			item.IsIndustrial = varIsIndustrial;
			
			item.IsAgriculture = varIsAgriculture;
			
			item.FileDocument = varFileDocument;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varNewConDocumentReqID,int? varDocumentID,int? varNewConnectionID,bool? varIsResidential,bool? varIsCommercial,bool? varIsIndustrial,bool? varIsAgriculture,string varFileDocument,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblNewConDocumentRequiredDet item = new TblNewConDocumentRequiredDet();
			
				item.NewConDocumentReqID = varNewConDocumentReqID;
			
				item.DocumentID = varDocumentID;
			
				item.NewConnectionID = varNewConnectionID;
			
				item.IsResidential = varIsResidential;
			
				item.IsCommercial = varIsCommercial;
			
				item.IsIndustrial = varIsIndustrial;
			
				item.IsAgriculture = varIsAgriculture;
			
				item.FileDocument = varFileDocument;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn NewConDocumentReqIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DocumentIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NewConnectionIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IsResidentialColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IsCommercialColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IsIndustrialColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsAgricultureColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FileDocumentColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string NewConDocumentReqID = @"NewConDocumentReqID";
			 public static string DocumentID = @"DocumentID";
			 public static string NewConnectionID = @"NewConnectionID";
			 public static string IsResidential = @"IsResidential";
			 public static string IsCommercial = @"IsCommercial";
			 public static string IsIndustrial = @"IsIndustrial";
			 public static string IsAgriculture = @"IsAgriculture";
			 public static string FileDocument = @"FileDocument";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
