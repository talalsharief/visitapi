using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeterReadingAdjustment class.
	/// </summary>
    [Serializable]
	public partial class TblMeterReadingAdjustmentCollection : ActiveList<TblMeterReadingAdjustment, TblMeterReadingAdjustmentCollection>
	{	   
		public TblMeterReadingAdjustmentCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterReadingAdjustmentCollection</returns>
		public TblMeterReadingAdjustmentCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeterReadingAdjustment o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeterReadingAdjustment table.
	/// </summary>
	[Serializable]
	public partial class TblMeterReadingAdjustment : ActiveRecord<TblMeterReadingAdjustment>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeterReadingAdjustment()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeterReadingAdjustment(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeterReadingAdjustment(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeterReadingAdjustment(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeterReadingAdjustment", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMeterReadingAdjustmentID = new TableSchema.TableColumn(schema);
				colvarMeterReadingAdjustmentID.ColumnName = "MeterReadingAdjustmentID";
				colvarMeterReadingAdjustmentID.DataType = DbType.Int32;
				colvarMeterReadingAdjustmentID.MaxLength = 0;
				colvarMeterReadingAdjustmentID.AutoIncrement = true;
				colvarMeterReadingAdjustmentID.IsNullable = false;
				colvarMeterReadingAdjustmentID.IsPrimaryKey = true;
				colvarMeterReadingAdjustmentID.IsForeignKey = false;
				colvarMeterReadingAdjustmentID.IsReadOnly = false;
				colvarMeterReadingAdjustmentID.DefaultSetting = @"";
				colvarMeterReadingAdjustmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterReadingAdjustmentID);
				
				TableSchema.TableColumn colvarPreviuosReading = new TableSchema.TableColumn(schema);
				colvarPreviuosReading.ColumnName = "PreviuosReading";
				colvarPreviuosReading.DataType = DbType.Int32;
				colvarPreviuosReading.MaxLength = 0;
				colvarPreviuosReading.AutoIncrement = false;
				colvarPreviuosReading.IsNullable = true;
				colvarPreviuosReading.IsPrimaryKey = false;
				colvarPreviuosReading.IsForeignKey = false;
				colvarPreviuosReading.IsReadOnly = false;
				colvarPreviuosReading.DefaultSetting = @"";
				colvarPreviuosReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreviuosReading);
				
				TableSchema.TableColumn colvarCurrentOldReading = new TableSchema.TableColumn(schema);
				colvarCurrentOldReading.ColumnName = "CurrentOldReading";
				colvarCurrentOldReading.DataType = DbType.Int32;
				colvarCurrentOldReading.MaxLength = 0;
				colvarCurrentOldReading.AutoIncrement = false;
				colvarCurrentOldReading.IsNullable = true;
				colvarCurrentOldReading.IsPrimaryKey = false;
				colvarCurrentOldReading.IsForeignKey = false;
				colvarCurrentOldReading.IsReadOnly = false;
				colvarCurrentOldReading.DefaultSetting = @"";
				colvarCurrentOldReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentOldReading);
				
				TableSchema.TableColumn colvarNewCurrentReading = new TableSchema.TableColumn(schema);
				colvarNewCurrentReading.ColumnName = "NewCurrentReading";
				colvarNewCurrentReading.DataType = DbType.Int32;
				colvarNewCurrentReading.MaxLength = 0;
				colvarNewCurrentReading.AutoIncrement = false;
				colvarNewCurrentReading.IsNullable = true;
				colvarNewCurrentReading.IsPrimaryKey = false;
				colvarNewCurrentReading.IsForeignKey = false;
				colvarNewCurrentReading.IsReadOnly = false;
				colvarNewCurrentReading.DefaultSetting = @"";
				colvarNewCurrentReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewCurrentReading);
				
				TableSchema.TableColumn colvarAdjustmentReadingDate = new TableSchema.TableColumn(schema);
				colvarAdjustmentReadingDate.ColumnName = "AdjustmentReadingDate";
				colvarAdjustmentReadingDate.DataType = DbType.DateTime;
				colvarAdjustmentReadingDate.MaxLength = 0;
				colvarAdjustmentReadingDate.AutoIncrement = false;
				colvarAdjustmentReadingDate.IsNullable = true;
				colvarAdjustmentReadingDate.IsPrimaryKey = false;
				colvarAdjustmentReadingDate.IsForeignKey = false;
				colvarAdjustmentReadingDate.IsReadOnly = false;
				colvarAdjustmentReadingDate.DefaultSetting = @"";
				colvarAdjustmentReadingDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdjustmentReadingDate);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarMeterReadingID = new TableSchema.TableColumn(schema);
				colvarMeterReadingID.ColumnName = "MeterReadingID";
				colvarMeterReadingID.DataType = DbType.Int32;
				colvarMeterReadingID.MaxLength = 0;
				colvarMeterReadingID.AutoIncrement = false;
				colvarMeterReadingID.IsNullable = true;
				colvarMeterReadingID.IsPrimaryKey = false;
				colvarMeterReadingID.IsForeignKey = true;
				colvarMeterReadingID.IsReadOnly = false;
				colvarMeterReadingID.DefaultSetting = @"";
				
					colvarMeterReadingID.ForeignKeyTableName = "TblMeterReading";
				schema.Columns.Add(colvarMeterReadingID);
				
				TableSchema.TableColumn colvarIsApprove = new TableSchema.TableColumn(schema);
				colvarIsApprove.ColumnName = "IsApprove";
				colvarIsApprove.DataType = DbType.Boolean;
				colvarIsApprove.MaxLength = 0;
				colvarIsApprove.AutoIncrement = false;
				colvarIsApprove.IsNullable = true;
				colvarIsApprove.IsPrimaryKey = false;
				colvarIsApprove.IsForeignKey = false;
				colvarIsApprove.IsReadOnly = false;
				colvarIsApprove.DefaultSetting = @"";
				colvarIsApprove.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsApprove);
				
				TableSchema.TableColumn colvarNewPreviuosReading = new TableSchema.TableColumn(schema);
				colvarNewPreviuosReading.ColumnName = "NewPreviuosReading";
				colvarNewPreviuosReading.DataType = DbType.Int32;
				colvarNewPreviuosReading.MaxLength = 0;
				colvarNewPreviuosReading.AutoIncrement = false;
				colvarNewPreviuosReading.IsNullable = true;
				colvarNewPreviuosReading.IsPrimaryKey = false;
				colvarNewPreviuosReading.IsForeignKey = false;
				colvarNewPreviuosReading.IsReadOnly = false;
				colvarNewPreviuosReading.DefaultSetting = @"";
				colvarNewPreviuosReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewPreviuosReading);
				
				TableSchema.TableColumn colvarNewMultiplyFactor = new TableSchema.TableColumn(schema);
				colvarNewMultiplyFactor.ColumnName = "NewMultiplyFactor";
				colvarNewMultiplyFactor.DataType = DbType.Decimal;
				colvarNewMultiplyFactor.MaxLength = 0;
				colvarNewMultiplyFactor.AutoIncrement = false;
				colvarNewMultiplyFactor.IsNullable = true;
				colvarNewMultiplyFactor.IsPrimaryKey = false;
				colvarNewMultiplyFactor.IsForeignKey = false;
				colvarNewMultiplyFactor.IsReadOnly = false;
				colvarNewMultiplyFactor.DefaultSetting = @"";
				colvarNewMultiplyFactor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewMultiplyFactor);
				
				TableSchema.TableColumn colvarMeterReadingMonth = new TableSchema.TableColumn(schema);
				colvarMeterReadingMonth.ColumnName = "MeterReadingMonth";
				colvarMeterReadingMonth.DataType = DbType.AnsiString;
				colvarMeterReadingMonth.MaxLength = 50;
				colvarMeterReadingMonth.AutoIncrement = false;
				colvarMeterReadingMonth.IsNullable = true;
				colvarMeterReadingMonth.IsPrimaryKey = false;
				colvarMeterReadingMonth.IsForeignKey = false;
				colvarMeterReadingMonth.IsReadOnly = false;
				colvarMeterReadingMonth.DefaultSetting = @"";
				colvarMeterReadingMonth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterReadingMonth);
				
				TableSchema.TableColumn colvarMeterReadingYear = new TableSchema.TableColumn(schema);
				colvarMeterReadingYear.ColumnName = "MeterReadingYear";
				colvarMeterReadingYear.DataType = DbType.AnsiString;
				colvarMeterReadingYear.MaxLength = 50;
				colvarMeterReadingYear.AutoIncrement = false;
				colvarMeterReadingYear.IsNullable = true;
				colvarMeterReadingYear.IsPrimaryKey = false;
				colvarMeterReadingYear.IsForeignKey = false;
				colvarMeterReadingYear.IsReadOnly = false;
				colvarMeterReadingYear.DefaultSetting = @"";
				colvarMeterReadingYear.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterReadingYear);
				
				TableSchema.TableColumn colvarNewUnitConsumed = new TableSchema.TableColumn(schema);
				colvarNewUnitConsumed.ColumnName = "NewUnitConsumed";
				colvarNewUnitConsumed.DataType = DbType.Decimal;
				colvarNewUnitConsumed.MaxLength = 0;
				colvarNewUnitConsumed.AutoIncrement = false;
				colvarNewUnitConsumed.IsNullable = true;
				colvarNewUnitConsumed.IsPrimaryKey = false;
				colvarNewUnitConsumed.IsForeignKey = false;
				colvarNewUnitConsumed.IsReadOnly = false;
				colvarNewUnitConsumed.DefaultSetting = @"";
				colvarNewUnitConsumed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewUnitConsumed);
				
				TableSchema.TableColumn colvarNewCLoad = new TableSchema.TableColumn(schema);
				colvarNewCLoad.ColumnName = "NewCLoad";
				colvarNewCLoad.DataType = DbType.Int32;
				colvarNewCLoad.MaxLength = 0;
				colvarNewCLoad.AutoIncrement = false;
				colvarNewCLoad.IsNullable = true;
				colvarNewCLoad.IsPrimaryKey = false;
				colvarNewCLoad.IsForeignKey = false;
				colvarNewCLoad.IsReadOnly = false;
				colvarNewCLoad.DefaultSetting = @"";
				colvarNewCLoad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewCLoad);
				
				TableSchema.TableColumn colvarDueDate = new TableSchema.TableColumn(schema);
				colvarDueDate.ColumnName = "DueDate";
				colvarDueDate.DataType = DbType.DateTime;
				colvarDueDate.MaxLength = 0;
				colvarDueDate.AutoIncrement = false;
				colvarDueDate.IsNullable = true;
				colvarDueDate.IsPrimaryKey = false;
				colvarDueDate.IsForeignKey = false;
				colvarDueDate.IsReadOnly = false;
				colvarDueDate.DefaultSetting = @"";
				colvarDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDueDate);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = 500;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarAttachment = new TableSchema.TableColumn(schema);
				colvarAttachment.ColumnName = "Attachment";
				colvarAttachment.DataType = DbType.AnsiString;
				colvarAttachment.MaxLength = 500;
				colvarAttachment.AutoIncrement = false;
				colvarAttachment.IsNullable = true;
				colvarAttachment.IsPrimaryKey = false;
				colvarAttachment.IsForeignKey = false;
				colvarAttachment.IsReadOnly = false;
				colvarAttachment.DefaultSetting = @"";
				colvarAttachment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAttachment);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeterReadingAdjustment",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MeterReadingAdjustmentID")]
		[Bindable(true)]
		public int MeterReadingAdjustmentID 
		{
			get { return GetColumnValue<int>(Columns.MeterReadingAdjustmentID); }
			set { SetColumnValue(Columns.MeterReadingAdjustmentID, value); }
		}
		  
		[XmlAttribute("PreviuosReading")]
		[Bindable(true)]
		public int? PreviuosReading 
		{
			get { return GetColumnValue<int?>(Columns.PreviuosReading); }
			set { SetColumnValue(Columns.PreviuosReading, value); }
		}
		  
		[XmlAttribute("CurrentOldReading")]
		[Bindable(true)]
		public int? CurrentOldReading 
		{
			get { return GetColumnValue<int?>(Columns.CurrentOldReading); }
			set { SetColumnValue(Columns.CurrentOldReading, value); }
		}
		  
		[XmlAttribute("NewCurrentReading")]
		[Bindable(true)]
		public int? NewCurrentReading 
		{
			get { return GetColumnValue<int?>(Columns.NewCurrentReading); }
			set { SetColumnValue(Columns.NewCurrentReading, value); }
		}
		  
		[XmlAttribute("AdjustmentReadingDate")]
		[Bindable(true)]
		public DateTime? AdjustmentReadingDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.AdjustmentReadingDate); }
			set { SetColumnValue(Columns.AdjustmentReadingDate, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("MeterReadingID")]
		[Bindable(true)]
		public int? MeterReadingID 
		{
			get { return GetColumnValue<int?>(Columns.MeterReadingID); }
			set { SetColumnValue(Columns.MeterReadingID, value); }
		}
		  
		[XmlAttribute("IsApprove")]
		[Bindable(true)]
		public bool? IsApprove 
		{
			get { return GetColumnValue<bool?>(Columns.IsApprove); }
			set { SetColumnValue(Columns.IsApprove, value); }
		}
		  
		[XmlAttribute("NewPreviuosReading")]
		[Bindable(true)]
		public int? NewPreviuosReading 
		{
			get { return GetColumnValue<int?>(Columns.NewPreviuosReading); }
			set { SetColumnValue(Columns.NewPreviuosReading, value); }
		}
		  
		[XmlAttribute("NewMultiplyFactor")]
		[Bindable(true)]
		public decimal? NewMultiplyFactor 
		{
			get { return GetColumnValue<decimal?>(Columns.NewMultiplyFactor); }
			set { SetColumnValue(Columns.NewMultiplyFactor, value); }
		}
		  
		[XmlAttribute("MeterReadingMonth")]
		[Bindable(true)]
		public string MeterReadingMonth 
		{
			get { return GetColumnValue<string>(Columns.MeterReadingMonth); }
			set { SetColumnValue(Columns.MeterReadingMonth, value); }
		}
		  
		[XmlAttribute("MeterReadingYear")]
		[Bindable(true)]
		public string MeterReadingYear 
		{
			get { return GetColumnValue<string>(Columns.MeterReadingYear); }
			set { SetColumnValue(Columns.MeterReadingYear, value); }
		}
		  
		[XmlAttribute("NewUnitConsumed")]
		[Bindable(true)]
		public decimal? NewUnitConsumed 
		{
			get { return GetColumnValue<decimal?>(Columns.NewUnitConsumed); }
			set { SetColumnValue(Columns.NewUnitConsumed, value); }
		}
		  
		[XmlAttribute("NewCLoad")]
		[Bindable(true)]
		public int? NewCLoad 
		{
			get { return GetColumnValue<int?>(Columns.NewCLoad); }
			set { SetColumnValue(Columns.NewCLoad, value); }
		}
		  
		[XmlAttribute("DueDate")]
		[Bindable(true)]
		public DateTime? DueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DueDate); }
			set { SetColumnValue(Columns.DueDate, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("Attachment")]
		[Bindable(true)]
		public string Attachment 
		{
			get { return GetColumnValue<string>(Columns.Attachment); }
			set { SetColumnValue(Columns.Attachment, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblMeterReading ActiveRecord object related to this TblMeterReadingAdjustment
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterReading TblMeterReading
		{
			get { return SmartCBSDataAccess.TblMeterReading.FetchByID(this.MeterReadingID); }
			set { SetColumnValue("MeterReadingID", value.MeterReadingID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varPreviuosReading,int? varCurrentOldReading,int? varNewCurrentReading,DateTime? varAdjustmentReadingDate,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varMeterReadingID,bool? varIsApprove,int? varNewPreviuosReading,decimal? varNewMultiplyFactor,string varMeterReadingMonth,string varMeterReadingYear,decimal? varNewUnitConsumed,int? varNewCLoad,DateTime? varDueDate,string varRemarks,string varAttachment)
		{
			TblMeterReadingAdjustment item = new TblMeterReadingAdjustment();
			
			item.PreviuosReading = varPreviuosReading;
			
			item.CurrentOldReading = varCurrentOldReading;
			
			item.NewCurrentReading = varNewCurrentReading;
			
			item.AdjustmentReadingDate = varAdjustmentReadingDate;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.MeterReadingID = varMeterReadingID;
			
			item.IsApprove = varIsApprove;
			
			item.NewPreviuosReading = varNewPreviuosReading;
			
			item.NewMultiplyFactor = varNewMultiplyFactor;
			
			item.MeterReadingMonth = varMeterReadingMonth;
			
			item.MeterReadingYear = varMeterReadingYear;
			
			item.NewUnitConsumed = varNewUnitConsumed;
			
			item.NewCLoad = varNewCLoad;
			
			item.DueDate = varDueDate;
			
			item.Remarks = varRemarks;
			
			item.Attachment = varAttachment;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMeterReadingAdjustmentID,int? varPreviuosReading,int? varCurrentOldReading,int? varNewCurrentReading,DateTime? varAdjustmentReadingDate,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varMeterReadingID,bool? varIsApprove,int? varNewPreviuosReading,decimal? varNewMultiplyFactor,string varMeterReadingMonth,string varMeterReadingYear,decimal? varNewUnitConsumed,int? varNewCLoad,DateTime? varDueDate,string varRemarks,string varAttachment)
		{
			TblMeterReadingAdjustment item = new TblMeterReadingAdjustment();
			
				item.MeterReadingAdjustmentID = varMeterReadingAdjustmentID;
			
				item.PreviuosReading = varPreviuosReading;
			
				item.CurrentOldReading = varCurrentOldReading;
			
				item.NewCurrentReading = varNewCurrentReading;
			
				item.AdjustmentReadingDate = varAdjustmentReadingDate;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.MeterReadingID = varMeterReadingID;
			
				item.IsApprove = varIsApprove;
			
				item.NewPreviuosReading = varNewPreviuosReading;
			
				item.NewMultiplyFactor = varNewMultiplyFactor;
			
				item.MeterReadingMonth = varMeterReadingMonth;
			
				item.MeterReadingYear = varMeterReadingYear;
			
				item.NewUnitConsumed = varNewUnitConsumed;
			
				item.NewCLoad = varNewCLoad;
			
				item.DueDate = varDueDate;
			
				item.Remarks = varRemarks;
			
				item.Attachment = varAttachment;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MeterReadingAdjustmentIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PreviuosReadingColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentOldReadingColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NewCurrentReadingColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AdjustmentReadingDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IsApproveColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NewPreviuosReadingColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NewMultiplyFactorColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingMonthColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingYearColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NewUnitConsumedColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NewCLoadColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn DueDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn AttachmentColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MeterReadingAdjustmentID = @"MeterReadingAdjustmentID";
			 public static string PreviuosReading = @"PreviuosReading";
			 public static string CurrentOldReading = @"CurrentOldReading";
			 public static string NewCurrentReading = @"NewCurrentReading";
			 public static string AdjustmentReadingDate = @"AdjustmentReadingDate";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string MeterReadingID = @"MeterReadingID";
			 public static string IsApprove = @"IsApprove";
			 public static string NewPreviuosReading = @"NewPreviuosReading";
			 public static string NewMultiplyFactor = @"NewMultiplyFactor";
			 public static string MeterReadingMonth = @"MeterReadingMonth";
			 public static string MeterReadingYear = @"MeterReadingYear";
			 public static string NewUnitConsumed = @"NewUnitConsumed";
			 public static string NewCLoad = @"NewCLoad";
			 public static string DueDate = @"DueDate";
			 public static string Remarks = @"Remarks";
			 public static string Attachment = @"Attachment";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
