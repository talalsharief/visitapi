using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeterReading class.
	/// </summary>
    [Serializable]
	public partial class TblMeterReadingCollection : ActiveList<TblMeterReading, TblMeterReadingCollection>
	{	   
		public TblMeterReadingCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterReadingCollection</returns>
		public TblMeterReadingCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeterReading o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeterReading table.
	/// </summary>
	[Serializable]
	public partial class TblMeterReading : ActiveRecord<TblMeterReading>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeterReading()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeterReading(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeterReading(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeterReading(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeterReading", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMeterReadingID = new TableSchema.TableColumn(schema);
				colvarMeterReadingID.ColumnName = "MeterReadingID";
				colvarMeterReadingID.DataType = DbType.Int32;
				colvarMeterReadingID.MaxLength = 0;
				colvarMeterReadingID.AutoIncrement = true;
				colvarMeterReadingID.IsNullable = false;
				colvarMeterReadingID.IsPrimaryKey = true;
				colvarMeterReadingID.IsForeignKey = false;
				colvarMeterReadingID.IsReadOnly = false;
				colvarMeterReadingID.DefaultSetting = @"";
				colvarMeterReadingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterReadingID);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = true;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarMeterReadModeID = new TableSchema.TableColumn(schema);
				colvarMeterReadModeID.ColumnName = "MeterReadModeID";
				colvarMeterReadModeID.DataType = DbType.Int32;
				colvarMeterReadModeID.MaxLength = 0;
				colvarMeterReadModeID.AutoIncrement = false;
				colvarMeterReadModeID.IsNullable = true;
				colvarMeterReadModeID.IsPrimaryKey = false;
				colvarMeterReadModeID.IsForeignKey = true;
				colvarMeterReadModeID.IsReadOnly = false;
				colvarMeterReadModeID.DefaultSetting = @"";
				
					colvarMeterReadModeID.ForeignKeyTableName = "TblMeterReadingMode";
				schema.Columns.Add(colvarMeterReadModeID);
				
				TableSchema.TableColumn colvarMeterReadingMonth = new TableSchema.TableColumn(schema);
				colvarMeterReadingMonth.ColumnName = "MeterReadingMonth";
				colvarMeterReadingMonth.DataType = DbType.Int32;
				colvarMeterReadingMonth.MaxLength = 0;
				colvarMeterReadingMonth.AutoIncrement = false;
				colvarMeterReadingMonth.IsNullable = true;
				colvarMeterReadingMonth.IsPrimaryKey = false;
				colvarMeterReadingMonth.IsForeignKey = false;
				colvarMeterReadingMonth.IsReadOnly = false;
				colvarMeterReadingMonth.DefaultSetting = @"";
				colvarMeterReadingMonth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterReadingMonth);
				
				TableSchema.TableColumn colvarMeterReadingYear = new TableSchema.TableColumn(schema);
				colvarMeterReadingYear.ColumnName = "MeterReadingYear";
				colvarMeterReadingYear.DataType = DbType.Int32;
				colvarMeterReadingYear.MaxLength = 0;
				colvarMeterReadingYear.AutoIncrement = false;
				colvarMeterReadingYear.IsNullable = true;
				colvarMeterReadingYear.IsPrimaryKey = false;
				colvarMeterReadingYear.IsForeignKey = false;
				colvarMeterReadingYear.IsReadOnly = false;
				colvarMeterReadingYear.DefaultSetting = @"";
				colvarMeterReadingYear.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterReadingYear);
				
				TableSchema.TableColumn colvarPreviousReading = new TableSchema.TableColumn(schema);
				colvarPreviousReading.ColumnName = "PreviousReading";
				colvarPreviousReading.DataType = DbType.Decimal;
				colvarPreviousReading.MaxLength = 0;
				colvarPreviousReading.AutoIncrement = false;
				colvarPreviousReading.IsNullable = true;
				colvarPreviousReading.IsPrimaryKey = false;
				colvarPreviousReading.IsForeignKey = false;
				colvarPreviousReading.IsReadOnly = false;
				colvarPreviousReading.DefaultSetting = @"";
				colvarPreviousReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreviousReading);
				
				TableSchema.TableColumn colvarCurrentReading = new TableSchema.TableColumn(schema);
				colvarCurrentReading.ColumnName = "CurrentReading";
				colvarCurrentReading.DataType = DbType.Decimal;
				colvarCurrentReading.MaxLength = 0;
				colvarCurrentReading.AutoIncrement = false;
				colvarCurrentReading.IsNullable = true;
				colvarCurrentReading.IsPrimaryKey = false;
				colvarCurrentReading.IsForeignKey = false;
				colvarCurrentReading.IsReadOnly = false;
				colvarCurrentReading.DefaultSetting = @"";
				colvarCurrentReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentReading);
				
				TableSchema.TableColumn colvarTotalUnits = new TableSchema.TableColumn(schema);
				colvarTotalUnits.ColumnName = "TotalUnits";
				colvarTotalUnits.DataType = DbType.Decimal;
				colvarTotalUnits.MaxLength = 0;
				colvarTotalUnits.AutoIncrement = false;
				colvarTotalUnits.IsNullable = false;
				colvarTotalUnits.IsPrimaryKey = false;
				colvarTotalUnits.IsForeignKey = false;
				colvarTotalUnits.IsReadOnly = false;
				colvarTotalUnits.DefaultSetting = @"";
				colvarTotalUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalUnits);
				
				TableSchema.TableColumn colvarMultiplyingFactor = new TableSchema.TableColumn(schema);
				colvarMultiplyingFactor.ColumnName = "MultiplyingFactor";
				colvarMultiplyingFactor.DataType = DbType.Decimal;
				colvarMultiplyingFactor.MaxLength = 0;
				colvarMultiplyingFactor.AutoIncrement = false;
				colvarMultiplyingFactor.IsNullable = true;
				colvarMultiplyingFactor.IsPrimaryKey = false;
				colvarMultiplyingFactor.IsForeignKey = false;
				colvarMultiplyingFactor.IsReadOnly = false;
				colvarMultiplyingFactor.DefaultSetting = @"";
				colvarMultiplyingFactor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiplyingFactor);
				
				TableSchema.TableColumn colvarUnitsConsumed = new TableSchema.TableColumn(schema);
				colvarUnitsConsumed.ColumnName = "UnitsConsumed";
				colvarUnitsConsumed.DataType = DbType.Decimal;
				colvarUnitsConsumed.MaxLength = 0;
				colvarUnitsConsumed.AutoIncrement = false;
				colvarUnitsConsumed.IsNullable = false;
				colvarUnitsConsumed.IsPrimaryKey = false;
				colvarUnitsConsumed.IsForeignKey = false;
				colvarUnitsConsumed.IsReadOnly = false;
				colvarUnitsConsumed.DefaultSetting = @"";
				colvarUnitsConsumed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitsConsumed);
				
				TableSchema.TableColumn colvarMeterReadingDate = new TableSchema.TableColumn(schema);
				colvarMeterReadingDate.ColumnName = "MeterReadingDate";
				colvarMeterReadingDate.DataType = DbType.DateTime;
				colvarMeterReadingDate.MaxLength = 0;
				colvarMeterReadingDate.AutoIncrement = false;
				colvarMeterReadingDate.IsNullable = false;
				colvarMeterReadingDate.IsPrimaryKey = false;
				colvarMeterReadingDate.IsForeignKey = false;
				colvarMeterReadingDate.IsReadOnly = false;
				colvarMeterReadingDate.DefaultSetting = @"";
				colvarMeterReadingDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterReadingDate);
				
				TableSchema.TableColumn colvarMeterReadBy = new TableSchema.TableColumn(schema);
				colvarMeterReadBy.ColumnName = "MeterReadBy";
				colvarMeterReadBy.DataType = DbType.Int32;
				colvarMeterReadBy.MaxLength = 0;
				colvarMeterReadBy.AutoIncrement = false;
				colvarMeterReadBy.IsNullable = true;
				colvarMeterReadBy.IsPrimaryKey = false;
				colvarMeterReadBy.IsForeignKey = true;
				colvarMeterReadBy.IsReadOnly = false;
				colvarMeterReadBy.DefaultSetting = @"";
				
					colvarMeterReadBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarMeterReadBy);
				
				TableSchema.TableColumn colvarULCreatedBy = new TableSchema.TableColumn(schema);
				colvarULCreatedBy.ColumnName = "ULCreatedBy";
				colvarULCreatedBy.DataType = DbType.Int32;
				colvarULCreatedBy.MaxLength = 0;
				colvarULCreatedBy.AutoIncrement = false;
				colvarULCreatedBy.IsNullable = true;
				colvarULCreatedBy.IsPrimaryKey = false;
				colvarULCreatedBy.IsForeignKey = true;
				colvarULCreatedBy.IsReadOnly = false;
				colvarULCreatedBy.DefaultSetting = @"";
				
					colvarULCreatedBy.ForeignKeyTableName = "UserLogin";
				schema.Columns.Add(colvarULCreatedBy);
				
				TableSchema.TableColumn colvarULUpdatedBy = new TableSchema.TableColumn(schema);
				colvarULUpdatedBy.ColumnName = "ULUpdatedBy";
				colvarULUpdatedBy.DataType = DbType.Int32;
				colvarULUpdatedBy.MaxLength = 0;
				colvarULUpdatedBy.AutoIncrement = false;
				colvarULUpdatedBy.IsNullable = true;
				colvarULUpdatedBy.IsPrimaryKey = false;
				colvarULUpdatedBy.IsForeignKey = false;
				colvarULUpdatedBy.IsReadOnly = false;
				colvarULUpdatedBy.DefaultSetting = @"";
				colvarULUpdatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarULUpdatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = true;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				
					colvarConsumerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarCLoad = new TableSchema.TableColumn(schema);
				colvarCLoad.ColumnName = "CLoad";
				colvarCLoad.DataType = DbType.Int32;
				colvarCLoad.MaxLength = 0;
				colvarCLoad.AutoIncrement = false;
				colvarCLoad.IsNullable = true;
				colvarCLoad.IsPrimaryKey = false;
				colvarCLoad.IsForeignKey = false;
				colvarCLoad.IsReadOnly = false;
				colvarCLoad.DefaultSetting = @"";
				colvarCLoad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCLoad);
				
				TableSchema.TableColumn colvarMeterImage = new TableSchema.TableColumn(schema);
				colvarMeterImage.ColumnName = "MeterImage";
				colvarMeterImage.DataType = DbType.AnsiString;
				colvarMeterImage.MaxLength = -1;
				colvarMeterImage.AutoIncrement = false;
				colvarMeterImage.IsNullable = true;
				colvarMeterImage.IsPrimaryKey = false;
				colvarMeterImage.IsForeignKey = false;
				colvarMeterImage.IsReadOnly = false;
				colvarMeterImage.DefaultSetting = @"";
				colvarMeterImage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterImage);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarReadingInsertedBy = new TableSchema.TableColumn(schema);
				colvarReadingInsertedBy.ColumnName = "ReadingInsertedBy";
				colvarReadingInsertedBy.DataType = DbType.Int32;
				colvarReadingInsertedBy.MaxLength = 0;
				colvarReadingInsertedBy.AutoIncrement = false;
				colvarReadingInsertedBy.IsNullable = true;
				colvarReadingInsertedBy.IsPrimaryKey = false;
				colvarReadingInsertedBy.IsForeignKey = true;
				colvarReadingInsertedBy.IsReadOnly = false;
				colvarReadingInsertedBy.DefaultSetting = @"";
				
					colvarReadingInsertedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarReadingInsertedBy);
				
				TableSchema.TableColumn colvarMeterReadingUserID = new TableSchema.TableColumn(schema);
				colvarMeterReadingUserID.ColumnName = "MeterReadingUserID";
				colvarMeterReadingUserID.DataType = DbType.Int32;
				colvarMeterReadingUserID.MaxLength = 0;
				colvarMeterReadingUserID.AutoIncrement = false;
				colvarMeterReadingUserID.IsNullable = true;
				colvarMeterReadingUserID.IsPrimaryKey = false;
				colvarMeterReadingUserID.IsForeignKey = true;
				colvarMeterReadingUserID.IsReadOnly = false;
				colvarMeterReadingUserID.DefaultSetting = @"";
				
					colvarMeterReadingUserID.ForeignKeyTableName = "TblMeterReadingUser";
				schema.Columns.Add(colvarMeterReadingUserID);
				
				TableSchema.TableColumn colvarIsSupplementary = new TableSchema.TableColumn(schema);
				colvarIsSupplementary.ColumnName = "IsSupplementary";
				colvarIsSupplementary.DataType = DbType.Boolean;
				colvarIsSupplementary.MaxLength = 0;
				colvarIsSupplementary.AutoIncrement = false;
				colvarIsSupplementary.IsNullable = true;
				colvarIsSupplementary.IsPrimaryKey = false;
				colvarIsSupplementary.IsForeignKey = false;
				colvarIsSupplementary.IsReadOnly = false;
				colvarIsSupplementary.DefaultSetting = @"";
				colvarIsSupplementary.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSupplementary);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeterReading",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MeterReadingID")]
		[Bindable(true)]
		public int MeterReadingID 
		{
			get { return GetColumnValue<int>(Columns.MeterReadingID); }
			set { SetColumnValue(Columns.MeterReadingID, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int? MeterID 
		{
			get { return GetColumnValue<int?>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("MeterReadModeID")]
		[Bindable(true)]
		public int? MeterReadModeID 
		{
			get { return GetColumnValue<int?>(Columns.MeterReadModeID); }
			set { SetColumnValue(Columns.MeterReadModeID, value); }
		}
		  
		[XmlAttribute("MeterReadingMonth")]
		[Bindable(true)]
		public int? MeterReadingMonth 
		{
			get { return GetColumnValue<int?>(Columns.MeterReadingMonth); }
			set { SetColumnValue(Columns.MeterReadingMonth, value); }
		}
		  
		[XmlAttribute("MeterReadingYear")]
		[Bindable(true)]
		public int? MeterReadingYear 
		{
			get { return GetColumnValue<int?>(Columns.MeterReadingYear); }
			set { SetColumnValue(Columns.MeterReadingYear, value); }
		}
		  
		[XmlAttribute("PreviousReading")]
		[Bindable(true)]
		public decimal? PreviousReading 
		{
			get { return GetColumnValue<decimal?>(Columns.PreviousReading); }
			set { SetColumnValue(Columns.PreviousReading, value); }
		}
		  
		[XmlAttribute("CurrentReading")]
		[Bindable(true)]
		public decimal? CurrentReading 
		{
			get { return GetColumnValue<decimal?>(Columns.CurrentReading); }
			set { SetColumnValue(Columns.CurrentReading, value); }
		}
		  
		[XmlAttribute("TotalUnits")]
		[Bindable(true)]
		public decimal TotalUnits 
		{
			get { return GetColumnValue<decimal>(Columns.TotalUnits); }
			set { SetColumnValue(Columns.TotalUnits, value); }
		}
		  
		[XmlAttribute("MultiplyingFactor")]
		[Bindable(true)]
		public decimal? MultiplyingFactor 
		{
			get { return GetColumnValue<decimal?>(Columns.MultiplyingFactor); }
			set { SetColumnValue(Columns.MultiplyingFactor, value); }
		}
		  
		[XmlAttribute("UnitsConsumed")]
		[Bindable(true)]
		public decimal UnitsConsumed 
		{
			get { return GetColumnValue<decimal>(Columns.UnitsConsumed); }
			set { SetColumnValue(Columns.UnitsConsumed, value); }
		}
		  
		[XmlAttribute("MeterReadingDate")]
		[Bindable(true)]
		public DateTime MeterReadingDate 
		{
			get { return GetColumnValue<DateTime>(Columns.MeterReadingDate); }
			set { SetColumnValue(Columns.MeterReadingDate, value); }
		}
		  
		[XmlAttribute("MeterReadBy")]
		[Bindable(true)]
		public int? MeterReadBy 
		{
			get { return GetColumnValue<int?>(Columns.MeterReadBy); }
			set { SetColumnValue(Columns.MeterReadBy, value); }
		}
		  
		[XmlAttribute("ULCreatedBy")]
		[Bindable(true)]
		public int? ULCreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.ULCreatedBy); }
			set { SetColumnValue(Columns.ULCreatedBy, value); }
		}
		  
		[XmlAttribute("ULUpdatedBy")]
		[Bindable(true)]
		public int? ULUpdatedBy 
		{
			get { return GetColumnValue<int?>(Columns.ULUpdatedBy); }
			set { SetColumnValue(Columns.ULUpdatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("CLoad")]
		[Bindable(true)]
		public int? CLoad 
		{
			get { return GetColumnValue<int?>(Columns.CLoad); }
			set { SetColumnValue(Columns.CLoad, value); }
		}
		  
		[XmlAttribute("MeterImage")]
		[Bindable(true)]
		public string MeterImage 
		{
			get { return GetColumnValue<string>(Columns.MeterImage); }
			set { SetColumnValue(Columns.MeterImage, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("ReadingInsertedBy")]
		[Bindable(true)]
		public int? ReadingInsertedBy 
		{
			get { return GetColumnValue<int?>(Columns.ReadingInsertedBy); }
			set { SetColumnValue(Columns.ReadingInsertedBy, value); }
		}
		  
		[XmlAttribute("MeterReadingUserID")]
		[Bindable(true)]
		public int? MeterReadingUserID 
		{
			get { return GetColumnValue<int?>(Columns.MeterReadingUserID); }
			set { SetColumnValue(Columns.MeterReadingUserID, value); }
		}
		  
		[XmlAttribute("IsSupplementary")]
		[Bindable(true)]
		public bool? IsSupplementary 
		{
			get { return GetColumnValue<bool?>(Columns.IsSupplementary); }
			set { SetColumnValue(Columns.IsSupplementary, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblBillCollection TblBillRecords()
		{
			return new SmartCBSDataAccess.TblBillCollection().Where(TblBill.Columns.MeterReadingID, MeterReadingID).Load();
		}
		public SmartCBSDataAccess.TblMeterReadingAdjustmentCollection TblMeterReadingAdjustmentRecords()
		{
			return new SmartCBSDataAccess.TblMeterReadingAdjustmentCollection().Where(TblMeterReadingAdjustment.Columns.MeterReadingID, MeterReadingID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblMeterReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblMeterReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.ConsumerID); }
			set { SetColumnValue("ConsumerID", value.CunsumerID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.MeterReadBy); }
			set { SetColumnValue("MeterReadBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployeeToReadingInsertedBy
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.ReadingInsertedBy); }
			set { SetColumnValue("ReadingInsertedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblMeterReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterReadingMode ActiveRecord object related to this TblMeterReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterReadingMode TblMeterReadingMode
		{
			get { return SmartCBSDataAccess.TblMeterReadingMode.FetchByID(this.MeterReadModeID); }
			set { SetColumnValue("MeterReadModeID", value.MeterReadModeID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterReadingUser ActiveRecord object related to this TblMeterReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterReadingUser TblMeterReadingUser
		{
			get { return SmartCBSDataAccess.TblMeterReadingUser.FetchByID(this.MeterReadingUserID); }
			set { SetColumnValue("MeterReadingUserID", value.MeterReadingUserID); }
		}
		
		
		/// <summary>
		/// Returns a UserLogin ActiveRecord object related to this TblMeterReading
		/// 
		/// </summary>
		public SmartCBSDataAccess.UserLogin UserLogin
		{
			get { return SmartCBSDataAccess.UserLogin.FetchByID(this.ULCreatedBy); }
			set { SetColumnValue("ULCreatedBy", value.UserLoginId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varMeterID,int? varMeterReadModeID,int? varMeterReadingMonth,int? varMeterReadingYear,decimal? varPreviousReading,decimal? varCurrentReading,decimal varTotalUnits,decimal? varMultiplyingFactor,decimal varUnitsConsumed,DateTime varMeterReadingDate,int? varMeterReadBy,int? varULCreatedBy,int? varULUpdatedBy,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varConsumerID,int? varCLoad,string varMeterImage,int? varBranchID,int? varReadingInsertedBy,int? varMeterReadingUserID,bool? varIsSupplementary)
		{
			TblMeterReading item = new TblMeterReading();
			
			item.MeterID = varMeterID;
			
			item.MeterReadModeID = varMeterReadModeID;
			
			item.MeterReadingMonth = varMeterReadingMonth;
			
			item.MeterReadingYear = varMeterReadingYear;
			
			item.PreviousReading = varPreviousReading;
			
			item.CurrentReading = varCurrentReading;
			
			item.TotalUnits = varTotalUnits;
			
			item.MultiplyingFactor = varMultiplyingFactor;
			
			item.UnitsConsumed = varUnitsConsumed;
			
			item.MeterReadingDate = varMeterReadingDate;
			
			item.MeterReadBy = varMeterReadBy;
			
			item.ULCreatedBy = varULCreatedBy;
			
			item.ULUpdatedBy = varULUpdatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.ConsumerID = varConsumerID;
			
			item.CLoad = varCLoad;
			
			item.MeterImage = varMeterImage;
			
			item.BranchID = varBranchID;
			
			item.ReadingInsertedBy = varReadingInsertedBy;
			
			item.MeterReadingUserID = varMeterReadingUserID;
			
			item.IsSupplementary = varIsSupplementary;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMeterReadingID,int? varMeterID,int? varMeterReadModeID,int? varMeterReadingMonth,int? varMeterReadingYear,decimal? varPreviousReading,decimal? varCurrentReading,decimal varTotalUnits,decimal? varMultiplyingFactor,decimal varUnitsConsumed,DateTime varMeterReadingDate,int? varMeterReadBy,int? varULCreatedBy,int? varULUpdatedBy,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varConsumerID,int? varCLoad,string varMeterImage,int? varBranchID,int? varReadingInsertedBy,int? varMeterReadingUserID,bool? varIsSupplementary)
		{
			TblMeterReading item = new TblMeterReading();
			
				item.MeterReadingID = varMeterReadingID;
			
				item.MeterID = varMeterID;
			
				item.MeterReadModeID = varMeterReadModeID;
			
				item.MeterReadingMonth = varMeterReadingMonth;
			
				item.MeterReadingYear = varMeterReadingYear;
			
				item.PreviousReading = varPreviousReading;
			
				item.CurrentReading = varCurrentReading;
			
				item.TotalUnits = varTotalUnits;
			
				item.MultiplyingFactor = varMultiplyingFactor;
			
				item.UnitsConsumed = varUnitsConsumed;
			
				item.MeterReadingDate = varMeterReadingDate;
			
				item.MeterReadBy = varMeterReadBy;
			
				item.ULCreatedBy = varULCreatedBy;
			
				item.ULUpdatedBy = varULUpdatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.ConsumerID = varConsumerID;
			
				item.CLoad = varCLoad;
			
				item.MeterImage = varMeterImage;
			
				item.BranchID = varBranchID;
			
				item.ReadingInsertedBy = varReadingInsertedBy;
			
				item.MeterReadingUserID = varMeterReadingUserID;
			
				item.IsSupplementary = varIsSupplementary;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MeterReadingIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadModeIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingMonthColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingYearColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PreviousReadingColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentReadingColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalUnitsColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiplyingFactorColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitsConsumedColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingDateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadByColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ULCreatedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ULUpdatedByColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn CLoadColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterImageColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ReadingInsertedByColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingUserIDColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn IsSupplementaryColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MeterReadingID = @"MeterReadingID";
			 public static string MeterID = @"MeterID";
			 public static string MeterReadModeID = @"MeterReadModeID";
			 public static string MeterReadingMonth = @"MeterReadingMonth";
			 public static string MeterReadingYear = @"MeterReadingYear";
			 public static string PreviousReading = @"PreviousReading";
			 public static string CurrentReading = @"CurrentReading";
			 public static string TotalUnits = @"TotalUnits";
			 public static string MultiplyingFactor = @"MultiplyingFactor";
			 public static string UnitsConsumed = @"UnitsConsumed";
			 public static string MeterReadingDate = @"MeterReadingDate";
			 public static string MeterReadBy = @"MeterReadBy";
			 public static string ULCreatedBy = @"ULCreatedBy";
			 public static string ULUpdatedBy = @"ULUpdatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string ConsumerID = @"ConsumerID";
			 public static string CLoad = @"CLoad";
			 public static string MeterImage = @"MeterImage";
			 public static string BranchID = @"BranchID";
			 public static string ReadingInsertedBy = @"ReadingInsertedBy";
			 public static string MeterReadingUserID = @"MeterReadingUserID";
			 public static string IsSupplementary = @"IsSupplementary";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
