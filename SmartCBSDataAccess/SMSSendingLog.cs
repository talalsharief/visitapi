using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the SMSSendingLog class.
	/// </summary>
    [Serializable]
	public partial class SMSSendingLogCollection : ActiveList<SMSSendingLog, SMSSendingLogCollection>
	{	   
		public SMSSendingLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SMSSendingLogCollection</returns>
		public SMSSendingLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SMSSendingLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SMSSendingLog table.
	/// </summary>
	[Serializable]
	public partial class SMSSendingLog : ActiveRecord<SMSSendingLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SMSSendingLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SMSSendingLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SMSSendingLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SMSSendingLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SMSSendingLog", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarSMSSendingLogID = new TableSchema.TableColumn(schema);
				colvarSMSSendingLogID.ColumnName = "SMSSendingLogID";
				colvarSMSSendingLogID.DataType = DbType.Int32;
				colvarSMSSendingLogID.MaxLength = 0;
				colvarSMSSendingLogID.AutoIncrement = true;
				colvarSMSSendingLogID.IsNullable = false;
				colvarSMSSendingLogID.IsPrimaryKey = true;
				colvarSMSSendingLogID.IsForeignKey = false;
				colvarSMSSendingLogID.IsReadOnly = false;
				colvarSMSSendingLogID.DefaultSetting = @"";
				colvarSMSSendingLogID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSMSSendingLogID);
				
				TableSchema.TableColumn colvarSMSSentText = new TableSchema.TableColumn(schema);
				colvarSMSSentText.ColumnName = "SMSSentText";
				colvarSMSSentText.DataType = DbType.AnsiString;
				colvarSMSSentText.MaxLength = -1;
				colvarSMSSentText.AutoIncrement = false;
				colvarSMSSentText.IsNullable = true;
				colvarSMSSentText.IsPrimaryKey = false;
				colvarSMSSentText.IsForeignKey = false;
				colvarSMSSentText.IsReadOnly = false;
				colvarSMSSentText.DefaultSetting = @"";
				colvarSMSSentText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSMSSentText);
				
				TableSchema.TableColumn colvarSendingTime = new TableSchema.TableColumn(schema);
				colvarSendingTime.ColumnName = "SendingTime";
				colvarSendingTime.DataType = DbType.DateTime;
				colvarSendingTime.MaxLength = 0;
				colvarSendingTime.AutoIncrement = false;
				colvarSendingTime.IsNullable = true;
				colvarSendingTime.IsPrimaryKey = false;
				colvarSendingTime.IsForeignKey = false;
				colvarSendingTime.IsReadOnly = false;
				
						colvarSendingTime.DefaultSetting = @"(getdate())";
				colvarSendingTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSendingTime);
				
				TableSchema.TableColumn colvarSentToNo = new TableSchema.TableColumn(schema);
				colvarSentToNo.ColumnName = "SentToNo";
				colvarSentToNo.DataType = DbType.AnsiString;
				colvarSentToNo.MaxLength = 50;
				colvarSentToNo.AutoIncrement = false;
				colvarSentToNo.IsNullable = true;
				colvarSentToNo.IsPrimaryKey = false;
				colvarSentToNo.IsForeignKey = false;
				colvarSentToNo.IsReadOnly = false;
				colvarSentToNo.DefaultSetting = @"";
				colvarSentToNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSentToNo);
				
				TableSchema.TableColumn colvarIsSentSuccessfully = new TableSchema.TableColumn(schema);
				colvarIsSentSuccessfully.ColumnName = "isSentSuccessfully";
				colvarIsSentSuccessfully.DataType = DbType.Boolean;
				colvarIsSentSuccessfully.MaxLength = 0;
				colvarIsSentSuccessfully.AutoIncrement = false;
				colvarIsSentSuccessfully.IsNullable = true;
				colvarIsSentSuccessfully.IsPrimaryKey = false;
				colvarIsSentSuccessfully.IsForeignKey = false;
				colvarIsSentSuccessfully.IsReadOnly = false;
				colvarIsSentSuccessfully.DefaultSetting = @"";
				colvarIsSentSuccessfully.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSentSuccessfully);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("SMSSendingLog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("SMSSendingLogID")]
		[Bindable(true)]
		public int SMSSendingLogID 
		{
			get { return GetColumnValue<int>(Columns.SMSSendingLogID); }
			set { SetColumnValue(Columns.SMSSendingLogID, value); }
		}
		  
		[XmlAttribute("SMSSentText")]
		[Bindable(true)]
		public string SMSSentText 
		{
			get { return GetColumnValue<string>(Columns.SMSSentText); }
			set { SetColumnValue(Columns.SMSSentText, value); }
		}
		  
		[XmlAttribute("SendingTime")]
		[Bindable(true)]
		public DateTime? SendingTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.SendingTime); }
			set { SetColumnValue(Columns.SendingTime, value); }
		}
		  
		[XmlAttribute("SentToNo")]
		[Bindable(true)]
		public string SentToNo 
		{
			get { return GetColumnValue<string>(Columns.SentToNo); }
			set { SetColumnValue(Columns.SentToNo, value); }
		}
		  
		[XmlAttribute("IsSentSuccessfully")]
		[Bindable(true)]
		public bool? IsSentSuccessfully 
		{
			get { return GetColumnValue<bool?>(Columns.IsSentSuccessfully); }
			set { SetColumnValue(Columns.IsSentSuccessfully, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSMSSentText,DateTime? varSendingTime,string varSentToNo,bool? varIsSentSuccessfully)
		{
			SMSSendingLog item = new SMSSendingLog();
			
			item.SMSSentText = varSMSSentText;
			
			item.SendingTime = varSendingTime;
			
			item.SentToNo = varSentToNo;
			
			item.IsSentSuccessfully = varIsSentSuccessfully;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varSMSSendingLogID,string varSMSSentText,DateTime? varSendingTime,string varSentToNo,bool? varIsSentSuccessfully)
		{
			SMSSendingLog item = new SMSSendingLog();
			
				item.SMSSendingLogID = varSMSSendingLogID;
			
				item.SMSSentText = varSMSSentText;
			
				item.SendingTime = varSendingTime;
			
				item.SentToNo = varSentToNo;
			
				item.IsSentSuccessfully = varIsSentSuccessfully;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SMSSendingLogIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SMSSentTextColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SendingTimeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SentToNoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IsSentSuccessfullyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string SMSSendingLogID = @"SMSSendingLogID";
			 public static string SMSSentText = @"SMSSentText";
			 public static string SendingTime = @"SendingTime";
			 public static string SentToNo = @"SentToNo";
			 public static string IsSentSuccessfully = @"isSentSuccessfully";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
