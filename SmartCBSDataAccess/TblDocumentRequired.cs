using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblDocumentRequired class.
	/// </summary>
    [Serializable]
	public partial class TblDocumentRequiredCollection : ActiveList<TblDocumentRequired, TblDocumentRequiredCollection>
	{	   
		public TblDocumentRequiredCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblDocumentRequiredCollection</returns>
		public TblDocumentRequiredCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblDocumentRequired o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblDocumentRequired table.
	/// </summary>
	[Serializable]
	public partial class TblDocumentRequired : ActiveRecord<TblDocumentRequired>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblDocumentRequired()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblDocumentRequired(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblDocumentRequired(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblDocumentRequired(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblDocumentRequired", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDocumentRequiredID = new TableSchema.TableColumn(schema);
				colvarDocumentRequiredID.ColumnName = "DocumentRequiredID";
				colvarDocumentRequiredID.DataType = DbType.Int32;
				colvarDocumentRequiredID.MaxLength = 0;
				colvarDocumentRequiredID.AutoIncrement = true;
				colvarDocumentRequiredID.IsNullable = false;
				colvarDocumentRequiredID.IsPrimaryKey = true;
				colvarDocumentRequiredID.IsForeignKey = false;
				colvarDocumentRequiredID.IsReadOnly = false;
				colvarDocumentRequiredID.DefaultSetting = @"";
				colvarDocumentRequiredID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentRequiredID);
				
				TableSchema.TableColumn colvarDocumentRequired = new TableSchema.TableColumn(schema);
				colvarDocumentRequired.ColumnName = "DocumentRequired";
				colvarDocumentRequired.DataType = DbType.AnsiString;
				colvarDocumentRequired.MaxLength = -1;
				colvarDocumentRequired.AutoIncrement = false;
				colvarDocumentRequired.IsNullable = true;
				colvarDocumentRequired.IsPrimaryKey = false;
				colvarDocumentRequired.IsForeignKey = false;
				colvarDocumentRequired.IsReadOnly = false;
				colvarDocumentRequired.DefaultSetting = @"";
				colvarDocumentRequired.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentRequired);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				TableSchema.TableColumn colvarForResidential = new TableSchema.TableColumn(schema);
				colvarForResidential.ColumnName = "ForResidential";
				colvarForResidential.DataType = DbType.Boolean;
				colvarForResidential.MaxLength = 0;
				colvarForResidential.AutoIncrement = false;
				colvarForResidential.IsNullable = true;
				colvarForResidential.IsPrimaryKey = false;
				colvarForResidential.IsForeignKey = false;
				colvarForResidential.IsReadOnly = false;
				colvarForResidential.DefaultSetting = @"";
				colvarForResidential.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForResidential);
				
				TableSchema.TableColumn colvarForCommercial = new TableSchema.TableColumn(schema);
				colvarForCommercial.ColumnName = "ForCommercial";
				colvarForCommercial.DataType = DbType.Boolean;
				colvarForCommercial.MaxLength = 0;
				colvarForCommercial.AutoIncrement = false;
				colvarForCommercial.IsNullable = true;
				colvarForCommercial.IsPrimaryKey = false;
				colvarForCommercial.IsForeignKey = false;
				colvarForCommercial.IsReadOnly = false;
				colvarForCommercial.DefaultSetting = @"";
				colvarForCommercial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForCommercial);
				
				TableSchema.TableColumn colvarForIndustrial = new TableSchema.TableColumn(schema);
				colvarForIndustrial.ColumnName = "ForIndustrial";
				colvarForIndustrial.DataType = DbType.Boolean;
				colvarForIndustrial.MaxLength = 0;
				colvarForIndustrial.AutoIncrement = false;
				colvarForIndustrial.IsNullable = true;
				colvarForIndustrial.IsPrimaryKey = false;
				colvarForIndustrial.IsForeignKey = false;
				colvarForIndustrial.IsReadOnly = false;
				colvarForIndustrial.DefaultSetting = @"";
				colvarForIndustrial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForIndustrial);
				
				TableSchema.TableColumn colvarForAgriculture = new TableSchema.TableColumn(schema);
				colvarForAgriculture.ColumnName = "ForAgriculture";
				colvarForAgriculture.DataType = DbType.Boolean;
				colvarForAgriculture.MaxLength = 0;
				colvarForAgriculture.AutoIncrement = false;
				colvarForAgriculture.IsNullable = true;
				colvarForAgriculture.IsPrimaryKey = false;
				colvarForAgriculture.IsForeignKey = false;
				colvarForAgriculture.IsReadOnly = false;
				colvarForAgriculture.DefaultSetting = @"";
				colvarForAgriculture.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForAgriculture);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblDocumentRequired",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DocumentRequiredID")]
		[Bindable(true)]
		public int DocumentRequiredID 
		{
			get { return GetColumnValue<int>(Columns.DocumentRequiredID); }
			set { SetColumnValue(Columns.DocumentRequiredID, value); }
		}
		  
		[XmlAttribute("DocumentRequired")]
		[Bindable(true)]
		public string DocumentRequired 
		{
			get { return GetColumnValue<string>(Columns.DocumentRequired); }
			set { SetColumnValue(Columns.DocumentRequired, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		  
		[XmlAttribute("ForResidential")]
		[Bindable(true)]
		public bool? ForResidential 
		{
			get { return GetColumnValue<bool?>(Columns.ForResidential); }
			set { SetColumnValue(Columns.ForResidential, value); }
		}
		  
		[XmlAttribute("ForCommercial")]
		[Bindable(true)]
		public bool? ForCommercial 
		{
			get { return GetColumnValue<bool?>(Columns.ForCommercial); }
			set { SetColumnValue(Columns.ForCommercial, value); }
		}
		  
		[XmlAttribute("ForIndustrial")]
		[Bindable(true)]
		public bool? ForIndustrial 
		{
			get { return GetColumnValue<bool?>(Columns.ForIndustrial); }
			set { SetColumnValue(Columns.ForIndustrial, value); }
		}
		  
		[XmlAttribute("ForAgriculture")]
		[Bindable(true)]
		public bool? ForAgriculture 
		{
			get { return GetColumnValue<bool?>(Columns.ForAgriculture); }
			set { SetColumnValue(Columns.ForAgriculture, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblMeterDocumentCollection TblMeterDocumentRecords()
		{
			return new SmartCBSDataAccess.TblMeterDocumentCollection().Where(TblMeterDocument.Columns.DocumentID, DocumentRequiredID).Load();
		}
		public SmartCBSDataAccess.TblNewConDocumentRequiredDetCollection TblNewConDocumentRequiredDetRecords()
		{
			return new SmartCBSDataAccess.TblNewConDocumentRequiredDetCollection().Where(TblNewConDocumentRequiredDet.Columns.DocumentID, DocumentRequiredID).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDocumentRequired,bool? varIsActive,bool? varForResidential,bool? varForCommercial,bool? varForIndustrial,bool? varForAgriculture,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblDocumentRequired item = new TblDocumentRequired();
			
			item.DocumentRequired = varDocumentRequired;
			
			item.IsActive = varIsActive;
			
			item.ForResidential = varForResidential;
			
			item.ForCommercial = varForCommercial;
			
			item.ForIndustrial = varForIndustrial;
			
			item.ForAgriculture = varForAgriculture;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDocumentRequiredID,string varDocumentRequired,bool? varIsActive,bool? varForResidential,bool? varForCommercial,bool? varForIndustrial,bool? varForAgriculture,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblDocumentRequired item = new TblDocumentRequired();
			
				item.DocumentRequiredID = varDocumentRequiredID;
			
				item.DocumentRequired = varDocumentRequired;
			
				item.IsActive = varIsActive;
			
				item.ForResidential = varForResidential;
			
				item.ForCommercial = varForCommercial;
			
				item.ForIndustrial = varForIndustrial;
			
				item.ForAgriculture = varForAgriculture;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DocumentRequiredIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DocumentRequiredColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ForResidentialColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ForCommercialColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ForIndustrialColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ForAgricultureColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DocumentRequiredID = @"DocumentRequiredID";
			 public static string DocumentRequired = @"DocumentRequired";
			 public static string IsActive = @"IsActive";
			 public static string ForResidential = @"ForResidential";
			 public static string ForCommercial = @"ForCommercial";
			 public static string ForIndustrial = @"ForIndustrial";
			 public static string ForAgriculture = @"ForAgriculture";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
