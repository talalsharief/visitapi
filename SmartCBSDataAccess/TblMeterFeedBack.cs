using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeterFeedBack class.
	/// </summary>
    [Serializable]
	public partial class TblMeterFeedBackCollection : ActiveList<TblMeterFeedBack, TblMeterFeedBackCollection>
	{	   
		public TblMeterFeedBackCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterFeedBackCollection</returns>
		public TblMeterFeedBackCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeterFeedBack o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeterFeedBack table.
	/// </summary>
	[Serializable]
	public partial class TblMeterFeedBack : ActiveRecord<TblMeterFeedBack>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeterFeedBack()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeterFeedBack(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeterFeedBack(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeterFeedBack(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeterFeedBack", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMeterFeedbackID = new TableSchema.TableColumn(schema);
				colvarMeterFeedbackID.ColumnName = "MeterFeedbackID";
				colvarMeterFeedbackID.DataType = DbType.Int32;
				colvarMeterFeedbackID.MaxLength = 0;
				colvarMeterFeedbackID.AutoIncrement = true;
				colvarMeterFeedbackID.IsNullable = false;
				colvarMeterFeedbackID.IsPrimaryKey = true;
				colvarMeterFeedbackID.IsForeignKey = false;
				colvarMeterFeedbackID.IsReadOnly = false;
				colvarMeterFeedbackID.DefaultSetting = @"";
				colvarMeterFeedbackID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterFeedbackID);
				
				TableSchema.TableColumn colvarMeterReadingUserID = new TableSchema.TableColumn(schema);
				colvarMeterReadingUserID.ColumnName = "MeterReadingUserID";
				colvarMeterReadingUserID.DataType = DbType.Int32;
				colvarMeterReadingUserID.MaxLength = 0;
				colvarMeterReadingUserID.AutoIncrement = false;
				colvarMeterReadingUserID.IsNullable = true;
				colvarMeterReadingUserID.IsPrimaryKey = false;
				colvarMeterReadingUserID.IsForeignKey = true;
				colvarMeterReadingUserID.IsReadOnly = false;
				colvarMeterReadingUserID.DefaultSetting = @"";
				
					colvarMeterReadingUserID.ForeignKeyTableName = "TblMeterReadingUser";
				schema.Columns.Add(colvarMeterReadingUserID);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = true;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarFeedBackStatusID = new TableSchema.TableColumn(schema);
				colvarFeedBackStatusID.ColumnName = "FeedBackStatusID";
				colvarFeedBackStatusID.DataType = DbType.Int32;
				colvarFeedBackStatusID.MaxLength = 0;
				colvarFeedBackStatusID.AutoIncrement = false;
				colvarFeedBackStatusID.IsNullable = true;
				colvarFeedBackStatusID.IsPrimaryKey = false;
				colvarFeedBackStatusID.IsForeignKey = true;
				colvarFeedBackStatusID.IsReadOnly = false;
				colvarFeedBackStatusID.DefaultSetting = @"";
				
					colvarFeedBackStatusID.ForeignKeyTableName = "TblFeedBackStatus";
				schema.Columns.Add(colvarFeedBackStatusID);
				
				TableSchema.TableColumn colvarOther = new TableSchema.TableColumn(schema);
				colvarOther.ColumnName = "Other";
				colvarOther.DataType = DbType.AnsiString;
				colvarOther.MaxLength = -1;
				colvarOther.AutoIncrement = false;
				colvarOther.IsNullable = true;
				colvarOther.IsPrimaryKey = false;
				colvarOther.IsForeignKey = false;
				colvarOther.IsReadOnly = false;
				colvarOther.DefaultSetting = @"";
				colvarOther.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOther);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeterFeedBack",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MeterFeedbackID")]
		[Bindable(true)]
		public int MeterFeedbackID 
		{
			get { return GetColumnValue<int>(Columns.MeterFeedbackID); }
			set { SetColumnValue(Columns.MeterFeedbackID, value); }
		}
		  
		[XmlAttribute("MeterReadingUserID")]
		[Bindable(true)]
		public int? MeterReadingUserID 
		{
			get { return GetColumnValue<int?>(Columns.MeterReadingUserID); }
			set { SetColumnValue(Columns.MeterReadingUserID, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int? MeterID 
		{
			get { return GetColumnValue<int?>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("FeedBackStatusID")]
		[Bindable(true)]
		public int? FeedBackStatusID 
		{
			get { return GetColumnValue<int?>(Columns.FeedBackStatusID); }
			set { SetColumnValue(Columns.FeedBackStatusID, value); }
		}
		  
		[XmlAttribute("Other")]
		[Bindable(true)]
		public string Other 
		{
			get { return GetColumnValue<string>(Columns.Other); }
			set { SetColumnValue(Columns.Other, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblFeedBackStatus ActiveRecord object related to this TblMeterFeedBack
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblFeedBackStatus TblFeedBackStatus
		{
			get { return SmartCBSDataAccess.TblFeedBackStatus.FetchByID(this.FeedBackStatusID); }
			set { SetColumnValue("FeedBackStatusID", value.FedbackStatusID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblMeterFeedBack
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterReadingUser ActiveRecord object related to this TblMeterFeedBack
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterReadingUser TblMeterReadingUser
		{
			get { return SmartCBSDataAccess.TblMeterReadingUser.FetchByID(this.MeterReadingUserID); }
			set { SetColumnValue("MeterReadingUserID", value.MeterReadingUserID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varMeterReadingUserID,int? varMeterID,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varFeedBackStatusID,string varOther)
		{
			TblMeterFeedBack item = new TblMeterFeedBack();
			
			item.MeterReadingUserID = varMeterReadingUserID;
			
			item.MeterID = varMeterID;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.FeedBackStatusID = varFeedBackStatusID;
			
			item.Other = varOther;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMeterFeedbackID,int? varMeterReadingUserID,int? varMeterID,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varFeedBackStatusID,string varOther)
		{
			TblMeterFeedBack item = new TblMeterFeedBack();
			
				item.MeterFeedbackID = varMeterFeedbackID;
			
				item.MeterReadingUserID = varMeterReadingUserID;
			
				item.MeterID = varMeterID;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.FeedBackStatusID = varFeedBackStatusID;
			
				item.Other = varOther;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MeterFeedbackIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingUserIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FeedBackStatusIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn OtherColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MeterFeedbackID = @"MeterFeedbackID";
			 public static string MeterReadingUserID = @"MeterReadingUserID";
			 public static string MeterID = @"MeterID";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string FeedBackStatusID = @"FeedBackStatusID";
			 public static string Other = @"Other";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
