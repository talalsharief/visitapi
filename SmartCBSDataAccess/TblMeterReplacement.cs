using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeterReplacement class.
	/// </summary>
    [Serializable]
	public partial class TblMeterReplacementCollection : ActiveList<TblMeterReplacement, TblMeterReplacementCollection>
	{	   
		public TblMeterReplacementCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterReplacementCollection</returns>
		public TblMeterReplacementCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeterReplacement o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeterReplacement table.
	/// </summary>
	[Serializable]
	public partial class TblMeterReplacement : ActiveRecord<TblMeterReplacement>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeterReplacement()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeterReplacement(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeterReplacement(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeterReplacement(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeterReplacement", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarReplaceID = new TableSchema.TableColumn(schema);
				colvarReplaceID.ColumnName = "ReplaceID";
				colvarReplaceID.DataType = DbType.Int32;
				colvarReplaceID.MaxLength = 0;
				colvarReplaceID.AutoIncrement = true;
				colvarReplaceID.IsNullable = false;
				colvarReplaceID.IsPrimaryKey = true;
				colvarReplaceID.IsForeignKey = false;
				colvarReplaceID.IsReadOnly = false;
				colvarReplaceID.DefaultSetting = @"";
				colvarReplaceID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReplaceID);
				
				TableSchema.TableColumn colvarIssueID = new TableSchema.TableColumn(schema);
				colvarIssueID.ColumnName = "IssueID";
				colvarIssueID.DataType = DbType.Int32;
				colvarIssueID.MaxLength = 0;
				colvarIssueID.AutoIncrement = false;
				colvarIssueID.IsNullable = true;
				colvarIssueID.IsPrimaryKey = false;
				colvarIssueID.IsForeignKey = true;
				colvarIssueID.IsReadOnly = false;
				colvarIssueID.DefaultSetting = @"";
				
					colvarIssueID.ForeignKeyTableName = "TblMeterIssue";
				schema.Columns.Add(colvarIssueID);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = true;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarReplacementDate = new TableSchema.TableColumn(schema);
				colvarReplacementDate.ColumnName = "ReplacementDate";
				colvarReplacementDate.DataType = DbType.DateTime;
				colvarReplacementDate.MaxLength = 0;
				colvarReplacementDate.AutoIncrement = false;
				colvarReplacementDate.IsNullable = true;
				colvarReplacementDate.IsPrimaryKey = false;
				colvarReplacementDate.IsForeignKey = false;
				colvarReplacementDate.IsReadOnly = false;
				colvarReplacementDate.DefaultSetting = @"";
				colvarReplacementDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReplacementDate);
				
				TableSchema.TableColumn colvarIsApproved = new TableSchema.TableColumn(schema);
				colvarIsApproved.ColumnName = "IsApproved";
				colvarIsApproved.DataType = DbType.Boolean;
				colvarIsApproved.MaxLength = 0;
				colvarIsApproved.AutoIncrement = false;
				colvarIsApproved.IsNullable = true;
				colvarIsApproved.IsPrimaryKey = false;
				colvarIsApproved.IsForeignKey = false;
				colvarIsApproved.IsReadOnly = false;
				colvarIsApproved.DefaultSetting = @"";
				colvarIsApproved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsApproved);
				
				TableSchema.TableColumn colvarReplacedBy = new TableSchema.TableColumn(schema);
				colvarReplacedBy.ColumnName = "ReplacedBy";
				colvarReplacedBy.DataType = DbType.Int32;
				colvarReplacedBy.MaxLength = 0;
				colvarReplacedBy.AutoIncrement = false;
				colvarReplacedBy.IsNullable = true;
				colvarReplacedBy.IsPrimaryKey = false;
				colvarReplacedBy.IsForeignKey = true;
				colvarReplacedBy.IsReadOnly = false;
				colvarReplacedBy.DefaultSetting = @"";
				
					colvarReplacedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarReplacedBy);
				
				TableSchema.TableColumn colvarApprovedBy = new TableSchema.TableColumn(schema);
				colvarApprovedBy.ColumnName = "ApprovedBy";
				colvarApprovedBy.DataType = DbType.Int32;
				colvarApprovedBy.MaxLength = 0;
				colvarApprovedBy.AutoIncrement = false;
				colvarApprovedBy.IsNullable = true;
				colvarApprovedBy.IsPrimaryKey = false;
				colvarApprovedBy.IsForeignKey = true;
				colvarApprovedBy.IsReadOnly = false;
				colvarApprovedBy.DefaultSetting = @"";
				
					colvarApprovedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarApprovedBy);
				
				TableSchema.TableColumn colvarApprovedDate = new TableSchema.TableColumn(schema);
				colvarApprovedDate.ColumnName = "ApprovedDate";
				colvarApprovedDate.DataType = DbType.DateTime;
				colvarApprovedDate.MaxLength = 0;
				colvarApprovedDate.AutoIncrement = false;
				colvarApprovedDate.IsNullable = true;
				colvarApprovedDate.IsPrimaryKey = false;
				colvarApprovedDate.IsForeignKey = false;
				colvarApprovedDate.IsReadOnly = false;
				colvarApprovedDate.DefaultSetting = @"";
				colvarApprovedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApprovedDate);
				
				TableSchema.TableColumn colvarPreviousMeterID = new TableSchema.TableColumn(schema);
				colvarPreviousMeterID.ColumnName = "PreviousMeterID";
				colvarPreviousMeterID.DataType = DbType.Int32;
				colvarPreviousMeterID.MaxLength = 0;
				colvarPreviousMeterID.AutoIncrement = false;
				colvarPreviousMeterID.IsNullable = true;
				colvarPreviousMeterID.IsPrimaryKey = false;
				colvarPreviousMeterID.IsForeignKey = true;
				colvarPreviousMeterID.IsReadOnly = false;
				colvarPreviousMeterID.DefaultSetting = @"";
				
					colvarPreviousMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarPreviousMeterID);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = true;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				
					colvarConsumerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarRemarks = new TableSchema.TableColumn(schema);
				colvarRemarks.ColumnName = "Remarks";
				colvarRemarks.DataType = DbType.AnsiString;
				colvarRemarks.MaxLength = -1;
				colvarRemarks.AutoIncrement = false;
				colvarRemarks.IsNullable = true;
				colvarRemarks.IsPrimaryKey = false;
				colvarRemarks.IsForeignKey = false;
				colvarRemarks.IsReadOnly = false;
				colvarRemarks.DefaultSetting = @"";
				colvarRemarks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemarks);
				
				TableSchema.TableColumn colvarPreviousReading = new TableSchema.TableColumn(schema);
				colvarPreviousReading.ColumnName = "PreviousReading";
				colvarPreviousReading.DataType = DbType.Int32;
				colvarPreviousReading.MaxLength = 0;
				colvarPreviousReading.AutoIncrement = false;
				colvarPreviousReading.IsNullable = true;
				colvarPreviousReading.IsPrimaryKey = false;
				colvarPreviousReading.IsForeignKey = false;
				colvarPreviousReading.IsReadOnly = false;
				colvarPreviousReading.DefaultSetting = @"";
				colvarPreviousReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreviousReading);
				
				TableSchema.TableColumn colvarCurrentReading = new TableSchema.TableColumn(schema);
				colvarCurrentReading.ColumnName = "CurrentReading";
				colvarCurrentReading.DataType = DbType.Int32;
				colvarCurrentReading.MaxLength = 0;
				colvarCurrentReading.AutoIncrement = false;
				colvarCurrentReading.IsNullable = true;
				colvarCurrentReading.IsPrimaryKey = false;
				colvarCurrentReading.IsForeignKey = false;
				colvarCurrentReading.IsReadOnly = false;
				colvarCurrentReading.DefaultSetting = @"";
				colvarCurrentReading.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentReading);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeterReplacement",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ReplaceID")]
		[Bindable(true)]
		public int ReplaceID 
		{
			get { return GetColumnValue<int>(Columns.ReplaceID); }
			set { SetColumnValue(Columns.ReplaceID, value); }
		}
		  
		[XmlAttribute("IssueID")]
		[Bindable(true)]
		public int? IssueID 
		{
			get { return GetColumnValue<int?>(Columns.IssueID); }
			set { SetColumnValue(Columns.IssueID, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int? MeterID 
		{
			get { return GetColumnValue<int?>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ReplacementDate")]
		[Bindable(true)]
		public DateTime? ReplacementDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ReplacementDate); }
			set { SetColumnValue(Columns.ReplacementDate, value); }
		}
		  
		[XmlAttribute("IsApproved")]
		[Bindable(true)]
		public bool? IsApproved 
		{
			get { return GetColumnValue<bool?>(Columns.IsApproved); }
			set { SetColumnValue(Columns.IsApproved, value); }
		}
		  
		[XmlAttribute("ReplacedBy")]
		[Bindable(true)]
		public int? ReplacedBy 
		{
			get { return GetColumnValue<int?>(Columns.ReplacedBy); }
			set { SetColumnValue(Columns.ReplacedBy, value); }
		}
		  
		[XmlAttribute("ApprovedBy")]
		[Bindable(true)]
		public int? ApprovedBy 
		{
			get { return GetColumnValue<int?>(Columns.ApprovedBy); }
			set { SetColumnValue(Columns.ApprovedBy, value); }
		}
		  
		[XmlAttribute("ApprovedDate")]
		[Bindable(true)]
		public DateTime? ApprovedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ApprovedDate); }
			set { SetColumnValue(Columns.ApprovedDate, value); }
		}
		  
		[XmlAttribute("PreviousMeterID")]
		[Bindable(true)]
		public int? PreviousMeterID 
		{
			get { return GetColumnValue<int?>(Columns.PreviousMeterID); }
			set { SetColumnValue(Columns.PreviousMeterID, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("Remarks")]
		[Bindable(true)]
		public string Remarks 
		{
			get { return GetColumnValue<string>(Columns.Remarks); }
			set { SetColumnValue(Columns.Remarks, value); }
		}
		  
		[XmlAttribute("PreviousReading")]
		[Bindable(true)]
		public int? PreviousReading 
		{
			get { return GetColumnValue<int?>(Columns.PreviousReading); }
			set { SetColumnValue(Columns.PreviousReading, value); }
		}
		  
		[XmlAttribute("CurrentReading")]
		[Bindable(true)]
		public int? CurrentReading 
		{
			get { return GetColumnValue<int?>(Columns.CurrentReading); }
			set { SetColumnValue(Columns.CurrentReading, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblInventoryLogCollection TblInventoryLogRecords()
		{
			return new SmartCBSDataAccess.TblInventoryLogCollection().Where(TblInventoryLog.Columns.ReplaceID, ReplaceID).Load();
		}
		public SmartCBSDataAccess.TblMeterIssueCollection TblMeterIssueRecords()
		{
			return new SmartCBSDataAccess.TblMeterIssueCollection().Where(TblMeterIssue.Columns.ReplacementID, ReplaceID).Load();
		}
		public SmartCBSDataAccess.TblMeterIssueRequestCollection TblMeterIssueRequests()
		{
			return new SmartCBSDataAccess.TblMeterIssueRequestCollection().Where(TblMeterIssueRequest.Columns.ReplacementID, ReplaceID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblMeterReplacement
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.ConsumerID); }
			set { SetColumnValue("ConsumerID", value.CunsumerID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterReplacement
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.ReplacedBy); }
			set { SetColumnValue("ReplacedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeterReplacement
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployeeToApprovedBy
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.ApprovedBy); }
			set { SetColumnValue("ApprovedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblMeterReplacement
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblMeterReplacement
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeterToPreviousMeterID
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.PreviousMeterID); }
			set { SetColumnValue("PreviousMeterID", value.MeterID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterIssue ActiveRecord object related to this TblMeterReplacement
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterIssue TblMeterIssue
		{
			get { return SmartCBSDataAccess.TblMeterIssue.FetchByID(this.IssueID); }
			set { SetColumnValue("IssueID", value.IssueID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varIssueID,int? varMeterID,DateTime? varModifiedOn,DateTime? varCreatedOn,DateTime? varReplacementDate,bool? varIsApproved,int? varReplacedBy,int? varApprovedBy,DateTime? varApprovedDate,int? varPreviousMeterID,int? varConsumerID,string varRemarks,int? varPreviousReading,int? varCurrentReading)
		{
			TblMeterReplacement item = new TblMeterReplacement();
			
			item.IssueID = varIssueID;
			
			item.MeterID = varMeterID;
			
			item.ModifiedOn = varModifiedOn;
			
			item.CreatedOn = varCreatedOn;
			
			item.ReplacementDate = varReplacementDate;
			
			item.IsApproved = varIsApproved;
			
			item.ReplacedBy = varReplacedBy;
			
			item.ApprovedBy = varApprovedBy;
			
			item.ApprovedDate = varApprovedDate;
			
			item.PreviousMeterID = varPreviousMeterID;
			
			item.ConsumerID = varConsumerID;
			
			item.Remarks = varRemarks;
			
			item.PreviousReading = varPreviousReading;
			
			item.CurrentReading = varCurrentReading;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varReplaceID,int? varIssueID,int? varMeterID,DateTime? varModifiedOn,DateTime? varCreatedOn,DateTime? varReplacementDate,bool? varIsApproved,int? varReplacedBy,int? varApprovedBy,DateTime? varApprovedDate,int? varPreviousMeterID,int? varConsumerID,string varRemarks,int? varPreviousReading,int? varCurrentReading)
		{
			TblMeterReplacement item = new TblMeterReplacement();
			
				item.ReplaceID = varReplaceID;
			
				item.IssueID = varIssueID;
			
				item.MeterID = varMeterID;
			
				item.ModifiedOn = varModifiedOn;
			
				item.CreatedOn = varCreatedOn;
			
				item.ReplacementDate = varReplacementDate;
			
				item.IsApproved = varIsApproved;
			
				item.ReplacedBy = varReplacedBy;
			
				item.ApprovedBy = varApprovedBy;
			
				item.ApprovedDate = varApprovedDate;
			
				item.PreviousMeterID = varPreviousMeterID;
			
				item.ConsumerID = varConsumerID;
			
				item.Remarks = varRemarks;
			
				item.PreviousReading = varPreviousReading;
			
				item.CurrentReading = varCurrentReading;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ReplaceIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IssueIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ReplacementDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsApprovedColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ReplacedByColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ApprovedByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ApprovedDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PreviousMeterIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarksColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn PreviousReadingColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentReadingColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ReplaceID = @"ReplaceID";
			 public static string IssueID = @"IssueID";
			 public static string MeterID = @"MeterID";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ReplacementDate = @"ReplacementDate";
			 public static string IsApproved = @"IsApproved";
			 public static string ReplacedBy = @"ReplacedBy";
			 public static string ApprovedBy = @"ApprovedBy";
			 public static string ApprovedDate = @"ApprovedDate";
			 public static string PreviousMeterID = @"PreviousMeterID";
			 public static string ConsumerID = @"ConsumerID";
			 public static string Remarks = @"Remarks";
			 public static string PreviousReading = @"PreviousReading";
			 public static string CurrentReading = @"CurrentReading";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
