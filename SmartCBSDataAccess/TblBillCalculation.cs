using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblBillCalculation class.
	/// </summary>
    [Serializable]
	public partial class TblBillCalculationCollection : ActiveList<TblBillCalculation, TblBillCalculationCollection>
	{	   
		public TblBillCalculationCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblBillCalculationCollection</returns>
		public TblBillCalculationCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblBillCalculation o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblBillCalculation table.
	/// </summary>
	[Serializable]
	public partial class TblBillCalculation : ActiveRecord<TblBillCalculation>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblBillCalculation()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblBillCalculation(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblBillCalculation(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblBillCalculation(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblBillCalculation", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarBillCalculationID = new TableSchema.TableColumn(schema);
				colvarBillCalculationID.ColumnName = "BillCalculationID";
				colvarBillCalculationID.DataType = DbType.Int32;
				colvarBillCalculationID.MaxLength = 0;
				colvarBillCalculationID.AutoIncrement = true;
				colvarBillCalculationID.IsNullable = false;
				colvarBillCalculationID.IsPrimaryKey = true;
				colvarBillCalculationID.IsForeignKey = false;
				colvarBillCalculationID.IsReadOnly = false;
				colvarBillCalculationID.DefaultSetting = @"";
				colvarBillCalculationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillCalculationID);
				
				TableSchema.TableColumn colvarBillID = new TableSchema.TableColumn(schema);
				colvarBillID.ColumnName = "BillID";
				colvarBillID.DataType = DbType.Int32;
				colvarBillID.MaxLength = 0;
				colvarBillID.AutoIncrement = false;
				colvarBillID.IsNullable = true;
				colvarBillID.IsPrimaryKey = false;
				colvarBillID.IsForeignKey = true;
				colvarBillID.IsReadOnly = false;
				colvarBillID.DefaultSetting = @"";
				
					colvarBillID.ForeignKeyTableName = "TblBill";
				schema.Columns.Add(colvarBillID);
				
				TableSchema.TableColumn colvarUnits = new TableSchema.TableColumn(schema);
				colvarUnits.ColumnName = "Units";
				colvarUnits.DataType = DbType.Decimal;
				colvarUnits.MaxLength = 0;
				colvarUnits.AutoIncrement = false;
				colvarUnits.IsNullable = true;
				colvarUnits.IsPrimaryKey = false;
				colvarUnits.IsForeignKey = false;
				colvarUnits.IsReadOnly = false;
				colvarUnits.DefaultSetting = @"";
				colvarUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnits);
				
				TableSchema.TableColumn colvarRate = new TableSchema.TableColumn(schema);
				colvarRate.ColumnName = "Rate";
				colvarRate.DataType = DbType.Decimal;
				colvarRate.MaxLength = 0;
				colvarRate.AutoIncrement = false;
				colvarRate.IsNullable = true;
				colvarRate.IsPrimaryKey = false;
				colvarRate.IsForeignKey = false;
				colvarRate.IsReadOnly = false;
				colvarRate.DefaultSetting = @"";
				colvarRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRate);
				
				TableSchema.TableColumn colvarBillCalculationTypeID = new TableSchema.TableColumn(schema);
				colvarBillCalculationTypeID.ColumnName = "BillCalculationTypeID";
				colvarBillCalculationTypeID.DataType = DbType.Int32;
				colvarBillCalculationTypeID.MaxLength = 0;
				colvarBillCalculationTypeID.AutoIncrement = false;
				colvarBillCalculationTypeID.IsNullable = true;
				colvarBillCalculationTypeID.IsPrimaryKey = false;
				colvarBillCalculationTypeID.IsForeignKey = true;
				colvarBillCalculationTypeID.IsReadOnly = false;
				colvarBillCalculationTypeID.DefaultSetting = @"";
				
					colvarBillCalculationTypeID.ForeignKeyTableName = "TblBillCalculationType";
				schema.Columns.Add(colvarBillCalculationTypeID);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblBillCalculation",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("BillCalculationID")]
		[Bindable(true)]
		public int BillCalculationID 
		{
			get { return GetColumnValue<int>(Columns.BillCalculationID); }
			set { SetColumnValue(Columns.BillCalculationID, value); }
		}
		  
		[XmlAttribute("BillID")]
		[Bindable(true)]
		public int? BillID 
		{
			get { return GetColumnValue<int?>(Columns.BillID); }
			set { SetColumnValue(Columns.BillID, value); }
		}
		  
		[XmlAttribute("Units")]
		[Bindable(true)]
		public decimal? Units 
		{
			get { return GetColumnValue<decimal?>(Columns.Units); }
			set { SetColumnValue(Columns.Units, value); }
		}
		  
		[XmlAttribute("Rate")]
		[Bindable(true)]
		public decimal? Rate 
		{
			get { return GetColumnValue<decimal?>(Columns.Rate); }
			set { SetColumnValue(Columns.Rate, value); }
		}
		  
		[XmlAttribute("BillCalculationTypeID")]
		[Bindable(true)]
		public int? BillCalculationTypeID 
		{
			get { return GetColumnValue<int?>(Columns.BillCalculationTypeID); }
			set { SetColumnValue(Columns.BillCalculationTypeID, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBill ActiveRecord object related to this TblBillCalculation
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBill TblBill
		{
			get { return SmartCBSDataAccess.TblBill.FetchByID(this.BillID); }
			set { SetColumnValue("BillID", value.BillID); }
		}
		
		
		/// <summary>
		/// Returns a TblBillCalculationType ActiveRecord object related to this TblBillCalculation
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBillCalculationType TblBillCalculationType
		{
			get { return SmartCBSDataAccess.TblBillCalculationType.FetchByID(this.BillCalculationTypeID); }
			set { SetColumnValue("BillCalculationTypeID", value.BillCalculationTypeID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varBillID,decimal? varUnits,decimal? varRate,int? varBillCalculationTypeID,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblBillCalculation item = new TblBillCalculation();
			
			item.BillID = varBillID;
			
			item.Units = varUnits;
			
			item.Rate = varRate;
			
			item.BillCalculationTypeID = varBillCalculationTypeID;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varBillCalculationID,int? varBillID,decimal? varUnits,decimal? varRate,int? varBillCalculationTypeID,DateTime? varCreatedOn,DateTime? varModifiedOn)
		{
			TblBillCalculation item = new TblBillCalculation();
			
				item.BillCalculationID = varBillCalculationID;
			
				item.BillID = varBillID;
			
				item.Units = varUnits;
			
				item.Rate = varRate;
			
				item.BillCalculationTypeID = varBillCalculationTypeID;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn BillCalculationIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BillIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitsColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BillCalculationTypeIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string BillCalculationID = @"BillCalculationID";
			 public static string BillID = @"BillID";
			 public static string Units = @"Units";
			 public static string Rate = @"Rate";
			 public static string BillCalculationTypeID = @"BillCalculationTypeID";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
