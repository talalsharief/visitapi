using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the SMSLog class.
	/// </summary>
    [Serializable]
	public partial class SMSLogCollection : ActiveList<SMSLog, SMSLogCollection>
	{	   
		public SMSLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SMSLogCollection</returns>
		public SMSLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SMSLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SMSLog table.
	/// </summary>
	[Serializable]
	public partial class SMSLog : ActiveRecord<SMSLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SMSLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SMSLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SMSLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SMSLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SMSLog", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarSMSLogID = new TableSchema.TableColumn(schema);
				colvarSMSLogID.ColumnName = "SMSLogID";
				colvarSMSLogID.DataType = DbType.Int32;
				colvarSMSLogID.MaxLength = 0;
				colvarSMSLogID.AutoIncrement = true;
				colvarSMSLogID.IsNullable = false;
				colvarSMSLogID.IsPrimaryKey = true;
				colvarSMSLogID.IsForeignKey = false;
				colvarSMSLogID.IsReadOnly = false;
				colvarSMSLogID.DefaultSetting = @"";
				colvarSMSLogID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSMSLogID);
				
				TableSchema.TableColumn colvarDeviceText = new TableSchema.TableColumn(schema);
				colvarDeviceText.ColumnName = "DeviceText";
				colvarDeviceText.DataType = DbType.AnsiString;
				colvarDeviceText.MaxLength = -1;
				colvarDeviceText.AutoIncrement = false;
				colvarDeviceText.IsNullable = true;
				colvarDeviceText.IsPrimaryKey = false;
				colvarDeviceText.IsForeignKey = false;
				colvarDeviceText.IsReadOnly = false;
				colvarDeviceText.DefaultSetting = @"";
				colvarDeviceText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeviceText);
				
				TableSchema.TableColumn colvarDeviceNo = new TableSchema.TableColumn(schema);
				colvarDeviceNo.ColumnName = "DeviceNo";
				colvarDeviceNo.DataType = DbType.AnsiString;
				colvarDeviceNo.MaxLength = 50;
				colvarDeviceNo.AutoIncrement = false;
				colvarDeviceNo.IsNullable = true;
				colvarDeviceNo.IsPrimaryKey = false;
				colvarDeviceNo.IsForeignKey = false;
				colvarDeviceNo.IsReadOnly = false;
				colvarDeviceNo.DefaultSetting = @"";
				colvarDeviceNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeviceNo);
				
				TableSchema.TableColumn colvarDeviceSendingDateTime = new TableSchema.TableColumn(schema);
				colvarDeviceSendingDateTime.ColumnName = "DeviceSendingDateTime";
				colvarDeviceSendingDateTime.DataType = DbType.DateTime;
				colvarDeviceSendingDateTime.MaxLength = 0;
				colvarDeviceSendingDateTime.AutoIncrement = false;
				colvarDeviceSendingDateTime.IsNullable = true;
				colvarDeviceSendingDateTime.IsPrimaryKey = false;
				colvarDeviceSendingDateTime.IsForeignKey = false;
				colvarDeviceSendingDateTime.IsReadOnly = false;
				colvarDeviceSendingDateTime.DefaultSetting = @"";
				colvarDeviceSendingDateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeviceSendingDateTime);
				
				TableSchema.TableColumn colvarReportedDateTime = new TableSchema.TableColumn(schema);
				colvarReportedDateTime.ColumnName = "ReportedDateTime";
				colvarReportedDateTime.DataType = DbType.DateTime;
				colvarReportedDateTime.MaxLength = 0;
				colvarReportedDateTime.AutoIncrement = false;
				colvarReportedDateTime.IsNullable = true;
				colvarReportedDateTime.IsPrimaryKey = false;
				colvarReportedDateTime.IsForeignKey = false;
				colvarReportedDateTime.IsReadOnly = false;
				
						colvarReportedDateTime.DefaultSetting = @"(getdate())";
				colvarReportedDateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportedDateTime);
				
				TableSchema.TableColumn colvarInvalidFormat = new TableSchema.TableColumn(schema);
				colvarInvalidFormat.ColumnName = "InvalidFormat";
				colvarInvalidFormat.DataType = DbType.Boolean;
				colvarInvalidFormat.MaxLength = 0;
				colvarInvalidFormat.AutoIncrement = false;
				colvarInvalidFormat.IsNullable = true;
				colvarInvalidFormat.IsPrimaryKey = false;
				colvarInvalidFormat.IsForeignKey = false;
				colvarInvalidFormat.IsReadOnly = false;
				
						colvarInvalidFormat.DefaultSetting = @"((0))";
				colvarInvalidFormat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvalidFormat);
				
				TableSchema.TableColumn colvarInvalidField = new TableSchema.TableColumn(schema);
				colvarInvalidField.ColumnName = "InvalidField";
				colvarInvalidField.DataType = DbType.AnsiString;
				colvarInvalidField.MaxLength = 200;
				colvarInvalidField.AutoIncrement = false;
				colvarInvalidField.IsNullable = true;
				colvarInvalidField.IsPrimaryKey = false;
				colvarInvalidField.IsForeignKey = false;
				colvarInvalidField.IsReadOnly = false;
				colvarInvalidField.DefaultSetting = @"";
				colvarInvalidField.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvalidField);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = true;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("SMSLog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("SMSLogID")]
		[Bindable(true)]
		public int SMSLogID 
		{
			get { return GetColumnValue<int>(Columns.SMSLogID); }
			set { SetColumnValue(Columns.SMSLogID, value); }
		}
		  
		[XmlAttribute("DeviceText")]
		[Bindable(true)]
		public string DeviceText 
		{
			get { return GetColumnValue<string>(Columns.DeviceText); }
			set { SetColumnValue(Columns.DeviceText, value); }
		}
		  
		[XmlAttribute("DeviceNo")]
		[Bindable(true)]
		public string DeviceNo 
		{
			get { return GetColumnValue<string>(Columns.DeviceNo); }
			set { SetColumnValue(Columns.DeviceNo, value); }
		}
		  
		[XmlAttribute("DeviceSendingDateTime")]
		[Bindable(true)]
		public DateTime? DeviceSendingDateTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeviceSendingDateTime); }
			set { SetColumnValue(Columns.DeviceSendingDateTime, value); }
		}
		  
		[XmlAttribute("ReportedDateTime")]
		[Bindable(true)]
		public DateTime? ReportedDateTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.ReportedDateTime); }
			set { SetColumnValue(Columns.ReportedDateTime, value); }
		}
		  
		[XmlAttribute("InvalidFormat")]
		[Bindable(true)]
		public bool? InvalidFormat 
		{
			get { return GetColumnValue<bool?>(Columns.InvalidFormat); }
			set { SetColumnValue(Columns.InvalidFormat, value); }
		}
		  
		[XmlAttribute("InvalidField")]
		[Bindable(true)]
		public string InvalidField 
		{
			get { return GetColumnValue<string>(Columns.InvalidField); }
			set { SetColumnValue(Columns.InvalidField, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int? MeterID 
		{
			get { return GetColumnValue<int?>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this SMSLog
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDeviceText,string varDeviceNo,DateTime? varDeviceSendingDateTime,DateTime? varReportedDateTime,bool? varInvalidFormat,string varInvalidField,int? varMeterID)
		{
			SMSLog item = new SMSLog();
			
			item.DeviceText = varDeviceText;
			
			item.DeviceNo = varDeviceNo;
			
			item.DeviceSendingDateTime = varDeviceSendingDateTime;
			
			item.ReportedDateTime = varReportedDateTime;
			
			item.InvalidFormat = varInvalidFormat;
			
			item.InvalidField = varInvalidField;
			
			item.MeterID = varMeterID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varSMSLogID,string varDeviceText,string varDeviceNo,DateTime? varDeviceSendingDateTime,DateTime? varReportedDateTime,bool? varInvalidFormat,string varInvalidField,int? varMeterID)
		{
			SMSLog item = new SMSLog();
			
				item.SMSLogID = varSMSLogID;
			
				item.DeviceText = varDeviceText;
			
				item.DeviceNo = varDeviceNo;
			
				item.DeviceSendingDateTime = varDeviceSendingDateTime;
			
				item.ReportedDateTime = varReportedDateTime;
			
				item.InvalidFormat = varInvalidFormat;
			
				item.InvalidField = varInvalidField;
			
				item.MeterID = varMeterID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SMSLogIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DeviceTextColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DeviceNoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DeviceSendingDateTimeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ReportedDateTimeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn InvalidFormatColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn InvalidFieldColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string SMSLogID = @"SMSLogID";
			 public static string DeviceText = @"DeviceText";
			 public static string DeviceNo = @"DeviceNo";
			 public static string DeviceSendingDateTime = @"DeviceSendingDateTime";
			 public static string ReportedDateTime = @"ReportedDateTime";
			 public static string InvalidFormat = @"InvalidFormat";
			 public static string InvalidField = @"InvalidField";
			 public static string MeterID = @"MeterID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
