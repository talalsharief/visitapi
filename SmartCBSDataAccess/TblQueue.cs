using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblQueue class.
	/// </summary>
    [Serializable]
	public partial class TblQueueCollection : ActiveList<TblQueue, TblQueueCollection>
	{	   
		public TblQueueCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblQueueCollection</returns>
		public TblQueueCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblQueue o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblQueue table.
	/// </summary>
	[Serializable]
	public partial class TblQueue : ActiveRecord<TblQueue>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblQueue()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblQueue(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblQueue(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblQueue(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblQueue", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarQueueID = new TableSchema.TableColumn(schema);
				colvarQueueID.ColumnName = "QueueID";
				colvarQueueID.DataType = DbType.Int32;
				colvarQueueID.MaxLength = 0;
				colvarQueueID.AutoIncrement = true;
				colvarQueueID.IsNullable = false;
				colvarQueueID.IsPrimaryKey = true;
				colvarQueueID.IsForeignKey = true;
				colvarQueueID.IsReadOnly = false;
				colvarQueueID.DefaultSetting = @"";
				
					colvarQueueID.ForeignKeyTableName = "tblQueue";
				schema.Columns.Add(colvarQueueID);
				
				TableSchema.TableColumn colvarQueueGroupName = new TableSchema.TableColumn(schema);
				colvarQueueGroupName.ColumnName = "QueueGroupName";
				colvarQueueGroupName.DataType = DbType.AnsiString;
				colvarQueueGroupName.MaxLength = 50;
				colvarQueueGroupName.AutoIncrement = false;
				colvarQueueGroupName.IsNullable = true;
				colvarQueueGroupName.IsPrimaryKey = false;
				colvarQueueGroupName.IsForeignKey = false;
				colvarQueueGroupName.IsReadOnly = false;
				colvarQueueGroupName.DefaultSetting = @"";
				colvarQueueGroupName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQueueGroupName);
				
				TableSchema.TableColumn colvarQueueDate = new TableSchema.TableColumn(schema);
				colvarQueueDate.ColumnName = "QueueDate";
				colvarQueueDate.DataType = DbType.DateTime;
				colvarQueueDate.MaxLength = 0;
				colvarQueueDate.AutoIncrement = false;
				colvarQueueDate.IsNullable = true;
				colvarQueueDate.IsPrimaryKey = false;
				colvarQueueDate.IsForeignKey = false;
				colvarQueueDate.IsReadOnly = false;
				colvarQueueDate.DefaultSetting = @"";
				colvarQueueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQueueDate);
				
				TableSchema.TableColumn colvarQueueDesc = new TableSchema.TableColumn(schema);
				colvarQueueDesc.ColumnName = "QueueDesc";
				colvarQueueDesc.DataType = DbType.AnsiString;
				colvarQueueDesc.MaxLength = -1;
				colvarQueueDesc.AutoIncrement = false;
				colvarQueueDesc.IsNullable = true;
				colvarQueueDesc.IsPrimaryKey = false;
				colvarQueueDesc.IsForeignKey = false;
				colvarQueueDesc.IsReadOnly = false;
				colvarQueueDesc.DefaultSetting = @"";
				colvarQueueDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQueueDesc);
				
				TableSchema.TableColumn colvarIsExecutable = new TableSchema.TableColumn(schema);
				colvarIsExecutable.ColumnName = "IsExecutable";
				colvarIsExecutable.DataType = DbType.Boolean;
				colvarIsExecutable.MaxLength = 0;
				colvarIsExecutable.AutoIncrement = false;
				colvarIsExecutable.IsNullable = true;
				colvarIsExecutable.IsPrimaryKey = false;
				colvarIsExecutable.IsForeignKey = false;
				colvarIsExecutable.IsReadOnly = false;
				colvarIsExecutable.DefaultSetting = @"";
				colvarIsExecutable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExecutable);
				
				TableSchema.TableColumn colvarParentQueueID = new TableSchema.TableColumn(schema);
				colvarParentQueueID.ColumnName = "ParentQueueID";
				colvarParentQueueID.DataType = DbType.Int32;
				colvarParentQueueID.MaxLength = 0;
				colvarParentQueueID.AutoIncrement = false;
				colvarParentQueueID.IsNullable = true;
				colvarParentQueueID.IsPrimaryKey = false;
				colvarParentQueueID.IsForeignKey = false;
				colvarParentQueueID.IsReadOnly = false;
				colvarParentQueueID.DefaultSetting = @"";
				colvarParentQueueID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParentQueueID);
				
				TableSchema.TableColumn colvarIsDismiss = new TableSchema.TableColumn(schema);
				colvarIsDismiss.ColumnName = "IsDismiss";
				colvarIsDismiss.DataType = DbType.Boolean;
				colvarIsDismiss.MaxLength = 0;
				colvarIsDismiss.AutoIncrement = false;
				colvarIsDismiss.IsNullable = true;
				colvarIsDismiss.IsPrimaryKey = false;
				colvarIsDismiss.IsForeignKey = false;
				colvarIsDismiss.IsReadOnly = false;
				colvarIsDismiss.DefaultSetting = @"";
				colvarIsDismiss.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDismiss);
				
				TableSchema.TableColumn colvarCustomValue1 = new TableSchema.TableColumn(schema);
				colvarCustomValue1.ColumnName = "CustomValue1";
				colvarCustomValue1.DataType = DbType.Int32;
				colvarCustomValue1.MaxLength = 0;
				colvarCustomValue1.AutoIncrement = false;
				colvarCustomValue1.IsNullable = true;
				colvarCustomValue1.IsPrimaryKey = false;
				colvarCustomValue1.IsForeignKey = false;
				colvarCustomValue1.IsReadOnly = false;
				colvarCustomValue1.DefaultSetting = @"";
				colvarCustomValue1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomValue1);
				
				TableSchema.TableColumn colvarCustomValue2 = new TableSchema.TableColumn(schema);
				colvarCustomValue2.ColumnName = "CustomValue2";
				colvarCustomValue2.DataType = DbType.Int32;
				colvarCustomValue2.MaxLength = 0;
				colvarCustomValue2.AutoIncrement = false;
				colvarCustomValue2.IsNullable = true;
				colvarCustomValue2.IsPrimaryKey = false;
				colvarCustomValue2.IsForeignKey = false;
				colvarCustomValue2.IsReadOnly = false;
				colvarCustomValue2.DefaultSetting = @"";
				colvarCustomValue2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomValue2);
				
				TableSchema.TableColumn colvarCustomValue3 = new TableSchema.TableColumn(schema);
				colvarCustomValue3.ColumnName = "CustomValue3";
				colvarCustomValue3.DataType = DbType.Int32;
				colvarCustomValue3.MaxLength = 0;
				colvarCustomValue3.AutoIncrement = false;
				colvarCustomValue3.IsNullable = true;
				colvarCustomValue3.IsPrimaryKey = false;
				colvarCustomValue3.IsForeignKey = false;
				colvarCustomValue3.IsReadOnly = false;
				colvarCustomValue3.DefaultSetting = @"";
				colvarCustomValue3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomValue3);
				
				TableSchema.TableColumn colvarUserLoginID = new TableSchema.TableColumn(schema);
				colvarUserLoginID.ColumnName = "UserLoginID";
				colvarUserLoginID.DataType = DbType.Int32;
				colvarUserLoginID.MaxLength = 0;
				colvarUserLoginID.AutoIncrement = false;
				colvarUserLoginID.IsNullable = true;
				colvarUserLoginID.IsPrimaryKey = false;
				colvarUserLoginID.IsForeignKey = true;
				colvarUserLoginID.IsReadOnly = false;
				colvarUserLoginID.DefaultSetting = @"";
				
					colvarUserLoginID.ForeignKeyTableName = "UserLogin";
				schema.Columns.Add(colvarUserLoginID);
				
				TableSchema.TableColumn colvarMeterReadingUserID = new TableSchema.TableColumn(schema);
				colvarMeterReadingUserID.ColumnName = "MeterReadingUserID";
				colvarMeterReadingUserID.DataType = DbType.Int32;
				colvarMeterReadingUserID.MaxLength = 0;
				colvarMeterReadingUserID.AutoIncrement = false;
				colvarMeterReadingUserID.IsNullable = true;
				colvarMeterReadingUserID.IsPrimaryKey = false;
				colvarMeterReadingUserID.IsForeignKey = true;
				colvarMeterReadingUserID.IsReadOnly = false;
				colvarMeterReadingUserID.DefaultSetting = @"";
				
					colvarMeterReadingUserID.ForeignKeyTableName = "TblMeterReadingUser";
				schema.Columns.Add(colvarMeterReadingUserID);
				
				TableSchema.TableColumn colvarBatchID = new TableSchema.TableColumn(schema);
				colvarBatchID.ColumnName = "BatchID";
				colvarBatchID.DataType = DbType.Int32;
				colvarBatchID.MaxLength = 0;
				colvarBatchID.AutoIncrement = false;
				colvarBatchID.IsNullable = true;
				colvarBatchID.IsPrimaryKey = false;
				colvarBatchID.IsForeignKey = true;
				colvarBatchID.IsReadOnly = false;
				colvarBatchID.DefaultSetting = @"";
				
					colvarBatchID.ForeignKeyTableName = "tblBatch";
				schema.Columns.Add(colvarBatchID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblQueue",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("QueueID")]
		[Bindable(true)]
		public int QueueID 
		{
			get { return GetColumnValue<int>(Columns.QueueID); }
			set { SetColumnValue(Columns.QueueID, value); }
		}
		  
		[XmlAttribute("QueueGroupName")]
		[Bindable(true)]
		public string QueueGroupName 
		{
			get { return GetColumnValue<string>(Columns.QueueGroupName); }
			set { SetColumnValue(Columns.QueueGroupName, value); }
		}
		  
		[XmlAttribute("QueueDate")]
		[Bindable(true)]
		public DateTime? QueueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.QueueDate); }
			set { SetColumnValue(Columns.QueueDate, value); }
		}
		  
		[XmlAttribute("QueueDesc")]
		[Bindable(true)]
		public string QueueDesc 
		{
			get { return GetColumnValue<string>(Columns.QueueDesc); }
			set { SetColumnValue(Columns.QueueDesc, value); }
		}
		  
		[XmlAttribute("IsExecutable")]
		[Bindable(true)]
		public bool? IsExecutable 
		{
			get { return GetColumnValue<bool?>(Columns.IsExecutable); }
			set { SetColumnValue(Columns.IsExecutable, value); }
		}
		  
		[XmlAttribute("ParentQueueID")]
		[Bindable(true)]
		public int? ParentQueueID 
		{
			get { return GetColumnValue<int?>(Columns.ParentQueueID); }
			set { SetColumnValue(Columns.ParentQueueID, value); }
		}
		  
		[XmlAttribute("IsDismiss")]
		[Bindable(true)]
		public bool? IsDismiss 
		{
			get { return GetColumnValue<bool?>(Columns.IsDismiss); }
			set { SetColumnValue(Columns.IsDismiss, value); }
		}
		  
		[XmlAttribute("CustomValue1")]
		[Bindable(true)]
		public int? CustomValue1 
		{
			get { return GetColumnValue<int?>(Columns.CustomValue1); }
			set { SetColumnValue(Columns.CustomValue1, value); }
		}
		  
		[XmlAttribute("CustomValue2")]
		[Bindable(true)]
		public int? CustomValue2 
		{
			get { return GetColumnValue<int?>(Columns.CustomValue2); }
			set { SetColumnValue(Columns.CustomValue2, value); }
		}
		  
		[XmlAttribute("CustomValue3")]
		[Bindable(true)]
		public int? CustomValue3 
		{
			get { return GetColumnValue<int?>(Columns.CustomValue3); }
			set { SetColumnValue(Columns.CustomValue3, value); }
		}
		  
		[XmlAttribute("UserLoginID")]
		[Bindable(true)]
		public int? UserLoginID 
		{
			get { return GetColumnValue<int?>(Columns.UserLoginID); }
			set { SetColumnValue(Columns.UserLoginID, value); }
		}
		  
		[XmlAttribute("MeterReadingUserID")]
		[Bindable(true)]
		public int? MeterReadingUserID 
		{
			get { return GetColumnValue<int?>(Columns.MeterReadingUserID); }
			set { SetColumnValue(Columns.MeterReadingUserID, value); }
		}
		  
		[XmlAttribute("BatchID")]
		[Bindable(true)]
		public int? BatchID 
		{
			get { return GetColumnValue<int?>(Columns.BatchID); }
			set { SetColumnValue(Columns.BatchID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblQueueCollection ChildTblQueueRecords()
		{
			return new SmartCBSDataAccess.TblQueueCollection().Where(TblQueue.Columns.QueueID, QueueID).Load();
		}
		public SmartCBSDataAccess.TblQueueDetailCollection TblQueueDetailRecords()
		{
			return new SmartCBSDataAccess.TblQueueDetailCollection().Where(TblQueueDetail.Columns.QueueID, QueueID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBatch ActiveRecord object related to this TblQueue
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBatch TblBatch
		{
			get { return SmartCBSDataAccess.TblBatch.FetchByID(this.BatchID); }
			set { SetColumnValue("BatchID", value.BatchID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterReadingUser ActiveRecord object related to this TblQueue
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterReadingUser TblMeterReadingUser
		{
			get { return SmartCBSDataAccess.TblMeterReadingUser.FetchByID(this.MeterReadingUserID); }
			set { SetColumnValue("MeterReadingUserID", value.MeterReadingUserID); }
		}
		
		
		/// <summary>
		/// Returns a TblQueue ActiveRecord object related to this TblQueue
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblQueue ParentTblQueue
		{
			get { return SmartCBSDataAccess.TblQueue.FetchByID(this.QueueID); }
			set { SetColumnValue("QueueID", value.QueueID); }
		}
		
		
		/// <summary>
		/// Returns a UserLogin ActiveRecord object related to this TblQueue
		/// 
		/// </summary>
		public SmartCBSDataAccess.UserLogin UserLogin
		{
			get { return SmartCBSDataAccess.UserLogin.FetchByID(this.UserLoginID); }
			set { SetColumnValue("UserLoginID", value.UserLoginId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varQueueGroupName,DateTime? varQueueDate,string varQueueDesc,bool? varIsExecutable,int? varParentQueueID,bool? varIsDismiss,int? varCustomValue1,int? varCustomValue2,int? varCustomValue3,int? varUserLoginID,int? varMeterReadingUserID,int? varBatchID)
		{
			TblQueue item = new TblQueue();
			
			item.QueueGroupName = varQueueGroupName;
			
			item.QueueDate = varQueueDate;
			
			item.QueueDesc = varQueueDesc;
			
			item.IsExecutable = varIsExecutable;
			
			item.ParentQueueID = varParentQueueID;
			
			item.IsDismiss = varIsDismiss;
			
			item.CustomValue1 = varCustomValue1;
			
			item.CustomValue2 = varCustomValue2;
			
			item.CustomValue3 = varCustomValue3;
			
			item.UserLoginID = varUserLoginID;
			
			item.MeterReadingUserID = varMeterReadingUserID;
			
			item.BatchID = varBatchID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varQueueID,string varQueueGroupName,DateTime? varQueueDate,string varQueueDesc,bool? varIsExecutable,int? varParentQueueID,bool? varIsDismiss,int? varCustomValue1,int? varCustomValue2,int? varCustomValue3,int? varUserLoginID,int? varMeterReadingUserID,int? varBatchID)
		{
			TblQueue item = new TblQueue();
			
				item.QueueID = varQueueID;
			
				item.QueueGroupName = varQueueGroupName;
			
				item.QueueDate = varQueueDate;
			
				item.QueueDesc = varQueueDesc;
			
				item.IsExecutable = varIsExecutable;
			
				item.ParentQueueID = varParentQueueID;
			
				item.IsDismiss = varIsDismiss;
			
				item.CustomValue1 = varCustomValue1;
			
				item.CustomValue2 = varCustomValue2;
			
				item.CustomValue3 = varCustomValue3;
			
				item.UserLoginID = varUserLoginID;
			
				item.MeterReadingUserID = varMeterReadingUserID;
			
				item.BatchID = varBatchID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn QueueIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn QueueGroupNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn QueueDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn QueueDescColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IsExecutableColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ParentQueueIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsDismissColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomValue1Column
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomValue2Column
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomValue3Column
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn UserLoginIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingUserIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn BatchIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string QueueID = @"QueueID";
			 public static string QueueGroupName = @"QueueGroupName";
			 public static string QueueDate = @"QueueDate";
			 public static string QueueDesc = @"QueueDesc";
			 public static string IsExecutable = @"IsExecutable";
			 public static string ParentQueueID = @"ParentQueueID";
			 public static string IsDismiss = @"IsDismiss";
			 public static string CustomValue1 = @"CustomValue1";
			 public static string CustomValue2 = @"CustomValue2";
			 public static string CustomValue3 = @"CustomValue3";
			 public static string UserLoginID = @"UserLoginID";
			 public static string MeterReadingUserID = @"MeterReadingUserID";
			 public static string BatchID = @"BatchID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
