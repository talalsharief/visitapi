using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
    /// <summary>
    /// Controller class for TblFeederReading
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblFeederReadingController
    {
        // Preload our schema..
        TblFeederReading thisSchemaLoad = new TblFeederReading();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblFeederReadingCollection FetchAll()
        {
            TblFeederReadingCollection coll = new TblFeederReadingCollection();
            Query qry = new Query(TblFeederReading.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblFeederReadingCollection FetchByID(object FeederReadingID)
        {
            TblFeederReadingCollection coll = new TblFeederReadingCollection().Where("FeederReadingID", FeederReadingID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblFeederReadingCollection FetchByQuery(Query qry)
        {
            TblFeederReadingCollection coll = new TblFeederReadingCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object FeederReadingID)
        {
            return (TblFeederReading.Delete(FeederReadingID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object FeederReadingID)
        {
            return (TblFeederReading.Destroy(FeederReadingID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? FeederID,int? FeederReadModeID,string FeederReadingMonth,string FeederReadingYear,decimal? PreviousReading,decimal? CurrentReading,decimal? TotalUnits,decimal? MultiplyingFactor,decimal? UnitsConsumed,DateTime? FeederReadingDate,int? FeederReadBy,int? ULCreatedBy,int? ULUpdatedBy,DateTime? CreatedOn,DateTime? ModifiedOn,string FeederImage,int? BranchID,int? ReadingInsertedBy)
	    {
		    TblFeederReading item = new TblFeederReading();
		    
            item.FeederID = FeederID;
            
            item.FeederReadModeID = FeederReadModeID;
            
            item.FeederReadingMonth = FeederReadingMonth;
            
            item.FeederReadingYear = FeederReadingYear;
            
            item.PreviousReading = PreviousReading;
            
            item.CurrentReading = CurrentReading;
            
            item.TotalUnits = TotalUnits;
            
            item.MultiplyingFactor = MultiplyingFactor;
            
            item.UnitsConsumed = UnitsConsumed;
            
            item.FeederReadingDate = FeederReadingDate;
            
            item.FeederReadBy = FeederReadBy;
            
            item.ULCreatedBy = ULCreatedBy;
            
            item.ULUpdatedBy = ULUpdatedBy;
            
            item.CreatedOn = CreatedOn;
            
            item.ModifiedOn = ModifiedOn;
            
            item.FeederImage = FeederImage;
            
            item.BranchID = BranchID;
            
            item.ReadingInsertedBy = ReadingInsertedBy;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int FeederReadingID,int? FeederID,int? FeederReadModeID,string FeederReadingMonth,string FeederReadingYear,decimal? PreviousReading,decimal? CurrentReading,decimal? TotalUnits,decimal? MultiplyingFactor,decimal? UnitsConsumed,DateTime? FeederReadingDate,int? FeederReadBy,int? ULCreatedBy,int? ULUpdatedBy,DateTime? CreatedOn,DateTime? ModifiedOn,string FeederImage,int? BranchID,int? ReadingInsertedBy)
	    {
		    TblFeederReading item = new TblFeederReading();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.FeederReadingID = FeederReadingID;
				
			item.FeederID = FeederID;
				
			item.FeederReadModeID = FeederReadModeID;
				
			item.FeederReadingMonth = FeederReadingMonth;
				
			item.FeederReadingYear = FeederReadingYear;
				
			item.PreviousReading = PreviousReading;
				
			item.CurrentReading = CurrentReading;
				
			item.TotalUnits = TotalUnits;
				
			item.MultiplyingFactor = MultiplyingFactor;
				
			item.UnitsConsumed = UnitsConsumed;
				
			item.FeederReadingDate = FeederReadingDate;
				
			item.FeederReadBy = FeederReadBy;
				
			item.ULCreatedBy = ULCreatedBy;
				
			item.ULUpdatedBy = ULUpdatedBy;
				
			item.CreatedOn = CreatedOn;
				
			item.ModifiedOn = ModifiedOn;
				
			item.FeederImage = FeederImage;
				
			item.BranchID = BranchID;
				
			item.ReadingInsertedBy = ReadingInsertedBy;
				
	        item.Save(UserName);
	    }
    }
}
