using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblChargeCategory class.
	/// </summary>
    [Serializable]
	public partial class TblChargeCategoryCollection : ActiveList<TblChargeCategory, TblChargeCategoryCollection>
	{	   
		public TblChargeCategoryCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblChargeCategoryCollection</returns>
		public TblChargeCategoryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblChargeCategory o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblChargeCategory table.
	/// </summary>
	[Serializable]
	public partial class TblChargeCategory : ActiveRecord<TblChargeCategory>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblChargeCategory()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblChargeCategory(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblChargeCategory(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblChargeCategory(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblChargeCategory", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarChargeCategoryID = new TableSchema.TableColumn(schema);
				colvarChargeCategoryID.ColumnName = "ChargeCategoryID";
				colvarChargeCategoryID.DataType = DbType.Int32;
				colvarChargeCategoryID.MaxLength = 0;
				colvarChargeCategoryID.AutoIncrement = true;
				colvarChargeCategoryID.IsNullable = false;
				colvarChargeCategoryID.IsPrimaryKey = true;
				colvarChargeCategoryID.IsForeignKey = false;
				colvarChargeCategoryID.IsReadOnly = false;
				colvarChargeCategoryID.DefaultSetting = @"";
				colvarChargeCategoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChargeCategoryID);
				
				TableSchema.TableColumn colvarCategoryID = new TableSchema.TableColumn(schema);
				colvarCategoryID.ColumnName = "CategoryID";
				colvarCategoryID.DataType = DbType.Int32;
				colvarCategoryID.MaxLength = 0;
				colvarCategoryID.AutoIncrement = false;
				colvarCategoryID.IsNullable = true;
				colvarCategoryID.IsPrimaryKey = false;
				colvarCategoryID.IsForeignKey = true;
				colvarCategoryID.IsReadOnly = false;
				colvarCategoryID.DefaultSetting = @"";
				
					colvarCategoryID.ForeignKeyTableName = "tblCategory";
				schema.Columns.Add(colvarCategoryID);
				
				TableSchema.TableColumn colvarChargeID = new TableSchema.TableColumn(schema);
				colvarChargeID.ColumnName = "ChargeID";
				colvarChargeID.DataType = DbType.Int32;
				colvarChargeID.MaxLength = 0;
				colvarChargeID.AutoIncrement = false;
				colvarChargeID.IsNullable = true;
				colvarChargeID.IsPrimaryKey = false;
				colvarChargeID.IsForeignKey = true;
				colvarChargeID.IsReadOnly = false;
				colvarChargeID.DefaultSetting = @"";
				
					colvarChargeID.ForeignKeyTableName = "TblCharges";
				schema.Columns.Add(colvarChargeID);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblChargeCategory",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ChargeCategoryID")]
		[Bindable(true)]
		public int ChargeCategoryID 
		{
			get { return GetColumnValue<int>(Columns.ChargeCategoryID); }
			set { SetColumnValue(Columns.ChargeCategoryID, value); }
		}
		  
		[XmlAttribute("CategoryID")]
		[Bindable(true)]
		public int? CategoryID 
		{
			get { return GetColumnValue<int?>(Columns.CategoryID); }
			set { SetColumnValue(Columns.CategoryID, value); }
		}
		  
		[XmlAttribute("ChargeID")]
		[Bindable(true)]
		public int? ChargeID 
		{
			get { return GetColumnValue<int?>(Columns.ChargeID); }
			set { SetColumnValue(Columns.ChargeID, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblCategory ActiveRecord object related to this TblChargeCategory
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblCategory TblCategory
		{
			get { return SmartCBSDataAccess.TblCategory.FetchByID(this.CategoryID); }
			set { SetColumnValue("CategoryID", value.CategoryID); }
		}
		
		
		/// <summary>
		/// Returns a TblCharge ActiveRecord object related to this TblChargeCategory
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblCharge TblCharge
		{
			get { return SmartCBSDataAccess.TblCharge.FetchByID(this.ChargeID); }
			set { SetColumnValue("ChargeID", value.ChargesID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varCategoryID,int? varChargeID,bool? varIsActive)
		{
			TblChargeCategory item = new TblChargeCategory();
			
			item.CategoryID = varCategoryID;
			
			item.ChargeID = varChargeID;
			
			item.IsActive = varIsActive;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varChargeCategoryID,int? varCategoryID,int? varChargeID,bool? varIsActive)
		{
			TblChargeCategory item = new TblChargeCategory();
			
				item.ChargeCategoryID = varChargeCategoryID;
			
				item.CategoryID = varCategoryID;
			
				item.ChargeID = varChargeID;
			
				item.IsActive = varIsActive;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ChargeCategoryIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CategoryIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ChargeIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ChargeCategoryID = @"ChargeCategoryID";
			 public static string CategoryID = @"CategoryID";
			 public static string ChargeID = @"ChargeID";
			 public static string IsActive = @"IsActive";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
