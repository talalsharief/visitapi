using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblCharge class.
	/// </summary>
    [Serializable]
	public partial class TblChargeCollection : ActiveList<TblCharge, TblChargeCollection>
	{	   
		public TblChargeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblChargeCollection</returns>
		public TblChargeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblCharge o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblCharges table.
	/// </summary>
	[Serializable]
	public partial class TblCharge : ActiveRecord<TblCharge>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblCharge()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblCharge(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblCharge(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblCharge(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblCharges", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarChargesID = new TableSchema.TableColumn(schema);
				colvarChargesID.ColumnName = "ChargesID";
				colvarChargesID.DataType = DbType.Int32;
				colvarChargesID.MaxLength = 0;
				colvarChargesID.AutoIncrement = true;
				colvarChargesID.IsNullable = false;
				colvarChargesID.IsPrimaryKey = true;
				colvarChargesID.IsForeignKey = false;
				colvarChargesID.IsReadOnly = false;
				colvarChargesID.DefaultSetting = @"";
				colvarChargesID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChargesID);
				
				TableSchema.TableColumn colvarChargesName = new TableSchema.TableColumn(schema);
				colvarChargesName.ColumnName = "ChargesName";
				colvarChargesName.DataType = DbType.AnsiString;
				colvarChargesName.MaxLength = 50;
				colvarChargesName.AutoIncrement = false;
				colvarChargesName.IsNullable = false;
				colvarChargesName.IsPrimaryKey = false;
				colvarChargesName.IsForeignKey = false;
				colvarChargesName.IsReadOnly = false;
				colvarChargesName.DefaultSetting = @"";
				colvarChargesName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChargesName);
				
				TableSchema.TableColumn colvarChargesTypeID = new TableSchema.TableColumn(schema);
				colvarChargesTypeID.ColumnName = "ChargesTypeID";
				colvarChargesTypeID.DataType = DbType.Int32;
				colvarChargesTypeID.MaxLength = 0;
				colvarChargesTypeID.AutoIncrement = false;
				colvarChargesTypeID.IsNullable = false;
				colvarChargesTypeID.IsPrimaryKey = false;
				colvarChargesTypeID.IsForeignKey = true;
				colvarChargesTypeID.IsReadOnly = false;
				colvarChargesTypeID.DefaultSetting = @"";
				
					colvarChargesTypeID.ForeignKeyTableName = "TblChargestype";
				schema.Columns.Add(colvarChargesTypeID);
				
				TableSchema.TableColumn colvarChargeRate = new TableSchema.TableColumn(schema);
				colvarChargeRate.ColumnName = "ChargeRate";
				colvarChargeRate.DataType = DbType.Decimal;
				colvarChargeRate.MaxLength = 0;
				colvarChargeRate.AutoIncrement = false;
				colvarChargeRate.IsNullable = true;
				colvarChargeRate.IsPrimaryKey = false;
				colvarChargeRate.IsForeignKey = false;
				colvarChargeRate.IsReadOnly = false;
				colvarChargeRate.DefaultSetting = @"";
				colvarChargeRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChargeRate);
				
				TableSchema.TableColumn colvarFixedAmount = new TableSchema.TableColumn(schema);
				colvarFixedAmount.ColumnName = "FixedAmount";
				colvarFixedAmount.DataType = DbType.Decimal;
				colvarFixedAmount.MaxLength = 0;
				colvarFixedAmount.AutoIncrement = false;
				colvarFixedAmount.IsNullable = true;
				colvarFixedAmount.IsPrimaryKey = false;
				colvarFixedAmount.IsForeignKey = false;
				colvarFixedAmount.IsReadOnly = false;
				colvarFixedAmount.DefaultSetting = @"";
				colvarFixedAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFixedAmount);
				
				TableSchema.TableColumn colvarCalculatedFeild = new TableSchema.TableColumn(schema);
				colvarCalculatedFeild.ColumnName = "CalculatedFeild";
				colvarCalculatedFeild.DataType = DbType.AnsiString;
				colvarCalculatedFeild.MaxLength = 50;
				colvarCalculatedFeild.AutoIncrement = false;
				colvarCalculatedFeild.IsNullable = true;
				colvarCalculatedFeild.IsPrimaryKey = false;
				colvarCalculatedFeild.IsForeignKey = false;
				colvarCalculatedFeild.IsReadOnly = false;
				colvarCalculatedFeild.DefaultSetting = @"";
				colvarCalculatedFeild.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCalculatedFeild);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarApplyOnLedger = new TableSchema.TableColumn(schema);
				colvarApplyOnLedger.ColumnName = "ApplyOnLedger";
				colvarApplyOnLedger.DataType = DbType.Boolean;
				colvarApplyOnLedger.MaxLength = 0;
				colvarApplyOnLedger.AutoIncrement = false;
				colvarApplyOnLedger.IsNullable = true;
				colvarApplyOnLedger.IsPrimaryKey = false;
				colvarApplyOnLedger.IsForeignKey = false;
				colvarApplyOnLedger.IsReadOnly = false;
				colvarApplyOnLedger.DefaultSetting = @"";
				colvarApplyOnLedger.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplyOnLedger);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblCharges",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ChargesID")]
		[Bindable(true)]
		public int ChargesID 
		{
			get { return GetColumnValue<int>(Columns.ChargesID); }
			set { SetColumnValue(Columns.ChargesID, value); }
		}
		  
		[XmlAttribute("ChargesName")]
		[Bindable(true)]
		public string ChargesName 
		{
			get { return GetColumnValue<string>(Columns.ChargesName); }
			set { SetColumnValue(Columns.ChargesName, value); }
		}
		  
		[XmlAttribute("ChargesTypeID")]
		[Bindable(true)]
		public int ChargesTypeID 
		{
			get { return GetColumnValue<int>(Columns.ChargesTypeID); }
			set { SetColumnValue(Columns.ChargesTypeID, value); }
		}
		  
		[XmlAttribute("ChargeRate")]
		[Bindable(true)]
		public decimal? ChargeRate 
		{
			get { return GetColumnValue<decimal?>(Columns.ChargeRate); }
			set { SetColumnValue(Columns.ChargeRate, value); }
		}
		  
		[XmlAttribute("FixedAmount")]
		[Bindable(true)]
		public decimal? FixedAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.FixedAmount); }
			set { SetColumnValue(Columns.FixedAmount, value); }
		}
		  
		[XmlAttribute("CalculatedFeild")]
		[Bindable(true)]
		public string CalculatedFeild 
		{
			get { return GetColumnValue<string>(Columns.CalculatedFeild); }
			set { SetColumnValue(Columns.CalculatedFeild, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("ApplyOnLedger")]
		[Bindable(true)]
		public bool? ApplyOnLedger 
		{
			get { return GetColumnValue<bool?>(Columns.ApplyOnLedger); }
			set { SetColumnValue(Columns.ApplyOnLedger, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblBillDetailCollection TblBillDetailRecords()
		{
			return new SmartCBSDataAccess.TblBillDetailCollection().Where(TblBillDetail.Columns.ChargeID, ChargesID).Load();
		}
		public SmartCBSDataAccess.TblChargeCategoryCollection TblChargeCategoryRecords()
		{
			return new SmartCBSDataAccess.TblChargeCategoryCollection().Where(TblChargeCategory.Columns.ChargeID, ChargesID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblChargestype ActiveRecord object related to this TblCharge
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblChargestype TblChargestype
		{
			get { return SmartCBSDataAccess.TblChargestype.FetchByID(this.ChargesTypeID); }
			set { SetColumnValue("ChargesTypeID", value.ChargesTypeId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varChargesName,int varChargesTypeID,decimal? varChargeRate,decimal? varFixedAmount,string varCalculatedFeild,bool? varIsActive,DateTime? varCreatedOn,DateTime? varModifiedOn,bool? varApplyOnLedger)
		{
			TblCharge item = new TblCharge();
			
			item.ChargesName = varChargesName;
			
			item.ChargesTypeID = varChargesTypeID;
			
			item.ChargeRate = varChargeRate;
			
			item.FixedAmount = varFixedAmount;
			
			item.CalculatedFeild = varCalculatedFeild;
			
			item.IsActive = varIsActive;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.ApplyOnLedger = varApplyOnLedger;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varChargesID,string varChargesName,int varChargesTypeID,decimal? varChargeRate,decimal? varFixedAmount,string varCalculatedFeild,bool? varIsActive,DateTime? varCreatedOn,DateTime? varModifiedOn,bool? varApplyOnLedger)
		{
			TblCharge item = new TblCharge();
			
				item.ChargesID = varChargesID;
			
				item.ChargesName = varChargesName;
			
				item.ChargesTypeID = varChargesTypeID;
			
				item.ChargeRate = varChargeRate;
			
				item.FixedAmount = varFixedAmount;
			
				item.CalculatedFeild = varCalculatedFeild;
			
				item.IsActive = varIsActive;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.ApplyOnLedger = varApplyOnLedger;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ChargesIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ChargesNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ChargesTypeIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ChargeRateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FixedAmountColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CalculatedFeildColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ApplyOnLedgerColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ChargesID = @"ChargesID";
			 public static string ChargesName = @"ChargesName";
			 public static string ChargesTypeID = @"ChargesTypeID";
			 public static string ChargeRate = @"ChargeRate";
			 public static string FixedAmount = @"FixedAmount";
			 public static string CalculatedFeild = @"CalculatedFeild";
			 public static string IsActive = @"IsActive";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string ApplyOnLedger = @"ApplyOnLedger";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
