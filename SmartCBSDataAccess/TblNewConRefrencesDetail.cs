using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblNewConRefrencesDetail class.
	/// </summary>
    [Serializable]
	public partial class TblNewConRefrencesDetailCollection : ActiveList<TblNewConRefrencesDetail, TblNewConRefrencesDetailCollection>
	{	   
		public TblNewConRefrencesDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblNewConRefrencesDetailCollection</returns>
		public TblNewConRefrencesDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblNewConRefrencesDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblNewConRefrencesDetail table.
	/// </summary>
	[Serializable]
	public partial class TblNewConRefrencesDetail : ActiveRecord<TblNewConRefrencesDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblNewConRefrencesDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblNewConRefrencesDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblNewConRefrencesDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblNewConRefrencesDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblNewConRefrencesDetail", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarNewConRefReqID = new TableSchema.TableColumn(schema);
				colvarNewConRefReqID.ColumnName = "NewConRefReqID";
				colvarNewConRefReqID.DataType = DbType.Int32;
				colvarNewConRefReqID.MaxLength = 0;
				colvarNewConRefReqID.AutoIncrement = true;
				colvarNewConRefReqID.IsNullable = false;
				colvarNewConRefReqID.IsPrimaryKey = true;
				colvarNewConRefReqID.IsForeignKey = false;
				colvarNewConRefReqID.IsReadOnly = false;
				colvarNewConRefReqID.DefaultSetting = @"";
				colvarNewConRefReqID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewConRefReqID);
				
				TableSchema.TableColumn colvarNewConnectionID = new TableSchema.TableColumn(schema);
				colvarNewConnectionID.ColumnName = "NewConnectionID";
				colvarNewConnectionID.DataType = DbType.Int32;
				colvarNewConnectionID.MaxLength = 0;
				colvarNewConnectionID.AutoIncrement = false;
				colvarNewConnectionID.IsNullable = true;
				colvarNewConnectionID.IsPrimaryKey = false;
				colvarNewConnectionID.IsForeignKey = true;
				colvarNewConnectionID.IsReadOnly = false;
				colvarNewConnectionID.DefaultSetting = @"";
				
					colvarNewConnectionID.ForeignKeyTableName = "TblNewConnection";
				schema.Columns.Add(colvarNewConnectionID);
				
				TableSchema.TableColumn colvarRqName = new TableSchema.TableColumn(schema);
				colvarRqName.ColumnName = "RqName";
				colvarRqName.DataType = DbType.AnsiString;
				colvarRqName.MaxLength = 50;
				colvarRqName.AutoIncrement = false;
				colvarRqName.IsNullable = true;
				colvarRqName.IsPrimaryKey = false;
				colvarRqName.IsForeignKey = false;
				colvarRqName.IsReadOnly = false;
				colvarRqName.DefaultSetting = @"";
				colvarRqName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRqName);
				
				TableSchema.TableColumn colvarRqAddress = new TableSchema.TableColumn(schema);
				colvarRqAddress.ColumnName = "RqAddress";
				colvarRqAddress.DataType = DbType.AnsiString;
				colvarRqAddress.MaxLength = -1;
				colvarRqAddress.AutoIncrement = false;
				colvarRqAddress.IsNullable = true;
				colvarRqAddress.IsPrimaryKey = false;
				colvarRqAddress.IsForeignKey = false;
				colvarRqAddress.IsReadOnly = false;
				colvarRqAddress.DefaultSetting = @"";
				colvarRqAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRqAddress);
				
				TableSchema.TableColumn colvarRqContactNo = new TableSchema.TableColumn(schema);
				colvarRqContactNo.ColumnName = "RqContactNo";
				colvarRqContactNo.DataType = DbType.AnsiString;
				colvarRqContactNo.MaxLength = 50;
				colvarRqContactNo.AutoIncrement = false;
				colvarRqContactNo.IsNullable = true;
				colvarRqContactNo.IsPrimaryKey = false;
				colvarRqContactNo.IsForeignKey = false;
				colvarRqContactNo.IsReadOnly = false;
				colvarRqContactNo.DefaultSetting = @"";
				colvarRqContactNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRqContactNo);
				
				TableSchema.TableColumn colvarRqCompanyName = new TableSchema.TableColumn(schema);
				colvarRqCompanyName.ColumnName = "RqCompanyName";
				colvarRqCompanyName.DataType = DbType.AnsiString;
				colvarRqCompanyName.MaxLength = 50;
				colvarRqCompanyName.AutoIncrement = false;
				colvarRqCompanyName.IsNullable = true;
				colvarRqCompanyName.IsPrimaryKey = false;
				colvarRqCompanyName.IsForeignKey = false;
				colvarRqCompanyName.IsReadOnly = false;
				colvarRqCompanyName.DefaultSetting = @"";
				colvarRqCompanyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRqCompanyName);
				
				TableSchema.TableColumn colvarRqDesignation = new TableSchema.TableColumn(schema);
				colvarRqDesignation.ColumnName = "RqDesignation";
				colvarRqDesignation.DataType = DbType.AnsiString;
				colvarRqDesignation.MaxLength = 50;
				colvarRqDesignation.AutoIncrement = false;
				colvarRqDesignation.IsNullable = true;
				colvarRqDesignation.IsPrimaryKey = false;
				colvarRqDesignation.IsForeignKey = false;
				colvarRqDesignation.IsReadOnly = false;
				colvarRqDesignation.DefaultSetting = @"";
				colvarRqDesignation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRqDesignation);
				
				TableSchema.TableColumn colvarRelationShipWithApplicant = new TableSchema.TableColumn(schema);
				colvarRelationShipWithApplicant.ColumnName = "RelationShipWithApplicant";
				colvarRelationShipWithApplicant.DataType = DbType.AnsiString;
				colvarRelationShipWithApplicant.MaxLength = 50;
				colvarRelationShipWithApplicant.AutoIncrement = false;
				colvarRelationShipWithApplicant.IsNullable = true;
				colvarRelationShipWithApplicant.IsPrimaryKey = false;
				colvarRelationShipWithApplicant.IsForeignKey = false;
				colvarRelationShipWithApplicant.IsReadOnly = false;
				colvarRelationShipWithApplicant.DefaultSetting = @"";
				colvarRelationShipWithApplicant.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRelationShipWithApplicant);
				
				TableSchema.TableColumn colvarGivingAnswer = new TableSchema.TableColumn(schema);
				colvarGivingAnswer.ColumnName = "GivingAnswer";
				colvarGivingAnswer.DataType = DbType.AnsiString;
				colvarGivingAnswer.MaxLength = -1;
				colvarGivingAnswer.AutoIncrement = false;
				colvarGivingAnswer.IsNullable = true;
				colvarGivingAnswer.IsPrimaryKey = false;
				colvarGivingAnswer.IsForeignKey = false;
				colvarGivingAnswer.IsReadOnly = false;
				colvarGivingAnswer.DefaultSetting = @"";
				colvarGivingAnswer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGivingAnswer);
				
				TableSchema.TableColumn colvarSignature = new TableSchema.TableColumn(schema);
				colvarSignature.ColumnName = "Signature";
				colvarSignature.DataType = DbType.Boolean;
				colvarSignature.MaxLength = 0;
				colvarSignature.AutoIncrement = false;
				colvarSignature.IsNullable = true;
				colvarSignature.IsPrimaryKey = false;
				colvarSignature.IsForeignKey = false;
				colvarSignature.IsReadOnly = false;
				colvarSignature.DefaultSetting = @"";
				colvarSignature.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSignature);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarRefrenceNo = new TableSchema.TableColumn(schema);
				colvarRefrenceNo.ColumnName = "RefrenceNo";
				colvarRefrenceNo.DataType = DbType.Int32;
				colvarRefrenceNo.MaxLength = 0;
				colvarRefrenceNo.AutoIncrement = false;
				colvarRefrenceNo.IsNullable = true;
				colvarRefrenceNo.IsPrimaryKey = false;
				colvarRefrenceNo.IsForeignKey = false;
				colvarRefrenceNo.IsReadOnly = false;
				colvarRefrenceNo.DefaultSetting = @"";
				colvarRefrenceNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRefrenceNo);
				
				TableSchema.TableColumn colvarRqCNIC = new TableSchema.TableColumn(schema);
				colvarRqCNIC.ColumnName = "RqCNIC";
				colvarRqCNIC.DataType = DbType.AnsiString;
				colvarRqCNIC.MaxLength = 50;
				colvarRqCNIC.AutoIncrement = false;
				colvarRqCNIC.IsNullable = true;
				colvarRqCNIC.IsPrimaryKey = false;
				colvarRqCNIC.IsForeignKey = false;
				colvarRqCNIC.IsReadOnly = false;
				colvarRqCNIC.DefaultSetting = @"";
				colvarRqCNIC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRqCNIC);
				
				TableSchema.TableColumn colvarRQConsumer = new TableSchema.TableColumn(schema);
				colvarRQConsumer.ColumnName = "RQConsumer";
				colvarRQConsumer.DataType = DbType.AnsiString;
				colvarRQConsumer.MaxLength = -1;
				colvarRQConsumer.AutoIncrement = false;
				colvarRQConsumer.IsNullable = true;
				colvarRQConsumer.IsPrimaryKey = false;
				colvarRQConsumer.IsForeignKey = false;
				colvarRQConsumer.IsReadOnly = false;
				colvarRQConsumer.DefaultSetting = @"";
				colvarRQConsumer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRQConsumer);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblNewConRefrencesDetail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("NewConRefReqID")]
		[Bindable(true)]
		public int NewConRefReqID 
		{
			get { return GetColumnValue<int>(Columns.NewConRefReqID); }
			set { SetColumnValue(Columns.NewConRefReqID, value); }
		}
		  
		[XmlAttribute("NewConnectionID")]
		[Bindable(true)]
		public int? NewConnectionID 
		{
			get { return GetColumnValue<int?>(Columns.NewConnectionID); }
			set { SetColumnValue(Columns.NewConnectionID, value); }
		}
		  
		[XmlAttribute("RqName")]
		[Bindable(true)]
		public string RqName 
		{
			get { return GetColumnValue<string>(Columns.RqName); }
			set { SetColumnValue(Columns.RqName, value); }
		}
		  
		[XmlAttribute("RqAddress")]
		[Bindable(true)]
		public string RqAddress 
		{
			get { return GetColumnValue<string>(Columns.RqAddress); }
			set { SetColumnValue(Columns.RqAddress, value); }
		}
		  
		[XmlAttribute("RqContactNo")]
		[Bindable(true)]
		public string RqContactNo 
		{
			get { return GetColumnValue<string>(Columns.RqContactNo); }
			set { SetColumnValue(Columns.RqContactNo, value); }
		}
		  
		[XmlAttribute("RqCompanyName")]
		[Bindable(true)]
		public string RqCompanyName 
		{
			get { return GetColumnValue<string>(Columns.RqCompanyName); }
			set { SetColumnValue(Columns.RqCompanyName, value); }
		}
		  
		[XmlAttribute("RqDesignation")]
		[Bindable(true)]
		public string RqDesignation 
		{
			get { return GetColumnValue<string>(Columns.RqDesignation); }
			set { SetColumnValue(Columns.RqDesignation, value); }
		}
		  
		[XmlAttribute("RelationShipWithApplicant")]
		[Bindable(true)]
		public string RelationShipWithApplicant 
		{
			get { return GetColumnValue<string>(Columns.RelationShipWithApplicant); }
			set { SetColumnValue(Columns.RelationShipWithApplicant, value); }
		}
		  
		[XmlAttribute("GivingAnswer")]
		[Bindable(true)]
		public string GivingAnswer 
		{
			get { return GetColumnValue<string>(Columns.GivingAnswer); }
			set { SetColumnValue(Columns.GivingAnswer, value); }
		}
		  
		[XmlAttribute("Signature")]
		[Bindable(true)]
		public bool? Signature 
		{
			get { return GetColumnValue<bool?>(Columns.Signature); }
			set { SetColumnValue(Columns.Signature, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("RefrenceNo")]
		[Bindable(true)]
		public int? RefrenceNo 
		{
			get { return GetColumnValue<int?>(Columns.RefrenceNo); }
			set { SetColumnValue(Columns.RefrenceNo, value); }
		}
		  
		[XmlAttribute("RqCNIC")]
		[Bindable(true)]
		public string RqCNIC 
		{
			get { return GetColumnValue<string>(Columns.RqCNIC); }
			set { SetColumnValue(Columns.RqCNIC, value); }
		}
		  
		[XmlAttribute("RQConsumer")]
		[Bindable(true)]
		public string RQConsumer 
		{
			get { return GetColumnValue<string>(Columns.RQConsumer); }
			set { SetColumnValue(Columns.RQConsumer, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblNewConnection ActiveRecord object related to this TblNewConRefrencesDetail
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblNewConnection TblNewConnection
		{
			get { return SmartCBSDataAccess.TblNewConnection.FetchByID(this.NewConnectionID); }
			set { SetColumnValue("NewConnectionID", value.NewConnectionID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varNewConnectionID,string varRqName,string varRqAddress,string varRqContactNo,string varRqCompanyName,string varRqDesignation,string varRelationShipWithApplicant,string varGivingAnswer,bool? varSignature,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varRefrenceNo,string varRqCNIC,string varRQConsumer)
		{
			TblNewConRefrencesDetail item = new TblNewConRefrencesDetail();
			
			item.NewConnectionID = varNewConnectionID;
			
			item.RqName = varRqName;
			
			item.RqAddress = varRqAddress;
			
			item.RqContactNo = varRqContactNo;
			
			item.RqCompanyName = varRqCompanyName;
			
			item.RqDesignation = varRqDesignation;
			
			item.RelationShipWithApplicant = varRelationShipWithApplicant;
			
			item.GivingAnswer = varGivingAnswer;
			
			item.Signature = varSignature;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.RefrenceNo = varRefrenceNo;
			
			item.RqCNIC = varRqCNIC;
			
			item.RQConsumer = varRQConsumer;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varNewConRefReqID,int? varNewConnectionID,string varRqName,string varRqAddress,string varRqContactNo,string varRqCompanyName,string varRqDesignation,string varRelationShipWithApplicant,string varGivingAnswer,bool? varSignature,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varRefrenceNo,string varRqCNIC,string varRQConsumer)
		{
			TblNewConRefrencesDetail item = new TblNewConRefrencesDetail();
			
				item.NewConRefReqID = varNewConRefReqID;
			
				item.NewConnectionID = varNewConnectionID;
			
				item.RqName = varRqName;
			
				item.RqAddress = varRqAddress;
			
				item.RqContactNo = varRqContactNo;
			
				item.RqCompanyName = varRqCompanyName;
			
				item.RqDesignation = varRqDesignation;
			
				item.RelationShipWithApplicant = varRelationShipWithApplicant;
			
				item.GivingAnswer = varGivingAnswer;
			
				item.Signature = varSignature;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.RefrenceNo = varRefrenceNo;
			
				item.RqCNIC = varRqCNIC;
			
				item.RQConsumer = varRQConsumer;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn NewConRefReqIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NewConnectionIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RqNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RqAddressColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RqContactNoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RqCompanyNameColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RqDesignationColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn RelationShipWithApplicantColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn GivingAnswerColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SignatureColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn RefrenceNoColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn RqCNICColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn RQConsumerColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string NewConRefReqID = @"NewConRefReqID";
			 public static string NewConnectionID = @"NewConnectionID";
			 public static string RqName = @"RqName";
			 public static string RqAddress = @"RqAddress";
			 public static string RqContactNo = @"RqContactNo";
			 public static string RqCompanyName = @"RqCompanyName";
			 public static string RqDesignation = @"RqDesignation";
			 public static string RelationShipWithApplicant = @"RelationShipWithApplicant";
			 public static string GivingAnswer = @"GivingAnswer";
			 public static string Signature = @"Signature";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string RefrenceNo = @"RefrenceNo";
			 public static string RqCNIC = @"RqCNIC";
			 public static string RQConsumer = @"RQConsumer";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
