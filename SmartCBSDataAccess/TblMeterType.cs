using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeterType class.
	/// </summary>
    [Serializable]
	public partial class TblMeterTypeCollection : ActiveList<TblMeterType, TblMeterTypeCollection>
	{	   
		public TblMeterTypeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterTypeCollection</returns>
		public TblMeterTypeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeterType o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeterType table.
	/// </summary>
	[Serializable]
	public partial class TblMeterType : ActiveRecord<TblMeterType>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeterType()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeterType(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeterType(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeterType(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeterType", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMeterTypeID = new TableSchema.TableColumn(schema);
				colvarMeterTypeID.ColumnName = "MeterTypeID";
				colvarMeterTypeID.DataType = DbType.Int32;
				colvarMeterTypeID.MaxLength = 0;
				colvarMeterTypeID.AutoIncrement = true;
				colvarMeterTypeID.IsNullable = false;
				colvarMeterTypeID.IsPrimaryKey = true;
				colvarMeterTypeID.IsForeignKey = false;
				colvarMeterTypeID.IsReadOnly = false;
				colvarMeterTypeID.DefaultSetting = @"";
				colvarMeterTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterTypeID);
				
				TableSchema.TableColumn colvarMeterTypeName = new TableSchema.TableColumn(schema);
				colvarMeterTypeName.ColumnName = "MeterTypeName";
				colvarMeterTypeName.DataType = DbType.AnsiString;
				colvarMeterTypeName.MaxLength = 50;
				colvarMeterTypeName.AutoIncrement = false;
				colvarMeterTypeName.IsNullable = true;
				colvarMeterTypeName.IsPrimaryKey = false;
				colvarMeterTypeName.IsForeignKey = false;
				colvarMeterTypeName.IsReadOnly = false;
				colvarMeterTypeName.DefaultSetting = @"";
				colvarMeterTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterTypeName);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarAllowIssue = new TableSchema.TableColumn(schema);
				colvarAllowIssue.ColumnName = "AllowIssue";
				colvarAllowIssue.DataType = DbType.Boolean;
				colvarAllowIssue.MaxLength = 0;
				colvarAllowIssue.AutoIncrement = false;
				colvarAllowIssue.IsNullable = true;
				colvarAllowIssue.IsPrimaryKey = false;
				colvarAllowIssue.IsForeignKey = false;
				colvarAllowIssue.IsReadOnly = false;
				colvarAllowIssue.DefaultSetting = @"";
				colvarAllowIssue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowIssue);
				
				TableSchema.TableColumn colvarCLoad = new TableSchema.TableColumn(schema);
				colvarCLoad.ColumnName = "CLoad";
				colvarCLoad.DataType = DbType.Int32;
				colvarCLoad.MaxLength = 0;
				colvarCLoad.AutoIncrement = false;
				colvarCLoad.IsNullable = true;
				colvarCLoad.IsPrimaryKey = false;
				colvarCLoad.IsForeignKey = false;
				colvarCLoad.IsReadOnly = false;
				colvarCLoad.DefaultSetting = @"";
				colvarCLoad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCLoad);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeterType",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MeterTypeID")]
		[Bindable(true)]
		public int MeterTypeID 
		{
			get { return GetColumnValue<int>(Columns.MeterTypeID); }
			set { SetColumnValue(Columns.MeterTypeID, value); }
		}
		  
		[XmlAttribute("MeterTypeName")]
		[Bindable(true)]
		public string MeterTypeName 
		{
			get { return GetColumnValue<string>(Columns.MeterTypeName); }
			set { SetColumnValue(Columns.MeterTypeName, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("AllowIssue")]
		[Bindable(true)]
		public bool? AllowIssue 
		{
			get { return GetColumnValue<bool?>(Columns.AllowIssue); }
			set { SetColumnValue(Columns.AllowIssue, value); }
		}
		  
		[XmlAttribute("CLoad")]
		[Bindable(true)]
		public int? CLoad 
		{
			get { return GetColumnValue<int?>(Columns.CLoad); }
			set { SetColumnValue(Columns.CLoad, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblMeterCollection TblMeterRecords()
		{
			return new SmartCBSDataAccess.TblMeterCollection().Where(TblMeter.Columns.MeterTypeID, MeterTypeID).Load();
		}
		public SmartCBSDataAccess.TblMeterDocumentCollection TblMeterDocumentRecords()
		{
			return new SmartCBSDataAccess.TblMeterDocumentCollection().Where(TblMeterDocument.Columns.MeterTypeID, MeterTypeID).Load();
		}
		public SmartCBSDataAccess.TblNewConnectionCollection TblNewConnectionRecords()
		{
			return new SmartCBSDataAccess.TblNewConnectionCollection().Where(TblNewConnection.Columns.MeterTypeID, MeterTypeID).Load();
		}
		public SmartCBSDataAccess.TblTariffSlabCollection TblTariffSlabs()
		{
			return new SmartCBSDataAccess.TblTariffSlabCollection().Where(TblTariffSlab.Columns.MeterTypeID, MeterTypeID).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMeterTypeName,DateTime? varCreatedOn,DateTime? varModifiedOn,bool? varAllowIssue,int? varCLoad)
		{
			TblMeterType item = new TblMeterType();
			
			item.MeterTypeName = varMeterTypeName;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.AllowIssue = varAllowIssue;
			
			item.CLoad = varCLoad;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMeterTypeID,string varMeterTypeName,DateTime? varCreatedOn,DateTime? varModifiedOn,bool? varAllowIssue,int? varCLoad)
		{
			TblMeterType item = new TblMeterType();
			
				item.MeterTypeID = varMeterTypeID;
			
				item.MeterTypeName = varMeterTypeName;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.AllowIssue = varAllowIssue;
			
				item.CLoad = varCLoad;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MeterTypeIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterTypeNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AllowIssueColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CLoadColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MeterTypeID = @"MeterTypeID";
			 public static string MeterTypeName = @"MeterTypeName";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string AllowIssue = @"AllowIssue";
			 public static string CLoad = @"CLoad";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
