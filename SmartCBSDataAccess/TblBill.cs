using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblBill class.
	/// </summary>
    [Serializable]
	public partial class TblBillCollection : ActiveList<TblBill, TblBillCollection>
	{	   
		public TblBillCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblBillCollection</returns>
		public TblBillCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblBill o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblBill table.
	/// </summary>
	[Serializable]
	public partial class TblBill : ActiveRecord<TblBill>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblBill()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblBill(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblBill(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblBill(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblBill", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarBillID = new TableSchema.TableColumn(schema);
				colvarBillID.ColumnName = "BillID";
				colvarBillID.DataType = DbType.Int32;
				colvarBillID.MaxLength = 0;
				colvarBillID.AutoIncrement = true;
				colvarBillID.IsNullable = false;
				colvarBillID.IsPrimaryKey = true;
				colvarBillID.IsForeignKey = false;
				colvarBillID.IsReadOnly = false;
				colvarBillID.DefaultSetting = @"";
				colvarBillID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillID);
				
				TableSchema.TableColumn colvarBillNo = new TableSchema.TableColumn(schema);
				colvarBillNo.ColumnName = "BillNo";
				colvarBillNo.DataType = DbType.AnsiString;
				colvarBillNo.MaxLength = 100;
				colvarBillNo.AutoIncrement = false;
				colvarBillNo.IsNullable = true;
				colvarBillNo.IsPrimaryKey = false;
				colvarBillNo.IsForeignKey = false;
				colvarBillNo.IsReadOnly = false;
				colvarBillNo.DefaultSetting = @"";
				colvarBillNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillNo);
				
				TableSchema.TableColumn colvarMeterReadingID = new TableSchema.TableColumn(schema);
				colvarMeterReadingID.ColumnName = "MeterReadingID";
				colvarMeterReadingID.DataType = DbType.Int32;
				colvarMeterReadingID.MaxLength = 0;
				colvarMeterReadingID.AutoIncrement = false;
				colvarMeterReadingID.IsNullable = false;
				colvarMeterReadingID.IsPrimaryKey = false;
				colvarMeterReadingID.IsForeignKey = true;
				colvarMeterReadingID.IsReadOnly = false;
				colvarMeterReadingID.DefaultSetting = @"";
				
					colvarMeterReadingID.ForeignKeyTableName = "TblMeterReading";
				schema.Columns.Add(colvarMeterReadingID);
				
				TableSchema.TableColumn colvarNoOfMonths = new TableSchema.TableColumn(schema);
				colvarNoOfMonths.ColumnName = "NoOfMonths";
				colvarNoOfMonths.DataType = DbType.Int32;
				colvarNoOfMonths.MaxLength = 0;
				colvarNoOfMonths.AutoIncrement = false;
				colvarNoOfMonths.IsNullable = true;
				colvarNoOfMonths.IsPrimaryKey = false;
				colvarNoOfMonths.IsForeignKey = false;
				colvarNoOfMonths.IsReadOnly = false;
				colvarNoOfMonths.DefaultSetting = @"";
				colvarNoOfMonths.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoOfMonths);
				
				TableSchema.TableColumn colvarBillChargingModeID = new TableSchema.TableColumn(schema);
				colvarBillChargingModeID.ColumnName = "BillChargingModeID";
				colvarBillChargingModeID.DataType = DbType.Int32;
				colvarBillChargingModeID.MaxLength = 0;
				colvarBillChargingModeID.AutoIncrement = false;
				colvarBillChargingModeID.IsNullable = false;
				colvarBillChargingModeID.IsPrimaryKey = false;
				colvarBillChargingModeID.IsForeignKey = true;
				colvarBillChargingModeID.IsReadOnly = false;
				colvarBillChargingModeID.DefaultSetting = @"";
				
					colvarBillChargingModeID.ForeignKeyTableName = "TblBillChargingMode";
				schema.Columns.Add(colvarBillChargingModeID);
				
				TableSchema.TableColumn colvarTariffID = new TableSchema.TableColumn(schema);
				colvarTariffID.ColumnName = "TariffID";
				colvarTariffID.DataType = DbType.Int32;
				colvarTariffID.MaxLength = 0;
				colvarTariffID.AutoIncrement = false;
				colvarTariffID.IsNullable = false;
				colvarTariffID.IsPrimaryKey = false;
				colvarTariffID.IsForeignKey = true;
				colvarTariffID.IsReadOnly = false;
				colvarTariffID.DefaultSetting = @"";
				
					colvarTariffID.ForeignKeyTableName = "TblTariff";
				schema.Columns.Add(colvarTariffID);
				
				TableSchema.TableColumn colvarSLoad = new TableSchema.TableColumn(schema);
				colvarSLoad.ColumnName = "SLoad";
				colvarSLoad.DataType = DbType.Int32;
				colvarSLoad.MaxLength = 0;
				colvarSLoad.AutoIncrement = false;
				colvarSLoad.IsNullable = true;
				colvarSLoad.IsPrimaryKey = false;
				colvarSLoad.IsForeignKey = false;
				colvarSLoad.IsReadOnly = false;
				colvarSLoad.DefaultSetting = @"";
				colvarSLoad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSLoad);
				
				TableSchema.TableColumn colvarTotalSD = new TableSchema.TableColumn(schema);
				colvarTotalSD.ColumnName = "TotalSD";
				colvarTotalSD.DataType = DbType.Decimal;
				colvarTotalSD.MaxLength = 0;
				colvarTotalSD.AutoIncrement = false;
				colvarTotalSD.IsNullable = true;
				colvarTotalSD.IsPrimaryKey = false;
				colvarTotalSD.IsForeignKey = false;
				colvarTotalSD.IsReadOnly = false;
				colvarTotalSD.DefaultSetting = @"";
				colvarTotalSD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalSD);
				
				TableSchema.TableColumn colvarIssueDate = new TableSchema.TableColumn(schema);
				colvarIssueDate.ColumnName = "IssueDate";
				colvarIssueDate.DataType = DbType.DateTime;
				colvarIssueDate.MaxLength = 0;
				colvarIssueDate.AutoIncrement = false;
				colvarIssueDate.IsNullable = true;
				colvarIssueDate.IsPrimaryKey = false;
				colvarIssueDate.IsForeignKey = false;
				colvarIssueDate.IsReadOnly = false;
				colvarIssueDate.DefaultSetting = @"";
				colvarIssueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIssueDate);
				
				TableSchema.TableColumn colvarDueDate = new TableSchema.TableColumn(schema);
				colvarDueDate.ColumnName = "DueDate";
				colvarDueDate.DataType = DbType.DateTime;
				colvarDueDate.MaxLength = 0;
				colvarDueDate.AutoIncrement = false;
				colvarDueDate.IsNullable = true;
				colvarDueDate.IsPrimaryKey = false;
				colvarDueDate.IsForeignKey = false;
				colvarDueDate.IsReadOnly = false;
				colvarDueDate.DefaultSetting = @"";
				colvarDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDueDate);
				
				TableSchema.TableColumn colvarBillingMonth = new TableSchema.TableColumn(schema);
				colvarBillingMonth.ColumnName = "BillingMonth";
				colvarBillingMonth.DataType = DbType.AnsiString;
				colvarBillingMonth.MaxLength = 50;
				colvarBillingMonth.AutoIncrement = false;
				colvarBillingMonth.IsNullable = true;
				colvarBillingMonth.IsPrimaryKey = false;
				colvarBillingMonth.IsForeignKey = false;
				colvarBillingMonth.IsReadOnly = false;
				colvarBillingMonth.DefaultSetting = @"";
				colvarBillingMonth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingMonth);
				
				TableSchema.TableColumn colvarBillingYear = new TableSchema.TableColumn(schema);
				colvarBillingYear.ColumnName = "BillingYear";
				colvarBillingYear.DataType = DbType.AnsiString;
				colvarBillingYear.MaxLength = 50;
				colvarBillingYear.AutoIncrement = false;
				colvarBillingYear.IsNullable = true;
				colvarBillingYear.IsPrimaryKey = false;
				colvarBillingYear.IsForeignKey = false;
				colvarBillingYear.IsReadOnly = false;
				colvarBillingYear.DefaultSetting = @"";
				colvarBillingYear.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingYear);
				
				TableSchema.TableColumn colvarUnitsBill = new TableSchema.TableColumn(schema);
				colvarUnitsBill.ColumnName = "UnitsBill";
				colvarUnitsBill.DataType = DbType.Decimal;
				colvarUnitsBill.MaxLength = 0;
				colvarUnitsBill.AutoIncrement = false;
				colvarUnitsBill.IsNullable = false;
				colvarUnitsBill.IsPrimaryKey = false;
				colvarUnitsBill.IsForeignKey = false;
				colvarUnitsBill.IsReadOnly = false;
				colvarUnitsBill.DefaultSetting = @"";
				colvarUnitsBill.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitsBill);
				
				TableSchema.TableColumn colvarUnitsAdjusted = new TableSchema.TableColumn(schema);
				colvarUnitsAdjusted.ColumnName = "UnitsAdjusted";
				colvarUnitsAdjusted.DataType = DbType.Decimal;
				colvarUnitsAdjusted.MaxLength = 0;
				colvarUnitsAdjusted.AutoIncrement = false;
				colvarUnitsAdjusted.IsNullable = true;
				colvarUnitsAdjusted.IsPrimaryKey = false;
				colvarUnitsAdjusted.IsForeignKey = false;
				colvarUnitsAdjusted.IsReadOnly = false;
				colvarUnitsAdjusted.DefaultSetting = @"";
				colvarUnitsAdjusted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitsAdjusted);
				
				TableSchema.TableColumn colvarBillUpto = new TableSchema.TableColumn(schema);
				colvarBillUpto.ColumnName = "BillUpto";
				colvarBillUpto.DataType = DbType.Decimal;
				colvarBillUpto.MaxLength = 0;
				colvarBillUpto.AutoIncrement = false;
				colvarBillUpto.IsNullable = true;
				colvarBillUpto.IsPrimaryKey = false;
				colvarBillUpto.IsForeignKey = false;
				colvarBillUpto.IsReadOnly = false;
				colvarBillUpto.DefaultSetting = @"";
				colvarBillUpto.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillUpto);
				
				TableSchema.TableColumn colvarMdi = new TableSchema.TableColumn(schema);
				colvarMdi.ColumnName = "MDI";
				colvarMdi.DataType = DbType.Decimal;
				colvarMdi.MaxLength = 0;
				colvarMdi.AutoIncrement = false;
				colvarMdi.IsNullable = true;
				colvarMdi.IsPrimaryKey = false;
				colvarMdi.IsForeignKey = false;
				colvarMdi.IsReadOnly = false;
				colvarMdi.DefaultSetting = @"";
				colvarMdi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMdi);
				
				TableSchema.TableColumn colvarTotalArears = new TableSchema.TableColumn(schema);
				colvarTotalArears.ColumnName = "TotalArears";
				colvarTotalArears.DataType = DbType.Decimal;
				colvarTotalArears.MaxLength = 0;
				colvarTotalArears.AutoIncrement = false;
				colvarTotalArears.IsNullable = true;
				colvarTotalArears.IsPrimaryKey = false;
				colvarTotalArears.IsForeignKey = false;
				colvarTotalArears.IsReadOnly = false;
				colvarTotalArears.DefaultSetting = @"";
				colvarTotalArears.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalArears);
				
				TableSchema.TableColumn colvarAmountPaybleDueDate = new TableSchema.TableColumn(schema);
				colvarAmountPaybleDueDate.ColumnName = "AmountPaybleDueDate";
				colvarAmountPaybleDueDate.DataType = DbType.Decimal;
				colvarAmountPaybleDueDate.MaxLength = 0;
				colvarAmountPaybleDueDate.AutoIncrement = false;
				colvarAmountPaybleDueDate.IsNullable = true;
				colvarAmountPaybleDueDate.IsPrimaryKey = false;
				colvarAmountPaybleDueDate.IsForeignKey = false;
				colvarAmountPaybleDueDate.IsReadOnly = false;
				colvarAmountPaybleDueDate.DefaultSetting = @"";
				colvarAmountPaybleDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmountPaybleDueDate);
				
				TableSchema.TableColumn colvarAmountPaybleAfterDueDate = new TableSchema.TableColumn(schema);
				colvarAmountPaybleAfterDueDate.ColumnName = "AmountPaybleAfterDueDate";
				colvarAmountPaybleAfterDueDate.DataType = DbType.Decimal;
				colvarAmountPaybleAfterDueDate.MaxLength = 0;
				colvarAmountPaybleAfterDueDate.AutoIncrement = false;
				colvarAmountPaybleAfterDueDate.IsNullable = true;
				colvarAmountPaybleAfterDueDate.IsPrimaryKey = false;
				colvarAmountPaybleAfterDueDate.IsForeignKey = false;
				colvarAmountPaybleAfterDueDate.IsReadOnly = false;
				colvarAmountPaybleAfterDueDate.DefaultSetting = @"";
				colvarAmountPaybleAfterDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmountPaybleAfterDueDate);
				
				TableSchema.TableColumn colvarActualBillPaybleDueDate = new TableSchema.TableColumn(schema);
				colvarActualBillPaybleDueDate.ColumnName = "ActualBillPaybleDueDate";
				colvarActualBillPaybleDueDate.DataType = DbType.Decimal;
				colvarActualBillPaybleDueDate.MaxLength = 0;
				colvarActualBillPaybleDueDate.AutoIncrement = false;
				colvarActualBillPaybleDueDate.IsNullable = true;
				colvarActualBillPaybleDueDate.IsPrimaryKey = false;
				colvarActualBillPaybleDueDate.IsForeignKey = false;
				colvarActualBillPaybleDueDate.IsReadOnly = false;
				colvarActualBillPaybleDueDate.DefaultSetting = @"";
				colvarActualBillPaybleDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualBillPaybleDueDate);
				
				TableSchema.TableColumn colvarActualBillPaybleAfterDueDate = new TableSchema.TableColumn(schema);
				colvarActualBillPaybleAfterDueDate.ColumnName = "ActualBillPaybleAfterDueDate";
				colvarActualBillPaybleAfterDueDate.DataType = DbType.Decimal;
				colvarActualBillPaybleAfterDueDate.MaxLength = 0;
				colvarActualBillPaybleAfterDueDate.AutoIncrement = false;
				colvarActualBillPaybleAfterDueDate.IsNullable = true;
				colvarActualBillPaybleAfterDueDate.IsPrimaryKey = false;
				colvarActualBillPaybleAfterDueDate.IsForeignKey = false;
				colvarActualBillPaybleAfterDueDate.IsReadOnly = false;
				colvarActualBillPaybleAfterDueDate.DefaultSetting = @"";
				colvarActualBillPaybleAfterDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualBillPaybleAfterDueDate);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.AnsiString;
				colvarStatus.MaxLength = 50;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = true;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarBillCreatedBy = new TableSchema.TableColumn(schema);
				colvarBillCreatedBy.ColumnName = "BillCreatedBy";
				colvarBillCreatedBy.DataType = DbType.Int32;
				colvarBillCreatedBy.MaxLength = 0;
				colvarBillCreatedBy.AutoIncrement = false;
				colvarBillCreatedBy.IsNullable = true;
				colvarBillCreatedBy.IsPrimaryKey = false;
				colvarBillCreatedBy.IsForeignKey = true;
				colvarBillCreatedBy.IsReadOnly = false;
				colvarBillCreatedBy.DefaultSetting = @"";
				
					colvarBillCreatedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarBillCreatedBy);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarIsCancel = new TableSchema.TableColumn(schema);
				colvarIsCancel.ColumnName = "isCancel";
				colvarIsCancel.DataType = DbType.Boolean;
				colvarIsCancel.MaxLength = 0;
				colvarIsCancel.AutoIncrement = false;
				colvarIsCancel.IsNullable = true;
				colvarIsCancel.IsPrimaryKey = false;
				colvarIsCancel.IsForeignKey = false;
				colvarIsCancel.IsReadOnly = false;
				colvarIsCancel.DefaultSetting = @"";
				colvarIsCancel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCancel);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = true;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				
					colvarConsumerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarBillBarcode = new TableSchema.TableColumn(schema);
				colvarBillBarcode.ColumnName = "BillBarcode";
				colvarBillBarcode.DataType = DbType.AnsiString;
				colvarBillBarcode.MaxLength = -1;
				colvarBillBarcode.AutoIncrement = false;
				colvarBillBarcode.IsNullable = true;
				colvarBillBarcode.IsPrimaryKey = false;
				colvarBillBarcode.IsForeignKey = false;
				colvarBillBarcode.IsReadOnly = false;
				colvarBillBarcode.DefaultSetting = @"";
				colvarBillBarcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillBarcode);
				
				TableSchema.TableColumn colvarIsSupplementary = new TableSchema.TableColumn(schema);
				colvarIsSupplementary.ColumnName = "IsSupplementary";
				colvarIsSupplementary.DataType = DbType.Boolean;
				colvarIsSupplementary.MaxLength = 0;
				colvarIsSupplementary.AutoIncrement = false;
				colvarIsSupplementary.IsNullable = true;
				colvarIsSupplementary.IsPrimaryKey = false;
				colvarIsSupplementary.IsForeignKey = false;
				colvarIsSupplementary.IsReadOnly = false;
				colvarIsSupplementary.DefaultSetting = @"";
				colvarIsSupplementary.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSupplementary);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblBill",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("BillID")]
		[Bindable(true)]
		public int BillID 
		{
			get { return GetColumnValue<int>(Columns.BillID); }
			set { SetColumnValue(Columns.BillID, value); }
		}
		  
		[XmlAttribute("BillNo")]
		[Bindable(true)]
		public string BillNo 
		{
			get { return GetColumnValue<string>(Columns.BillNo); }
			set { SetColumnValue(Columns.BillNo, value); }
		}
		  
		[XmlAttribute("MeterReadingID")]
		[Bindable(true)]
		public int MeterReadingID 
		{
			get { return GetColumnValue<int>(Columns.MeterReadingID); }
			set { SetColumnValue(Columns.MeterReadingID, value); }
		}
		  
		[XmlAttribute("NoOfMonths")]
		[Bindable(true)]
		public int? NoOfMonths 
		{
			get { return GetColumnValue<int?>(Columns.NoOfMonths); }
			set { SetColumnValue(Columns.NoOfMonths, value); }
		}
		  
		[XmlAttribute("BillChargingModeID")]
		[Bindable(true)]
		public int BillChargingModeID 
		{
			get { return GetColumnValue<int>(Columns.BillChargingModeID); }
			set { SetColumnValue(Columns.BillChargingModeID, value); }
		}
		  
		[XmlAttribute("TariffID")]
		[Bindable(true)]
		public int TariffID 
		{
			get { return GetColumnValue<int>(Columns.TariffID); }
			set { SetColumnValue(Columns.TariffID, value); }
		}
		  
		[XmlAttribute("SLoad")]
		[Bindable(true)]
		public int? SLoad 
		{
			get { return GetColumnValue<int?>(Columns.SLoad); }
			set { SetColumnValue(Columns.SLoad, value); }
		}
		  
		[XmlAttribute("TotalSD")]
		[Bindable(true)]
		public decimal? TotalSD 
		{
			get { return GetColumnValue<decimal?>(Columns.TotalSD); }
			set { SetColumnValue(Columns.TotalSD, value); }
		}
		  
		[XmlAttribute("IssueDate")]
		[Bindable(true)]
		public DateTime? IssueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.IssueDate); }
			set { SetColumnValue(Columns.IssueDate, value); }
		}
		  
		[XmlAttribute("DueDate")]
		[Bindable(true)]
		public DateTime? DueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DueDate); }
			set { SetColumnValue(Columns.DueDate, value); }
		}
		  
		[XmlAttribute("BillingMonth")]
		[Bindable(true)]
		public string BillingMonth 
		{
			get { return GetColumnValue<string>(Columns.BillingMonth); }
			set { SetColumnValue(Columns.BillingMonth, value); }
		}
		  
		[XmlAttribute("BillingYear")]
		[Bindable(true)]
		public string BillingYear 
		{
			get { return GetColumnValue<string>(Columns.BillingYear); }
			set { SetColumnValue(Columns.BillingYear, value); }
		}
		  
		[XmlAttribute("UnitsBill")]
		[Bindable(true)]
		public decimal UnitsBill 
		{
			get { return GetColumnValue<decimal>(Columns.UnitsBill); }
			set { SetColumnValue(Columns.UnitsBill, value); }
		}
		  
		[XmlAttribute("UnitsAdjusted")]
		[Bindable(true)]
		public decimal? UnitsAdjusted 
		{
			get { return GetColumnValue<decimal?>(Columns.UnitsAdjusted); }
			set { SetColumnValue(Columns.UnitsAdjusted, value); }
		}
		  
		[XmlAttribute("BillUpto")]
		[Bindable(true)]
		public decimal? BillUpto 
		{
			get { return GetColumnValue<decimal?>(Columns.BillUpto); }
			set { SetColumnValue(Columns.BillUpto, value); }
		}
		  
		[XmlAttribute("Mdi")]
		[Bindable(true)]
		public decimal? Mdi 
		{
			get { return GetColumnValue<decimal?>(Columns.Mdi); }
			set { SetColumnValue(Columns.Mdi, value); }
		}
		  
		[XmlAttribute("TotalArears")]
		[Bindable(true)]
		public decimal? TotalArears 
		{
			get { return GetColumnValue<decimal?>(Columns.TotalArears); }
			set { SetColumnValue(Columns.TotalArears, value); }
		}
		  
		[XmlAttribute("AmountPaybleDueDate")]
		[Bindable(true)]
		public decimal? AmountPaybleDueDate 
		{
			get { return GetColumnValue<decimal?>(Columns.AmountPaybleDueDate); }
			set { SetColumnValue(Columns.AmountPaybleDueDate, value); }
		}
		  
		[XmlAttribute("AmountPaybleAfterDueDate")]
		[Bindable(true)]
		public decimal? AmountPaybleAfterDueDate 
		{
			get { return GetColumnValue<decimal?>(Columns.AmountPaybleAfterDueDate); }
			set { SetColumnValue(Columns.AmountPaybleAfterDueDate, value); }
		}
		  
		[XmlAttribute("ActualBillPaybleDueDate")]
		[Bindable(true)]
		public decimal? ActualBillPaybleDueDate 
		{
			get { return GetColumnValue<decimal?>(Columns.ActualBillPaybleDueDate); }
			set { SetColumnValue(Columns.ActualBillPaybleDueDate, value); }
		}
		  
		[XmlAttribute("ActualBillPaybleAfterDueDate")]
		[Bindable(true)]
		public decimal? ActualBillPaybleAfterDueDate 
		{
			get { return GetColumnValue<decimal?>(Columns.ActualBillPaybleAfterDueDate); }
			set { SetColumnValue(Columns.ActualBillPaybleAfterDueDate, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public string Status 
		{
			get { return GetColumnValue<string>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int? MeterID 
		{
			get { return GetColumnValue<int?>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("BillCreatedBy")]
		[Bindable(true)]
		public int? BillCreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.BillCreatedBy); }
			set { SetColumnValue(Columns.BillCreatedBy, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("IsCancel")]
		[Bindable(true)]
		public bool? IsCancel 
		{
			get { return GetColumnValue<bool?>(Columns.IsCancel); }
			set { SetColumnValue(Columns.IsCancel, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("BillBarcode")]
		[Bindable(true)]
		public string BillBarcode 
		{
			get { return GetColumnValue<string>(Columns.BillBarcode); }
			set { SetColumnValue(Columns.BillBarcode, value); }
		}
		  
		[XmlAttribute("IsSupplementary")]
		[Bindable(true)]
		public bool? IsSupplementary 
		{
			get { return GetColumnValue<bool?>(Columns.IsSupplementary); }
			set { SetColumnValue(Columns.IsSupplementary, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblArrearCollection TblArrearRecords()
		{
			return new SmartCBSDataAccess.TblArrearCollection().Where(TblArrear.Columns.BillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblBillAdjustmentCollection TblBillAdjustmentRecords()
		{
			return new SmartCBSDataAccess.TblBillAdjustmentCollection().Where(TblBillAdjustment.Columns.BillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblBillArearCollection TblBillArears()
		{
			return new SmartCBSDataAccess.TblBillArearCollection().Where(TblBillArear.Columns.CurrentBillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblBillArearCollection TblBillArearsFromTblBill()
		{
			return new SmartCBSDataAccess.TblBillArearCollection().Where(TblBillArear.Columns.ArearBillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblBillCalculationCollection TblBillCalculationRecords()
		{
			return new SmartCBSDataAccess.TblBillCalculationCollection().Where(TblBillCalculation.Columns.BillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblBillDetailCollection TblBillDetailRecords()
		{
			return new SmartCBSDataAccess.TblBillDetailCollection().Where(TblBillDetail.Columns.BillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblBillPaymentCollection TblBillPaymentRecords()
		{
			return new SmartCBSDataAccess.TblBillPaymentCollection().Where(TblBillPayment.Columns.BillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblBillPrintLogCollection TblBillPrintLogRecords()
		{
			return new SmartCBSDataAccess.TblBillPrintLogCollection().Where(TblBillPrintLog.Columns.BillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblConsumerLedgerLogCollection TblConsumerLedgerLogRecords()
		{
			return new SmartCBSDataAccess.TblConsumerLedgerLogCollection().Where(TblConsumerLedgerLog.Columns.BillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblInstallementCollection TblInstallementRecords()
		{
			return new SmartCBSDataAccess.TblInstallementCollection().Where(TblInstallement.Columns.BillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblLedgerCollection TblLedgerRecords()
		{
			return new SmartCBSDataAccess.TblLedgerCollection().Where(TblLedger.Columns.BillID, BillID).Load();
		}
		public SmartCBSDataAccess.TblQueueDetailCollection TblQueueDetailRecords()
		{
			return new SmartCBSDataAccess.TblQueueDetailCollection().Where(TblQueueDetail.Columns.BillID, BillID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBillChargingMode ActiveRecord object related to this TblBill
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBillChargingMode TblBillChargingMode
		{
			get { return SmartCBSDataAccess.TblBillChargingMode.FetchByID(this.BillChargingModeID); }
			set { SetColumnValue("BillChargingModeID", value.BillChargingModeID); }
		}
		
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblBill
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblBill
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.ConsumerID); }
			set { SetColumnValue("ConsumerID", value.CunsumerID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblBill
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.BillCreatedBy); }
			set { SetColumnValue("BillCreatedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblBill
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterReading ActiveRecord object related to this TblBill
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterReading TblMeterReading
		{
			get { return SmartCBSDataAccess.TblMeterReading.FetchByID(this.MeterReadingID); }
			set { SetColumnValue("MeterReadingID", value.MeterReadingID); }
		}
		
		
		/// <summary>
		/// Returns a TblTariff ActiveRecord object related to this TblBill
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblTariff TblTariff
		{
			get { return SmartCBSDataAccess.TblTariff.FetchByID(this.TariffID); }
			set { SetColumnValue("TariffID", value.TariffID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varBillNo,int varMeterReadingID,int? varNoOfMonths,int varBillChargingModeID,int varTariffID,int? varSLoad,decimal? varTotalSD,DateTime? varIssueDate,DateTime? varDueDate,string varBillingMonth,string varBillingYear,decimal varUnitsBill,decimal? varUnitsAdjusted,decimal? varBillUpto,decimal? varMdi,decimal? varTotalArears,decimal? varAmountPaybleDueDate,decimal? varAmountPaybleAfterDueDate,decimal? varActualBillPaybleDueDate,decimal? varActualBillPaybleAfterDueDate,DateTime? varCreatedOn,DateTime? varModifiedOn,string varStatus,int? varMeterID,int? varBillCreatedBy,int? varBranchID,bool? varIsCancel,int? varConsumerID,string varBillBarcode,bool? varIsSupplementary)
		{
			TblBill item = new TblBill();
			
			item.BillNo = varBillNo;
			
			item.MeterReadingID = varMeterReadingID;
			
			item.NoOfMonths = varNoOfMonths;
			
			item.BillChargingModeID = varBillChargingModeID;
			
			item.TariffID = varTariffID;
			
			item.SLoad = varSLoad;
			
			item.TotalSD = varTotalSD;
			
			item.IssueDate = varIssueDate;
			
			item.DueDate = varDueDate;
			
			item.BillingMonth = varBillingMonth;
			
			item.BillingYear = varBillingYear;
			
			item.UnitsBill = varUnitsBill;
			
			item.UnitsAdjusted = varUnitsAdjusted;
			
			item.BillUpto = varBillUpto;
			
			item.Mdi = varMdi;
			
			item.TotalArears = varTotalArears;
			
			item.AmountPaybleDueDate = varAmountPaybleDueDate;
			
			item.AmountPaybleAfterDueDate = varAmountPaybleAfterDueDate;
			
			item.ActualBillPaybleDueDate = varActualBillPaybleDueDate;
			
			item.ActualBillPaybleAfterDueDate = varActualBillPaybleAfterDueDate;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.Status = varStatus;
			
			item.MeterID = varMeterID;
			
			item.BillCreatedBy = varBillCreatedBy;
			
			item.BranchID = varBranchID;
			
			item.IsCancel = varIsCancel;
			
			item.ConsumerID = varConsumerID;
			
			item.BillBarcode = varBillBarcode;
			
			item.IsSupplementary = varIsSupplementary;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varBillID,string varBillNo,int varMeterReadingID,int? varNoOfMonths,int varBillChargingModeID,int varTariffID,int? varSLoad,decimal? varTotalSD,DateTime? varIssueDate,DateTime? varDueDate,string varBillingMonth,string varBillingYear,decimal varUnitsBill,decimal? varUnitsAdjusted,decimal? varBillUpto,decimal? varMdi,decimal? varTotalArears,decimal? varAmountPaybleDueDate,decimal? varAmountPaybleAfterDueDate,decimal? varActualBillPaybleDueDate,decimal? varActualBillPaybleAfterDueDate,DateTime? varCreatedOn,DateTime? varModifiedOn,string varStatus,int? varMeterID,int? varBillCreatedBy,int? varBranchID,bool? varIsCancel,int? varConsumerID,string varBillBarcode,bool? varIsSupplementary)
		{
			TblBill item = new TblBill();
			
				item.BillID = varBillID;
			
				item.BillNo = varBillNo;
			
				item.MeterReadingID = varMeterReadingID;
			
				item.NoOfMonths = varNoOfMonths;
			
				item.BillChargingModeID = varBillChargingModeID;
			
				item.TariffID = varTariffID;
			
				item.SLoad = varSLoad;
			
				item.TotalSD = varTotalSD;
			
				item.IssueDate = varIssueDate;
			
				item.DueDate = varDueDate;
			
				item.BillingMonth = varBillingMonth;
			
				item.BillingYear = varBillingYear;
			
				item.UnitsBill = varUnitsBill;
			
				item.UnitsAdjusted = varUnitsAdjusted;
			
				item.BillUpto = varBillUpto;
			
				item.Mdi = varMdi;
			
				item.TotalArears = varTotalArears;
			
				item.AmountPaybleDueDate = varAmountPaybleDueDate;
			
				item.AmountPaybleAfterDueDate = varAmountPaybleAfterDueDate;
			
				item.ActualBillPaybleDueDate = varActualBillPaybleDueDate;
			
				item.ActualBillPaybleAfterDueDate = varActualBillPaybleAfterDueDate;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.Status = varStatus;
			
				item.MeterID = varMeterID;
			
				item.BillCreatedBy = varBillCreatedBy;
			
				item.BranchID = varBranchID;
			
				item.IsCancel = varIsCancel;
			
				item.ConsumerID = varConsumerID;
			
				item.BillBarcode = varBillBarcode;
			
				item.IsSupplementary = varIsSupplementary;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn BillIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BillNoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterReadingIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NoOfMonthsColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BillChargingModeIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TariffIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SLoadColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalSDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IssueDateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DueDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn BillingMonthColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn BillingYearColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitsBillColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitsAdjustedColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn BillUptoColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn MdiColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalArearsColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountPaybleDueDateColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountPaybleAfterDueDateColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualBillPaybleDueDateColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualBillPaybleAfterDueDateColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn BillCreatedByColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn IsCancelColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn BillBarcodeColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn IsSupplementaryColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string BillID = @"BillID";
			 public static string BillNo = @"BillNo";
			 public static string MeterReadingID = @"MeterReadingID";
			 public static string NoOfMonths = @"NoOfMonths";
			 public static string BillChargingModeID = @"BillChargingModeID";
			 public static string TariffID = @"TariffID";
			 public static string SLoad = @"SLoad";
			 public static string TotalSD = @"TotalSD";
			 public static string IssueDate = @"IssueDate";
			 public static string DueDate = @"DueDate";
			 public static string BillingMonth = @"BillingMonth";
			 public static string BillingYear = @"BillingYear";
			 public static string UnitsBill = @"UnitsBill";
			 public static string UnitsAdjusted = @"UnitsAdjusted";
			 public static string BillUpto = @"BillUpto";
			 public static string Mdi = @"MDI";
			 public static string TotalArears = @"TotalArears";
			 public static string AmountPaybleDueDate = @"AmountPaybleDueDate";
			 public static string AmountPaybleAfterDueDate = @"AmountPaybleAfterDueDate";
			 public static string ActualBillPaybleDueDate = @"ActualBillPaybleDueDate";
			 public static string ActualBillPaybleAfterDueDate = @"ActualBillPaybleAfterDueDate";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string Status = @"Status";
			 public static string MeterID = @"MeterID";
			 public static string BillCreatedBy = @"BillCreatedBy";
			 public static string BranchID = @"BranchID";
			 public static string IsCancel = @"isCancel";
			 public static string ConsumerID = @"ConsumerID";
			 public static string BillBarcode = @"BillBarcode";
			 public static string IsSupplementary = @"IsSupplementary";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
