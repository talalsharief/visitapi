using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwTblMeterFeedBack class.
    /// </summary>
    [Serializable]
    public partial class VwTblMeterFeedBackCollection : ReadOnlyList<VwTblMeterFeedBack, VwTblMeterFeedBackCollection>
    {        
        public VwTblMeterFeedBackCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwTblMeterFeedBack view.
    /// </summary>
    [Serializable]
    public partial class VwTblMeterFeedBack : ReadOnlyRecord<VwTblMeterFeedBack>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwTblMeterFeedBack", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarMeterFeedbackID = new TableSchema.TableColumn(schema);
                colvarMeterFeedbackID.ColumnName = "MeterFeedbackID";
                colvarMeterFeedbackID.DataType = DbType.Int32;
                colvarMeterFeedbackID.MaxLength = 0;
                colvarMeterFeedbackID.AutoIncrement = false;
                colvarMeterFeedbackID.IsNullable = false;
                colvarMeterFeedbackID.IsPrimaryKey = false;
                colvarMeterFeedbackID.IsForeignKey = false;
                colvarMeterFeedbackID.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterFeedbackID);
                
                TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
                colvarMeterID.ColumnName = "MeterID";
                colvarMeterID.DataType = DbType.Int32;
                colvarMeterID.MaxLength = 0;
                colvarMeterID.AutoIncrement = false;
                colvarMeterID.IsNullable = false;
                colvarMeterID.IsPrimaryKey = false;
                colvarMeterID.IsForeignKey = false;
                colvarMeterID.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterID);
                
                TableSchema.TableColumn colvarMeterNo = new TableSchema.TableColumn(schema);
                colvarMeterNo.ColumnName = "MeterNo";
                colvarMeterNo.DataType = DbType.AnsiString;
                colvarMeterNo.MaxLength = -1;
                colvarMeterNo.AutoIncrement = false;
                colvarMeterNo.IsNullable = true;
                colvarMeterNo.IsPrimaryKey = false;
                colvarMeterNo.IsForeignKey = false;
                colvarMeterNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterNo);
                
                TableSchema.TableColumn colvarAccountNo = new TableSchema.TableColumn(schema);
                colvarAccountNo.ColumnName = "AccountNo";
                colvarAccountNo.DataType = DbType.AnsiString;
                colvarAccountNo.MaxLength = -1;
                colvarAccountNo.AutoIncrement = false;
                colvarAccountNo.IsNullable = true;
                colvarAccountNo.IsPrimaryKey = false;
                colvarAccountNo.IsForeignKey = false;
                colvarAccountNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarAccountNo);
                
                TableSchema.TableColumn colvarMeterIssueDate = new TableSchema.TableColumn(schema);
                colvarMeterIssueDate.ColumnName = "MeterIssueDate";
                colvarMeterIssueDate.DataType = DbType.DateTime;
                colvarMeterIssueDate.MaxLength = 0;
                colvarMeterIssueDate.AutoIncrement = false;
                colvarMeterIssueDate.IsNullable = true;
                colvarMeterIssueDate.IsPrimaryKey = false;
                colvarMeterIssueDate.IsForeignKey = false;
                colvarMeterIssueDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterIssueDate);
                
                TableSchema.TableColumn colvarMeterLife = new TableSchema.TableColumn(schema);
                colvarMeterLife.ColumnName = "MeterLife";
                colvarMeterLife.DataType = DbType.Int32;
                colvarMeterLife.MaxLength = 0;
                colvarMeterLife.AutoIncrement = false;
                colvarMeterLife.IsNullable = true;
                colvarMeterLife.IsPrimaryKey = false;
                colvarMeterLife.IsForeignKey = false;
                colvarMeterLife.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterLife);
                
                TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
                colvarCreatedOn.ColumnName = "CreatedOn";
                colvarCreatedOn.DataType = DbType.DateTime;
                colvarCreatedOn.MaxLength = 0;
                colvarCreatedOn.AutoIncrement = false;
                colvarCreatedOn.IsNullable = true;
                colvarCreatedOn.IsPrimaryKey = false;
                colvarCreatedOn.IsForeignKey = false;
                colvarCreatedOn.IsReadOnly = false;
                
                schema.Columns.Add(colvarCreatedOn);
                
                TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
                colvarModifiedOn.ColumnName = "ModifiedOn";
                colvarModifiedOn.DataType = DbType.DateTime;
                colvarModifiedOn.MaxLength = 0;
                colvarModifiedOn.AutoIncrement = false;
                colvarModifiedOn.IsNullable = true;
                colvarModifiedOn.IsPrimaryKey = false;
                colvarModifiedOn.IsForeignKey = false;
                colvarModifiedOn.IsReadOnly = false;
                
                schema.Columns.Add(colvarModifiedOn);
                
                TableSchema.TableColumn colvarMeterReadingUserID = new TableSchema.TableColumn(schema);
                colvarMeterReadingUserID.ColumnName = "MeterReadingUserID";
                colvarMeterReadingUserID.DataType = DbType.Int32;
                colvarMeterReadingUserID.MaxLength = 0;
                colvarMeterReadingUserID.AutoIncrement = false;
                colvarMeterReadingUserID.IsNullable = false;
                colvarMeterReadingUserID.IsPrimaryKey = false;
                colvarMeterReadingUserID.IsForeignKey = false;
                colvarMeterReadingUserID.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterReadingUserID);
                
                TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
                colvarUserName.ColumnName = "UserName";
                colvarUserName.DataType = DbType.AnsiString;
                colvarUserName.MaxLength = 50;
                colvarUserName.AutoIncrement = false;
                colvarUserName.IsNullable = true;
                colvarUserName.IsPrimaryKey = false;
                colvarUserName.IsForeignKey = false;
                colvarUserName.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserName);
                
                TableSchema.TableColumn colvarEmployeeName = new TableSchema.TableColumn(schema);
                colvarEmployeeName.ColumnName = "EmployeeName";
                colvarEmployeeName.DataType = DbType.AnsiString;
                colvarEmployeeName.MaxLength = 50;
                colvarEmployeeName.AutoIncrement = false;
                colvarEmployeeName.IsNullable = true;
                colvarEmployeeName.IsPrimaryKey = false;
                colvarEmployeeName.IsForeignKey = false;
                colvarEmployeeName.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmployeeName);
                
                TableSchema.TableColumn colvarOther = new TableSchema.TableColumn(schema);
                colvarOther.ColumnName = "Other";
                colvarOther.DataType = DbType.AnsiString;
                colvarOther.MaxLength = -1;
                colvarOther.AutoIncrement = false;
                colvarOther.IsNullable = true;
                colvarOther.IsPrimaryKey = false;
                colvarOther.IsForeignKey = false;
                colvarOther.IsReadOnly = false;
                
                schema.Columns.Add(colvarOther);
                
                TableSchema.TableColumn colvarFedbackStatusID = new TableSchema.TableColumn(schema);
                colvarFedbackStatusID.ColumnName = "FedbackStatusID";
                colvarFedbackStatusID.DataType = DbType.Int32;
                colvarFedbackStatusID.MaxLength = 0;
                colvarFedbackStatusID.AutoIncrement = false;
                colvarFedbackStatusID.IsNullable = false;
                colvarFedbackStatusID.IsPrimaryKey = false;
                colvarFedbackStatusID.IsForeignKey = false;
                colvarFedbackStatusID.IsReadOnly = false;
                
                schema.Columns.Add(colvarFedbackStatusID);
                
                TableSchema.TableColumn colvarStatusName = new TableSchema.TableColumn(schema);
                colvarStatusName.ColumnName = "StatusName";
                colvarStatusName.DataType = DbType.AnsiString;
                colvarStatusName.MaxLength = 50;
                colvarStatusName.AutoIncrement = false;
                colvarStatusName.IsNullable = true;
                colvarStatusName.IsPrimaryKey = false;
                colvarStatusName.IsForeignKey = false;
                colvarStatusName.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusName);
                
                TableSchema.TableColumn colvarHashCode = new TableSchema.TableColumn(schema);
                colvarHashCode.ColumnName = "HashCode";
                colvarHashCode.DataType = DbType.AnsiString;
                colvarHashCode.MaxLength = 50;
                colvarHashCode.AutoIncrement = false;
                colvarHashCode.IsNullable = true;
                colvarHashCode.IsPrimaryKey = false;
                colvarHashCode.IsForeignKey = false;
                colvarHashCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarHashCode);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwTblMeterFeedBack",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwTblMeterFeedBack()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwTblMeterFeedBack(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwTblMeterFeedBack(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwTblMeterFeedBack(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("MeterFeedbackID")]
        [Bindable(true)]
        public int MeterFeedbackID 
	    {
		    get
		    {
			    return GetColumnValue<int>("MeterFeedbackID");
		    }
            set 
		    {
			    SetColumnValue("MeterFeedbackID", value);
            }
        }
	      
        [XmlAttribute("MeterID")]
        [Bindable(true)]
        public int MeterID 
	    {
		    get
		    {
			    return GetColumnValue<int>("MeterID");
		    }
            set 
		    {
			    SetColumnValue("MeterID", value);
            }
        }
	      
        [XmlAttribute("MeterNo")]
        [Bindable(true)]
        public string MeterNo 
	    {
		    get
		    {
			    return GetColumnValue<string>("MeterNo");
		    }
            set 
		    {
			    SetColumnValue("MeterNo", value);
            }
        }
	      
        [XmlAttribute("AccountNo")]
        [Bindable(true)]
        public string AccountNo 
	    {
		    get
		    {
			    return GetColumnValue<string>("AccountNo");
		    }
            set 
		    {
			    SetColumnValue("AccountNo", value);
            }
        }
	      
        [XmlAttribute("MeterIssueDate")]
        [Bindable(true)]
        public DateTime? MeterIssueDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("MeterIssueDate");
		    }
            set 
		    {
			    SetColumnValue("MeterIssueDate", value);
            }
        }
	      
        [XmlAttribute("MeterLife")]
        [Bindable(true)]
        public int? MeterLife 
	    {
		    get
		    {
			    return GetColumnValue<int?>("MeterLife");
		    }
            set 
		    {
			    SetColumnValue("MeterLife", value);
            }
        }
	      
        [XmlAttribute("CreatedOn")]
        [Bindable(true)]
        public DateTime? CreatedOn 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("CreatedOn");
		    }
            set 
		    {
			    SetColumnValue("CreatedOn", value);
            }
        }
	      
        [XmlAttribute("ModifiedOn")]
        [Bindable(true)]
        public DateTime? ModifiedOn 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("ModifiedOn");
		    }
            set 
		    {
			    SetColumnValue("ModifiedOn", value);
            }
        }
	      
        [XmlAttribute("MeterReadingUserID")]
        [Bindable(true)]
        public int MeterReadingUserID 
	    {
		    get
		    {
			    return GetColumnValue<int>("MeterReadingUserID");
		    }
            set 
		    {
			    SetColumnValue("MeterReadingUserID", value);
            }
        }
	      
        [XmlAttribute("UserName")]
        [Bindable(true)]
        public string UserName 
	    {
		    get
		    {
			    return GetColumnValue<string>("UserName");
		    }
            set 
		    {
			    SetColumnValue("UserName", value);
            }
        }
	      
        [XmlAttribute("EmployeeName")]
        [Bindable(true)]
        public string EmployeeName 
	    {
		    get
		    {
			    return GetColumnValue<string>("EmployeeName");
		    }
            set 
		    {
			    SetColumnValue("EmployeeName", value);
            }
        }
	      
        [XmlAttribute("Other")]
        [Bindable(true)]
        public string Other 
	    {
		    get
		    {
			    return GetColumnValue<string>("Other");
		    }
            set 
		    {
			    SetColumnValue("Other", value);
            }
        }
	      
        [XmlAttribute("FedbackStatusID")]
        [Bindable(true)]
        public int FedbackStatusID 
	    {
		    get
		    {
			    return GetColumnValue<int>("FedbackStatusID");
		    }
            set 
		    {
			    SetColumnValue("FedbackStatusID", value);
            }
        }
	      
        [XmlAttribute("StatusName")]
        [Bindable(true)]
        public string StatusName 
	    {
		    get
		    {
			    return GetColumnValue<string>("StatusName");
		    }
            set 
		    {
			    SetColumnValue("StatusName", value);
            }
        }
	      
        [XmlAttribute("HashCode")]
        [Bindable(true)]
        public string HashCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("HashCode");
		    }
            set 
		    {
			    SetColumnValue("HashCode", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string MeterFeedbackID = @"MeterFeedbackID";
            
            public static string MeterID = @"MeterID";
            
            public static string MeterNo = @"MeterNo";
            
            public static string AccountNo = @"AccountNo";
            
            public static string MeterIssueDate = @"MeterIssueDate";
            
            public static string MeterLife = @"MeterLife";
            
            public static string CreatedOn = @"CreatedOn";
            
            public static string ModifiedOn = @"ModifiedOn";
            
            public static string MeterReadingUserID = @"MeterReadingUserID";
            
            public static string UserName = @"UserName";
            
            public static string EmployeeName = @"EmployeeName";
            
            public static string Other = @"Other";
            
            public static string FedbackStatusID = @"FedbackStatusID";
            
            public static string StatusName = @"StatusName";
            
            public static string HashCode = @"HashCode";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
