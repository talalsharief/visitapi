using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwTblTariffSlab class.
    /// </summary>
    [Serializable]
    public partial class VwTblTariffSlabCollection : ReadOnlyList<VwTblTariffSlab, VwTblTariffSlabCollection>
    {        
        public VwTblTariffSlabCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwTblTariffSlab view.
    /// </summary>
    [Serializable]
    public partial class VwTblTariffSlab : ReadOnlyRecord<VwTblTariffSlab>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwTblTariffSlab", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarTariffSlabID = new TableSchema.TableColumn(schema);
                colvarTariffSlabID.ColumnName = "TariffSlabID";
                colvarTariffSlabID.DataType = DbType.Int32;
                colvarTariffSlabID.MaxLength = 0;
                colvarTariffSlabID.AutoIncrement = false;
                colvarTariffSlabID.IsNullable = false;
                colvarTariffSlabID.IsPrimaryKey = false;
                colvarTariffSlabID.IsForeignKey = false;
                colvarTariffSlabID.IsReadOnly = false;
                
                schema.Columns.Add(colvarTariffSlabID);
                
                TableSchema.TableColumn colvarUnitsFrom = new TableSchema.TableColumn(schema);
                colvarUnitsFrom.ColumnName = "UnitsFrom";
                colvarUnitsFrom.DataType = DbType.Int32;
                colvarUnitsFrom.MaxLength = 0;
                colvarUnitsFrom.AutoIncrement = false;
                colvarUnitsFrom.IsNullable = true;
                colvarUnitsFrom.IsPrimaryKey = false;
                colvarUnitsFrom.IsForeignKey = false;
                colvarUnitsFrom.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitsFrom);
                
                TableSchema.TableColumn colvarUnitsTo = new TableSchema.TableColumn(schema);
                colvarUnitsTo.ColumnName = "UnitsTo";
                colvarUnitsTo.DataType = DbType.Int32;
                colvarUnitsTo.MaxLength = 0;
                colvarUnitsTo.AutoIncrement = false;
                colvarUnitsTo.IsNullable = true;
                colvarUnitsTo.IsPrimaryKey = false;
                colvarUnitsTo.IsForeignKey = false;
                colvarUnitsTo.IsReadOnly = false;
                
                schema.Columns.Add(colvarUnitsTo);
                
                TableSchema.TableColumn colvarRate = new TableSchema.TableColumn(schema);
                colvarRate.ColumnName = "Rate";
                colvarRate.DataType = DbType.Decimal;
                colvarRate.MaxLength = 0;
                colvarRate.AutoIncrement = false;
                colvarRate.IsNullable = true;
                colvarRate.IsPrimaryKey = false;
                colvarRate.IsForeignKey = false;
                colvarRate.IsReadOnly = false;
                
                schema.Columns.Add(colvarRate);
                
                TableSchema.TableColumn colvarTariffID = new TableSchema.TableColumn(schema);
                colvarTariffID.ColumnName = "TariffID";
                colvarTariffID.DataType = DbType.Int32;
                colvarTariffID.MaxLength = 0;
                colvarTariffID.AutoIncrement = false;
                colvarTariffID.IsNullable = true;
                colvarTariffID.IsPrimaryKey = false;
                colvarTariffID.IsForeignKey = false;
                colvarTariffID.IsReadOnly = false;
                
                schema.Columns.Add(colvarTariffID);
                
                TableSchema.TableColumn colvarTariffName = new TableSchema.TableColumn(schema);
                colvarTariffName.ColumnName = "TariffName";
                colvarTariffName.DataType = DbType.AnsiString;
                colvarTariffName.MaxLength = 50;
                colvarTariffName.AutoIncrement = false;
                colvarTariffName.IsNullable = true;
                colvarTariffName.IsPrimaryKey = false;
                colvarTariffName.IsForeignKey = false;
                colvarTariffName.IsReadOnly = false;
                
                schema.Columns.Add(colvarTariffName);
                
                TableSchema.TableColumn colvarTariffCode = new TableSchema.TableColumn(schema);
                colvarTariffCode.ColumnName = "TariffCode";
                colvarTariffCode.DataType = DbType.AnsiString;
                colvarTariffCode.MaxLength = 50;
                colvarTariffCode.AutoIncrement = false;
                colvarTariffCode.IsNullable = true;
                colvarTariffCode.IsPrimaryKey = false;
                colvarTariffCode.IsForeignKey = false;
                colvarTariffCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarTariffCode);
                
                TableSchema.TableColumn colvarMeterTypeID = new TableSchema.TableColumn(schema);
                colvarMeterTypeID.ColumnName = "MeterTypeID";
                colvarMeterTypeID.DataType = DbType.Int32;
                colvarMeterTypeID.MaxLength = 0;
                colvarMeterTypeID.AutoIncrement = false;
                colvarMeterTypeID.IsNullable = true;
                colvarMeterTypeID.IsPrimaryKey = false;
                colvarMeterTypeID.IsForeignKey = false;
                colvarMeterTypeID.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterTypeID);
                
                TableSchema.TableColumn colvarMeterTypeName = new TableSchema.TableColumn(schema);
                colvarMeterTypeName.ColumnName = "MeterTypeName";
                colvarMeterTypeName.DataType = DbType.AnsiString;
                colvarMeterTypeName.MaxLength = 50;
                colvarMeterTypeName.AutoIncrement = false;
                colvarMeterTypeName.IsNullable = true;
                colvarMeterTypeName.IsPrimaryKey = false;
                colvarMeterTypeName.IsForeignKey = false;
                colvarMeterTypeName.IsReadOnly = false;
                
                schema.Columns.Add(colvarMeterTypeName);
                
                TableSchema.TableColumn colvarAllowIssue = new TableSchema.TableColumn(schema);
                colvarAllowIssue.ColumnName = "AllowIssue";
                colvarAllowIssue.DataType = DbType.Boolean;
                colvarAllowIssue.MaxLength = 0;
                colvarAllowIssue.AutoIncrement = false;
                colvarAllowIssue.IsNullable = true;
                colvarAllowIssue.IsPrimaryKey = false;
                colvarAllowIssue.IsForeignKey = false;
                colvarAllowIssue.IsReadOnly = false;
                
                schema.Columns.Add(colvarAllowIssue);
                
                TableSchema.TableColumn colvarInsertedBy = new TableSchema.TableColumn(schema);
                colvarInsertedBy.ColumnName = "InsertedBy";
                colvarInsertedBy.DataType = DbType.Int32;
                colvarInsertedBy.MaxLength = 0;
                colvarInsertedBy.AutoIncrement = false;
                colvarInsertedBy.IsNullable = true;
                colvarInsertedBy.IsPrimaryKey = false;
                colvarInsertedBy.IsForeignKey = false;
                colvarInsertedBy.IsReadOnly = false;
                
                schema.Columns.Add(colvarInsertedBy);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwTblTariffSlab",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwTblTariffSlab()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwTblTariffSlab(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwTblTariffSlab(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwTblTariffSlab(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("TariffSlabID")]
        [Bindable(true)]
        public int TariffSlabID 
	    {
		    get
		    {
			    return GetColumnValue<int>("TariffSlabID");
		    }
            set 
		    {
			    SetColumnValue("TariffSlabID", value);
            }
        }
	      
        [XmlAttribute("UnitsFrom")]
        [Bindable(true)]
        public int? UnitsFrom 
	    {
		    get
		    {
			    return GetColumnValue<int?>("UnitsFrom");
		    }
            set 
		    {
			    SetColumnValue("UnitsFrom", value);
            }
        }
	      
        [XmlAttribute("UnitsTo")]
        [Bindable(true)]
        public int? UnitsTo 
	    {
		    get
		    {
			    return GetColumnValue<int?>("UnitsTo");
		    }
            set 
		    {
			    SetColumnValue("UnitsTo", value);
            }
        }
	      
        [XmlAttribute("Rate")]
        [Bindable(true)]
        public decimal? Rate 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("Rate");
		    }
            set 
		    {
			    SetColumnValue("Rate", value);
            }
        }
	      
        [XmlAttribute("TariffID")]
        [Bindable(true)]
        public int? TariffID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("TariffID");
		    }
            set 
		    {
			    SetColumnValue("TariffID", value);
            }
        }
	      
        [XmlAttribute("TariffName")]
        [Bindable(true)]
        public string TariffName 
	    {
		    get
		    {
			    return GetColumnValue<string>("TariffName");
		    }
            set 
		    {
			    SetColumnValue("TariffName", value);
            }
        }
	      
        [XmlAttribute("TariffCode")]
        [Bindable(true)]
        public string TariffCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("TariffCode");
		    }
            set 
		    {
			    SetColumnValue("TariffCode", value);
            }
        }
	      
        [XmlAttribute("MeterTypeID")]
        [Bindable(true)]
        public int? MeterTypeID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("MeterTypeID");
		    }
            set 
		    {
			    SetColumnValue("MeterTypeID", value);
            }
        }
	      
        [XmlAttribute("MeterTypeName")]
        [Bindable(true)]
        public string MeterTypeName 
	    {
		    get
		    {
			    return GetColumnValue<string>("MeterTypeName");
		    }
            set 
		    {
			    SetColumnValue("MeterTypeName", value);
            }
        }
	      
        [XmlAttribute("AllowIssue")]
        [Bindable(true)]
        public bool? AllowIssue 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("AllowIssue");
		    }
            set 
		    {
			    SetColumnValue("AllowIssue", value);
            }
        }
	      
        [XmlAttribute("InsertedBy")]
        [Bindable(true)]
        public int? InsertedBy 
	    {
		    get
		    {
			    return GetColumnValue<int?>("InsertedBy");
		    }
            set 
		    {
			    SetColumnValue("InsertedBy", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string TariffSlabID = @"TariffSlabID";
            
            public static string UnitsFrom = @"UnitsFrom";
            
            public static string UnitsTo = @"UnitsTo";
            
            public static string Rate = @"Rate";
            
            public static string TariffID = @"TariffID";
            
            public static string TariffName = @"TariffName";
            
            public static string TariffCode = @"TariffCode";
            
            public static string MeterTypeID = @"MeterTypeID";
            
            public static string MeterTypeName = @"MeterTypeName";
            
            public static string AllowIssue = @"AllowIssue";
            
            public static string InsertedBy = @"InsertedBy";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
