using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
    /// <summary>
    /// Controller class for TblTariffSlabs
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblTariffSlabController
    {
        // Preload our schema..
        TblTariffSlab thisSchemaLoad = new TblTariffSlab();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblTariffSlabCollection FetchAll()
        {
            TblTariffSlabCollection coll = new TblTariffSlabCollection();
            Query qry = new Query(TblTariffSlab.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblTariffSlabCollection FetchByID(object TariffSlabID)
        {
            TblTariffSlabCollection coll = new TblTariffSlabCollection().Where("TariffSlabID", TariffSlabID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblTariffSlabCollection FetchByQuery(Query qry)
        {
            TblTariffSlabCollection coll = new TblTariffSlabCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object TariffSlabID)
        {
            return (TblTariffSlab.Delete(TariffSlabID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object TariffSlabID)
        {
            return (TblTariffSlab.Destroy(TariffSlabID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? TariffID,int? UnitsFrom,int? UnitsTo,decimal? Rate,DateTime? CreatedOn,DateTime? ModifiedOn,int? MeterTypeID,int? InsertedBy,decimal? FixedAmount)
	    {
		    TblTariffSlab item = new TblTariffSlab();
		    
            item.TariffID = TariffID;
            
            item.UnitsFrom = UnitsFrom;
            
            item.UnitsTo = UnitsTo;
            
            item.Rate = Rate;
            
            item.CreatedOn = CreatedOn;
            
            item.ModifiedOn = ModifiedOn;
            
            item.MeterTypeID = MeterTypeID;
            
            item.InsertedBy = InsertedBy;
            
            item.FixedAmount = FixedAmount;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int TariffSlabID,int? TariffID,int? UnitsFrom,int? UnitsTo,decimal? Rate,DateTime? CreatedOn,DateTime? ModifiedOn,int? MeterTypeID,int? InsertedBy,decimal? FixedAmount)
	    {
		    TblTariffSlab item = new TblTariffSlab();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.TariffSlabID = TariffSlabID;
				
			item.TariffID = TariffID;
				
			item.UnitsFrom = UnitsFrom;
				
			item.UnitsTo = UnitsTo;
				
			item.Rate = Rate;
				
			item.CreatedOn = CreatedOn;
				
			item.ModifiedOn = ModifiedOn;
				
			item.MeterTypeID = MeterTypeID;
				
			item.InsertedBy = InsertedBy;
				
			item.FixedAmount = FixedAmount;
				
	        item.Save(UserName);
	    }
    }
}
