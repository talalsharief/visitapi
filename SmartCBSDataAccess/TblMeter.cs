using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblMeter class.
	/// </summary>
    [Serializable]
	public partial class TblMeterCollection : ActiveList<TblMeter, TblMeterCollection>
	{	   
		public TblMeterCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblMeterCollection</returns>
		public TblMeterCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblMeter o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblMeter table.
	/// </summary>
	[Serializable]
	public partial class TblMeter : ActiveRecord<TblMeter>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblMeter()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblMeter(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblMeter(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblMeter(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblMeter", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = true;
				colvarMeterID.IsNullable = false;
				colvarMeterID.IsPrimaryKey = true;
				colvarMeterID.IsForeignKey = false;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				colvarMeterID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarMeterNo = new TableSchema.TableColumn(schema);
				colvarMeterNo.ColumnName = "MeterNo";
				colvarMeterNo.DataType = DbType.AnsiString;
				colvarMeterNo.MaxLength = -1;
				colvarMeterNo.AutoIncrement = false;
				colvarMeterNo.IsNullable = true;
				colvarMeterNo.IsPrimaryKey = false;
				colvarMeterNo.IsForeignKey = false;
				colvarMeterNo.IsReadOnly = false;
				colvarMeterNo.DefaultSetting = @"";
				colvarMeterNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterNo);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = true;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				
					colvarConsumerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarFeaderID = new TableSchema.TableColumn(schema);
				colvarFeaderID.ColumnName = "FeaderID";
				colvarFeaderID.DataType = DbType.Int32;
				colvarFeaderID.MaxLength = 0;
				colvarFeaderID.AutoIncrement = false;
				colvarFeaderID.IsNullable = true;
				colvarFeaderID.IsPrimaryKey = false;
				colvarFeaderID.IsForeignKey = true;
				colvarFeaderID.IsReadOnly = false;
				colvarFeaderID.DefaultSetting = @"";
				
					colvarFeaderID.ForeignKeyTableName = "TblFeeder";
				schema.Columns.Add(colvarFeaderID);
				
				TableSchema.TableColumn colvarAccountNo = new TableSchema.TableColumn(schema);
				colvarAccountNo.ColumnName = "AccountNo";
				colvarAccountNo.DataType = DbType.AnsiString;
				colvarAccountNo.MaxLength = -1;
				colvarAccountNo.AutoIncrement = false;
				colvarAccountNo.IsNullable = true;
				colvarAccountNo.IsPrimaryKey = false;
				colvarAccountNo.IsForeignKey = false;
				colvarAccountNo.IsReadOnly = false;
				colvarAccountNo.DefaultSetting = @"";
				colvarAccountNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountNo);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarMeterIssueDate = new TableSchema.TableColumn(schema);
				colvarMeterIssueDate.ColumnName = "MeterIssueDate";
				colvarMeterIssueDate.DataType = DbType.DateTime;
				colvarMeterIssueDate.MaxLength = 0;
				colvarMeterIssueDate.AutoIncrement = false;
				colvarMeterIssueDate.IsNullable = true;
				colvarMeterIssueDate.IsPrimaryKey = false;
				colvarMeterIssueDate.IsForeignKey = false;
				colvarMeterIssueDate.IsReadOnly = false;
				colvarMeterIssueDate.DefaultSetting = @"";
				colvarMeterIssueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterIssueDate);
				
				TableSchema.TableColumn colvarMeterTypeID = new TableSchema.TableColumn(schema);
				colvarMeterTypeID.ColumnName = "MeterTypeID";
				colvarMeterTypeID.DataType = DbType.Int32;
				colvarMeterTypeID.MaxLength = 0;
				colvarMeterTypeID.AutoIncrement = false;
				colvarMeterTypeID.IsNullable = true;
				colvarMeterTypeID.IsPrimaryKey = false;
				colvarMeterTypeID.IsForeignKey = true;
				colvarMeterTypeID.IsReadOnly = false;
				colvarMeterTypeID.DefaultSetting = @"";
				
					colvarMeterTypeID.ForeignKeyTableName = "TblMeterType";
				schema.Columns.Add(colvarMeterTypeID);
				
				TableSchema.TableColumn colvarMeterLife = new TableSchema.TableColumn(schema);
				colvarMeterLife.ColumnName = "MeterLife";
				colvarMeterLife.DataType = DbType.Int32;
				colvarMeterLife.MaxLength = 0;
				colvarMeterLife.AutoIncrement = false;
				colvarMeterLife.IsNullable = true;
				colvarMeterLife.IsPrimaryKey = false;
				colvarMeterLife.IsForeignKey = false;
				colvarMeterLife.IsReadOnly = false;
				colvarMeterLife.DefaultSetting = @"";
				colvarMeterLife.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterLife);
				
				TableSchema.TableColumn colvarMeterStatusID = new TableSchema.TableColumn(schema);
				colvarMeterStatusID.ColumnName = "MeterStatusID";
				colvarMeterStatusID.DataType = DbType.Int32;
				colvarMeterStatusID.MaxLength = 0;
				colvarMeterStatusID.AutoIncrement = false;
				colvarMeterStatusID.IsNullable = true;
				colvarMeterStatusID.IsPrimaryKey = false;
				colvarMeterStatusID.IsForeignKey = true;
				colvarMeterStatusID.IsReadOnly = false;
				colvarMeterStatusID.DefaultSetting = @"";
				
					colvarMeterStatusID.ForeignKeyTableName = "TblMeterStatus";
				schema.Columns.Add(colvarMeterStatusID);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarMeterCreatedBy = new TableSchema.TableColumn(schema);
				colvarMeterCreatedBy.ColumnName = "MeterCreatedBy";
				colvarMeterCreatedBy.DataType = DbType.Int32;
				colvarMeterCreatedBy.MaxLength = 0;
				colvarMeterCreatedBy.AutoIncrement = false;
				colvarMeterCreatedBy.IsNullable = true;
				colvarMeterCreatedBy.IsPrimaryKey = false;
				colvarMeterCreatedBy.IsForeignKey = true;
				colvarMeterCreatedBy.IsReadOnly = false;
				colvarMeterCreatedBy.DefaultSetting = @"";
				
					colvarMeterCreatedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarMeterCreatedBy);
				
				TableSchema.TableColumn colvarMeterInvDetID = new TableSchema.TableColumn(schema);
				colvarMeterInvDetID.ColumnName = "MeterInvDetID";
				colvarMeterInvDetID.DataType = DbType.Int32;
				colvarMeterInvDetID.MaxLength = 0;
				colvarMeterInvDetID.AutoIncrement = false;
				colvarMeterInvDetID.IsNullable = true;
				colvarMeterInvDetID.IsPrimaryKey = false;
				colvarMeterInvDetID.IsForeignKey = true;
				colvarMeterInvDetID.IsReadOnly = false;
				colvarMeterInvDetID.DefaultSetting = @"";
				
					colvarMeterInvDetID.ForeignKeyTableName = "TblMeterInventoryDetail";
				schema.Columns.Add(colvarMeterInvDetID);
				
				TableSchema.TableColumn colvarTarrifID = new TableSchema.TableColumn(schema);
				colvarTarrifID.ColumnName = "TarrifID";
				colvarTarrifID.DataType = DbType.Int32;
				colvarTarrifID.MaxLength = 0;
				colvarTarrifID.AutoIncrement = false;
				colvarTarrifID.IsNullable = true;
				colvarTarrifID.IsPrimaryKey = false;
				colvarTarrifID.IsForeignKey = true;
				colvarTarrifID.IsReadOnly = false;
				colvarTarrifID.DefaultSetting = @"";
				
					colvarTarrifID.ForeignKeyTableName = "TblTariff";
				schema.Columns.Add(colvarTarrifID);
				
				TableSchema.TableColumn colvarPmtid = new TableSchema.TableColumn(schema);
				colvarPmtid.ColumnName = "PMTID";
				colvarPmtid.DataType = DbType.Int32;
				colvarPmtid.MaxLength = 0;
				colvarPmtid.AutoIncrement = false;
				colvarPmtid.IsNullable = true;
				colvarPmtid.IsPrimaryKey = false;
				colvarPmtid.IsForeignKey = true;
				colvarPmtid.IsReadOnly = false;
				colvarPmtid.DefaultSetting = @"";
				
					colvarPmtid.ForeignKeyTableName = "TblPMT";
				schema.Columns.Add(colvarPmtid);
				
				TableSchema.TableColumn colvarMeterDigit = new TableSchema.TableColumn(schema);
				colvarMeterDigit.ColumnName = "MeterDigit";
				colvarMeterDigit.DataType = DbType.Int32;
				colvarMeterDigit.MaxLength = 0;
				colvarMeterDigit.AutoIncrement = false;
				colvarMeterDigit.IsNullable = true;
				colvarMeterDigit.IsPrimaryKey = false;
				colvarMeterDigit.IsForeignKey = false;
				colvarMeterDigit.IsReadOnly = false;
				colvarMeterDigit.DefaultSetting = @"";
				colvarMeterDigit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeterDigit);
				
				TableSchema.TableColumn colvarSupplementaryMeterNo = new TableSchema.TableColumn(schema);
				colvarSupplementaryMeterNo.ColumnName = "SupplementaryMeterNo";
				colvarSupplementaryMeterNo.DataType = DbType.AnsiString;
				colvarSupplementaryMeterNo.MaxLength = 100;
				colvarSupplementaryMeterNo.AutoIncrement = false;
				colvarSupplementaryMeterNo.IsNullable = true;
				colvarSupplementaryMeterNo.IsPrimaryKey = false;
				colvarSupplementaryMeterNo.IsForeignKey = false;
				colvarSupplementaryMeterNo.IsReadOnly = false;
				colvarSupplementaryMeterNo.DefaultSetting = @"";
				colvarSupplementaryMeterNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupplementaryMeterNo);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.AnsiString;
				colvarAddress.MaxLength = -1;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = true;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				TableSchema.TableColumn colvarSerialNo = new TableSchema.TableColumn(schema);
				colvarSerialNo.ColumnName = "SerialNo";
				colvarSerialNo.DataType = DbType.Int32;
				colvarSerialNo.MaxLength = 0;
				colvarSerialNo.AutoIncrement = false;
				colvarSerialNo.IsNullable = true;
				colvarSerialNo.IsPrimaryKey = false;
				colvarSerialNo.IsForeignKey = false;
				colvarSerialNo.IsReadOnly = false;
				colvarSerialNo.DefaultSetting = @"";
				colvarSerialNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSerialNo);
				
				TableSchema.TableColumn colvarMf = new TableSchema.TableColumn(schema);
				colvarMf.ColumnName = "MF";
				colvarMf.DataType = DbType.Int32;
				colvarMf.MaxLength = 0;
				colvarMf.AutoIncrement = false;
				colvarMf.IsNullable = true;
				colvarMf.IsPrimaryKey = false;
				colvarMf.IsForeignKey = false;
				colvarMf.IsReadOnly = false;
				colvarMf.DefaultSetting = @"";
				colvarMf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMf);
				
				TableSchema.TableColumn colvarConnectionTypeID = new TableSchema.TableColumn(schema);
				colvarConnectionTypeID.ColumnName = "ConnectionTypeID";
				colvarConnectionTypeID.DataType = DbType.Int32;
				colvarConnectionTypeID.MaxLength = 0;
				colvarConnectionTypeID.AutoIncrement = false;
				colvarConnectionTypeID.IsNullable = true;
				colvarConnectionTypeID.IsPrimaryKey = false;
				colvarConnectionTypeID.IsForeignKey = true;
				colvarConnectionTypeID.IsReadOnly = false;
				colvarConnectionTypeID.DefaultSetting = @"";
				
					colvarConnectionTypeID.ForeignKeyTableName = "TblTypeOfConnection";
				schema.Columns.Add(colvarConnectionTypeID);
				
				TableSchema.TableColumn colvarCategoryID = new TableSchema.TableColumn(schema);
				colvarCategoryID.ColumnName = "CategoryID";
				colvarCategoryID.DataType = DbType.Int32;
				colvarCategoryID.MaxLength = 0;
				colvarCategoryID.AutoIncrement = false;
				colvarCategoryID.IsNullable = true;
				colvarCategoryID.IsPrimaryKey = false;
				colvarCategoryID.IsForeignKey = true;
				colvarCategoryID.IsReadOnly = false;
				colvarCategoryID.DefaultSetting = @"";
				
					colvarCategoryID.ForeignKeyTableName = "tblCategory";
				schema.Columns.Add(colvarCategoryID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblMeter",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int MeterID 
		{
			get { return GetColumnValue<int>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("MeterNo")]
		[Bindable(true)]
		public string MeterNo 
		{
			get { return GetColumnValue<string>(Columns.MeterNo); }
			set { SetColumnValue(Columns.MeterNo, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("FeaderID")]
		[Bindable(true)]
		public int? FeaderID 
		{
			get { return GetColumnValue<int?>(Columns.FeaderID); }
			set { SetColumnValue(Columns.FeaderID, value); }
		}
		  
		[XmlAttribute("AccountNo")]
		[Bindable(true)]
		public string AccountNo 
		{
			get { return GetColumnValue<string>(Columns.AccountNo); }
			set { SetColumnValue(Columns.AccountNo, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("MeterIssueDate")]
		[Bindable(true)]
		public DateTime? MeterIssueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.MeterIssueDate); }
			set { SetColumnValue(Columns.MeterIssueDate, value); }
		}
		  
		[XmlAttribute("MeterTypeID")]
		[Bindable(true)]
		public int? MeterTypeID 
		{
			get { return GetColumnValue<int?>(Columns.MeterTypeID); }
			set { SetColumnValue(Columns.MeterTypeID, value); }
		}
		  
		[XmlAttribute("MeterLife")]
		[Bindable(true)]
		public int? MeterLife 
		{
			get { return GetColumnValue<int?>(Columns.MeterLife); }
			set { SetColumnValue(Columns.MeterLife, value); }
		}
		  
		[XmlAttribute("MeterStatusID")]
		[Bindable(true)]
		public int? MeterStatusID 
		{
			get { return GetColumnValue<int?>(Columns.MeterStatusID); }
			set { SetColumnValue(Columns.MeterStatusID, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("MeterCreatedBy")]
		[Bindable(true)]
		public int? MeterCreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.MeterCreatedBy); }
			set { SetColumnValue(Columns.MeterCreatedBy, value); }
		}
		  
		[XmlAttribute("MeterInvDetID")]
		[Bindable(true)]
		public int? MeterInvDetID 
		{
			get { return GetColumnValue<int?>(Columns.MeterInvDetID); }
			set { SetColumnValue(Columns.MeterInvDetID, value); }
		}
		  
		[XmlAttribute("TarrifID")]
		[Bindable(true)]
		public int? TarrifID 
		{
			get { return GetColumnValue<int?>(Columns.TarrifID); }
			set { SetColumnValue(Columns.TarrifID, value); }
		}
		  
		[XmlAttribute("Pmtid")]
		[Bindable(true)]
		public int? Pmtid 
		{
			get { return GetColumnValue<int?>(Columns.Pmtid); }
			set { SetColumnValue(Columns.Pmtid, value); }
		}
		  
		[XmlAttribute("MeterDigit")]
		[Bindable(true)]
		public int? MeterDigit 
		{
			get { return GetColumnValue<int?>(Columns.MeterDigit); }
			set { SetColumnValue(Columns.MeterDigit, value); }
		}
		  
		[XmlAttribute("SupplementaryMeterNo")]
		[Bindable(true)]
		public string SupplementaryMeterNo 
		{
			get { return GetColumnValue<string>(Columns.SupplementaryMeterNo); }
			set { SetColumnValue(Columns.SupplementaryMeterNo, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		  
		[XmlAttribute("SerialNo")]
		[Bindable(true)]
		public int? SerialNo 
		{
			get { return GetColumnValue<int?>(Columns.SerialNo); }
			set { SetColumnValue(Columns.SerialNo, value); }
		}
		  
		[XmlAttribute("Mf")]
		[Bindable(true)]
		public int? Mf 
		{
			get { return GetColumnValue<int?>(Columns.Mf); }
			set { SetColumnValue(Columns.Mf, value); }
		}
		  
		[XmlAttribute("ConnectionTypeID")]
		[Bindable(true)]
		public int? ConnectionTypeID 
		{
			get { return GetColumnValue<int?>(Columns.ConnectionTypeID); }
			set { SetColumnValue(Columns.ConnectionTypeID, value); }
		}
		  
		[XmlAttribute("CategoryID")]
		[Bindable(true)]
		public int? CategoryID 
		{
			get { return GetColumnValue<int?>(Columns.CategoryID); }
			set { SetColumnValue(Columns.CategoryID, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.SMSLogCollection SMSLogRecords()
		{
			return new SmartCBSDataAccess.SMSLogCollection().Where(SMSLog.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblAdvanceCollection TblAdvanceRecords()
		{
			return new SmartCBSDataAccess.TblAdvanceCollection().Where(TblAdvance.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblArrearCollection TblArrearRecords()
		{
			return new SmartCBSDataAccess.TblArrearCollection().Where(TblArrear.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblBatchMeterCollection TblBatchMeterRecords()
		{
			return new SmartCBSDataAccess.TblBatchMeterCollection().Where(TblBatchMeter.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblBillCollection TblBillRecords()
		{
			return new SmartCBSDataAccess.TblBillCollection().Where(TblBill.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblConsumerLedgerLogCollection TblConsumerLedgerLogRecords()
		{
			return new SmartCBSDataAccess.TblConsumerLedgerLogCollection().Where(TblConsumerLedgerLog.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblConsumerUpdateOnMeterCollection TblConsumerUpdateOnMeterRecords()
		{
			return new SmartCBSDataAccess.TblConsumerUpdateOnMeterCollection().Where(TblConsumerUpdateOnMeter.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblConsumerLedgerCollection TblConsumerLedgerRecords()
		{
			return new SmartCBSDataAccess.TblConsumerLedgerCollection().Where(TblConsumerLedger.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblDetectionBillCollection TblDetectionBillRecords()
		{
			return new SmartCBSDataAccess.TblDetectionBillCollection().Where(TblDetectionBill.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblInstallementCollection TblInstallementRecords()
		{
			return new SmartCBSDataAccess.TblInstallementCollection().Where(TblInstallement.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblInventoryLogCollection TblInventoryLogRecords()
		{
			return new SmartCBSDataAccess.TblInventoryLogCollection().Where(TblInventoryLog.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblLedgerCollection TblLedgerRecords()
		{
			return new SmartCBSDataAccess.TblLedgerCollection().Where(TblLedger.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblMeterDefectedDetailCollection TblMeterDefectedDetailRecords()
		{
			return new SmartCBSDataAccess.TblMeterDefectedDetailCollection().Where(TblMeterDefectedDetail.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblMeterDisConnectionCollection TblMeterDisConnectionRecords()
		{
			return new SmartCBSDataAccess.TblMeterDisConnectionCollection().Where(TblMeterDisConnection.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblMeterFeedBackCollection TblMeterFeedBackRecords()
		{
			return new SmartCBSDataAccess.TblMeterFeedBackCollection().Where(TblMeterFeedBack.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblMeterIssueCollection TblMeterIssueRecords()
		{
			return new SmartCBSDataAccess.TblMeterIssueCollection().Where(TblMeterIssue.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblMeterNoUpdateLogCollection TblMeterNoUpdateLogRecords()
		{
			return new SmartCBSDataAccess.TblMeterNoUpdateLogCollection().Where(TblMeterNoUpdateLog.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblMeterReadingCollection TblMeterReadingRecords()
		{
			return new SmartCBSDataAccess.TblMeterReadingCollection().Where(TblMeterReading.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblMeterReadingListCollection TblMeterReadingListRecords()
		{
			return new SmartCBSDataAccess.TblMeterReadingListCollection().Where(TblMeterReadingList.Columns.MeterId, MeterID).Load();
		}
		public SmartCBSDataAccess.TblMeterReplacementCollection TblMeterReplacementRecords()
		{
			return new SmartCBSDataAccess.TblMeterReplacementCollection().Where(TblMeterReplacement.Columns.MeterID, MeterID).Load();
		}
		public SmartCBSDataAccess.TblMeterReplacementCollection TblMeterReplacementRecordsFromTblMeter()
		{
			return new SmartCBSDataAccess.TblMeterReplacementCollection().Where(TblMeterReplacement.Columns.PreviousMeterID, MeterID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblCategory ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblCategory TblCategory
		{
			get { return SmartCBSDataAccess.TblCategory.FetchByID(this.CategoryID); }
			set { SetColumnValue("CategoryID", value.CategoryID); }
		}
		
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.ConsumerID); }
			set { SetColumnValue("ConsumerID", value.CunsumerID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.MeterCreatedBy); }
			set { SetColumnValue("MeterCreatedBy", value.EmployeeID); }
		}
		
		
		/// <summary>
		/// Returns a TblFeeder ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblFeeder TblFeeder
		{
			get { return SmartCBSDataAccess.TblFeeder.FetchByID(this.FeaderID); }
			set { SetColumnValue("FeaderID", value.FeederID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterInventoryDetail ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterInventoryDetail TblMeterInventoryDetail
		{
			get { return SmartCBSDataAccess.TblMeterInventoryDetail.FetchByID(this.MeterInvDetID); }
			set { SetColumnValue("MeterInvDetID", value.MeterInvDetID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterStatus ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterStatus TblMeterStatus
		{
			get { return SmartCBSDataAccess.TblMeterStatus.FetchByID(this.MeterStatusID); }
			set { SetColumnValue("MeterStatusID", value.MeterStatusID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeterType ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeterType TblMeterType
		{
			get { return SmartCBSDataAccess.TblMeterType.FetchByID(this.MeterTypeID); }
			set { SetColumnValue("MeterTypeID", value.MeterTypeID); }
		}
		
		
		/// <summary>
		/// Returns a TblPMT ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblPMT TblPMT
		{
			get { return SmartCBSDataAccess.TblPMT.FetchByID(this.Pmtid); }
			set { SetColumnValue("PMTID", value.Pmtid); }
		}
		
		
		/// <summary>
		/// Returns a TblTariff ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblTariff TblTariff
		{
			get { return SmartCBSDataAccess.TblTariff.FetchByID(this.TarrifID); }
			set { SetColumnValue("TarrifID", value.TariffID); }
		}
		
		
		/// <summary>
		/// Returns a TblTypeOfConnection ActiveRecord object related to this TblMeter
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblTypeOfConnection TblTypeOfConnection
		{
			get { return SmartCBSDataAccess.TblTypeOfConnection.FetchByID(this.ConnectionTypeID); }
			set { SetColumnValue("ConnectionTypeID", value.TypeOfConID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMeterNo,int? varConsumerID,int? varFeaderID,string varAccountNo,DateTime? varCreatedOn,DateTime? varMeterIssueDate,int? varMeterTypeID,int? varMeterLife,int? varMeterStatusID,DateTime? varModifiedOn,int? varBranchID,int? varMeterCreatedBy,int? varMeterInvDetID,int? varTarrifID,int? varPmtid,int? varMeterDigit,string varSupplementaryMeterNo,string varAddress,int? varSerialNo,int? varMf,int? varConnectionTypeID,int? varCategoryID)
		{
			TblMeter item = new TblMeter();
			
			item.MeterNo = varMeterNo;
			
			item.ConsumerID = varConsumerID;
			
			item.FeaderID = varFeaderID;
			
			item.AccountNo = varAccountNo;
			
			item.CreatedOn = varCreatedOn;
			
			item.MeterIssueDate = varMeterIssueDate;
			
			item.MeterTypeID = varMeterTypeID;
			
			item.MeterLife = varMeterLife;
			
			item.MeterStatusID = varMeterStatusID;
			
			item.ModifiedOn = varModifiedOn;
			
			item.BranchID = varBranchID;
			
			item.MeterCreatedBy = varMeterCreatedBy;
			
			item.MeterInvDetID = varMeterInvDetID;
			
			item.TarrifID = varTarrifID;
			
			item.Pmtid = varPmtid;
			
			item.MeterDigit = varMeterDigit;
			
			item.SupplementaryMeterNo = varSupplementaryMeterNo;
			
			item.Address = varAddress;
			
			item.SerialNo = varSerialNo;
			
			item.Mf = varMf;
			
			item.ConnectionTypeID = varConnectionTypeID;
			
			item.CategoryID = varCategoryID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMeterID,string varMeterNo,int? varConsumerID,int? varFeaderID,string varAccountNo,DateTime? varCreatedOn,DateTime? varMeterIssueDate,int? varMeterTypeID,int? varMeterLife,int? varMeterStatusID,DateTime? varModifiedOn,int? varBranchID,int? varMeterCreatedBy,int? varMeterInvDetID,int? varTarrifID,int? varPmtid,int? varMeterDigit,string varSupplementaryMeterNo,string varAddress,int? varSerialNo,int? varMf,int? varConnectionTypeID,int? varCategoryID)
		{
			TblMeter item = new TblMeter();
			
				item.MeterID = varMeterID;
			
				item.MeterNo = varMeterNo;
			
				item.ConsumerID = varConsumerID;
			
				item.FeaderID = varFeaderID;
			
				item.AccountNo = varAccountNo;
			
				item.CreatedOn = varCreatedOn;
			
				item.MeterIssueDate = varMeterIssueDate;
			
				item.MeterTypeID = varMeterTypeID;
			
				item.MeterLife = varMeterLife;
			
				item.MeterStatusID = varMeterStatusID;
			
				item.ModifiedOn = varModifiedOn;
			
				item.BranchID = varBranchID;
			
				item.MeterCreatedBy = varMeterCreatedBy;
			
				item.MeterInvDetID = varMeterInvDetID;
			
				item.TarrifID = varTarrifID;
			
				item.Pmtid = varPmtid;
			
				item.MeterDigit = varMeterDigit;
			
				item.SupplementaryMeterNo = varSupplementaryMeterNo;
			
				item.Address = varAddress;
			
				item.SerialNo = varSerialNo;
			
				item.Mf = varMf;
			
				item.ConnectionTypeID = varConnectionTypeID;
			
				item.CategoryID = varCategoryID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterNoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FeaderIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AccountNoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIssueDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterTypeIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterLifeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterStatusIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterCreatedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterInvDetIDColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn TarrifIDColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PmtidColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterDigitColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn SupplementaryMeterNoColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn SerialNoColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn MfColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ConnectionTypeIDColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn CategoryIDColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MeterID = @"MeterID";
			 public static string MeterNo = @"MeterNo";
			 public static string ConsumerID = @"ConsumerID";
			 public static string FeaderID = @"FeaderID";
			 public static string AccountNo = @"AccountNo";
			 public static string CreatedOn = @"CreatedOn";
			 public static string MeterIssueDate = @"MeterIssueDate";
			 public static string MeterTypeID = @"MeterTypeID";
			 public static string MeterLife = @"MeterLife";
			 public static string MeterStatusID = @"MeterStatusID";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string BranchID = @"BranchID";
			 public static string MeterCreatedBy = @"MeterCreatedBy";
			 public static string MeterInvDetID = @"MeterInvDetID";
			 public static string TarrifID = @"TarrifID";
			 public static string Pmtid = @"PMTID";
			 public static string MeterDigit = @"MeterDigit";
			 public static string SupplementaryMeterNo = @"SupplementaryMeterNo";
			 public static string Address = @"Address";
			 public static string SerialNo = @"SerialNo";
			 public static string Mf = @"MF";
			 public static string ConnectionTypeID = @"ConnectionTypeID";
			 public static string CategoryID = @"CategoryID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
