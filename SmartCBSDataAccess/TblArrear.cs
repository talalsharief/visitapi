using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblArrear class.
	/// </summary>
    [Serializable]
	public partial class TblArrearCollection : ActiveList<TblArrear, TblArrearCollection>
	{	   
		public TblArrearCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblArrearCollection</returns>
		public TblArrearCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblArrear o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblArrear table.
	/// </summary>
	[Serializable]
	public partial class TblArrear : ActiveRecord<TblArrear>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblArrear()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblArrear(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblArrear(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblArrear(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblArrear", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarArrearID = new TableSchema.TableColumn(schema);
				colvarArrearID.ColumnName = "ArrearID";
				colvarArrearID.DataType = DbType.Int32;
				colvarArrearID.MaxLength = 0;
				colvarArrearID.AutoIncrement = true;
				colvarArrearID.IsNullable = false;
				colvarArrearID.IsPrimaryKey = true;
				colvarArrearID.IsForeignKey = false;
				colvarArrearID.IsReadOnly = false;
				colvarArrearID.DefaultSetting = @"";
				colvarArrearID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrearID);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Decimal;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarBillID = new TableSchema.TableColumn(schema);
				colvarBillID.ColumnName = "BillID";
				colvarBillID.DataType = DbType.Int32;
				colvarBillID.MaxLength = 0;
				colvarBillID.AutoIncrement = false;
				colvarBillID.IsNullable = true;
				colvarBillID.IsPrimaryKey = false;
				colvarBillID.IsForeignKey = true;
				colvarBillID.IsReadOnly = false;
				colvarBillID.DefaultSetting = @"";
				
					colvarBillID.ForeignKeyTableName = "TblBill";
				schema.Columns.Add(colvarBillID);
				
				TableSchema.TableColumn colvarFy = new TableSchema.TableColumn(schema);
				colvarFy.ColumnName = "FY";
				colvarFy.DataType = DbType.AnsiString;
				colvarFy.MaxLength = 50;
				colvarFy.AutoIncrement = false;
				colvarFy.IsNullable = true;
				colvarFy.IsPrimaryKey = false;
				colvarFy.IsForeignKey = false;
				colvarFy.IsReadOnly = false;
				colvarFy.DefaultSetting = @"";
				colvarFy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFy);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = true;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = true;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				
					colvarConsumerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarArrearNo = new TableSchema.TableColumn(schema);
				colvarArrearNo.ColumnName = "ArrearNo";
				colvarArrearNo.DataType = DbType.AnsiString;
				colvarArrearNo.MaxLength = 100;
				colvarArrearNo.AutoIncrement = false;
				colvarArrearNo.IsNullable = true;
				colvarArrearNo.IsPrimaryKey = false;
				colvarArrearNo.IsForeignKey = false;
				colvarArrearNo.IsReadOnly = false;
				colvarArrearNo.DefaultSetting = @"";
				colvarArrearNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrearNo);
				
				TableSchema.TableColumn colvarIsPaid = new TableSchema.TableColumn(schema);
				colvarIsPaid.ColumnName = "IsPaid";
				colvarIsPaid.DataType = DbType.Boolean;
				colvarIsPaid.MaxLength = 0;
				colvarIsPaid.AutoIncrement = false;
				colvarIsPaid.IsNullable = true;
				colvarIsPaid.IsPrimaryKey = false;
				colvarIsPaid.IsForeignKey = false;
				colvarIsPaid.IsReadOnly = false;
				colvarIsPaid.DefaultSetting = @"";
				colvarIsPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPaid);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblArrear",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ArrearID")]
		[Bindable(true)]
		public int ArrearID 
		{
			get { return GetColumnValue<int>(Columns.ArrearID); }
			set { SetColumnValue(Columns.ArrearID, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal? Amount 
		{
			get { return GetColumnValue<decimal?>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("BillID")]
		[Bindable(true)]
		public int? BillID 
		{
			get { return GetColumnValue<int?>(Columns.BillID); }
			set { SetColumnValue(Columns.BillID, value); }
		}
		  
		[XmlAttribute("Fy")]
		[Bindable(true)]
		public string Fy 
		{
			get { return GetColumnValue<string>(Columns.Fy); }
			set { SetColumnValue(Columns.Fy, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int? MeterID 
		{
			get { return GetColumnValue<int?>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("ArrearNo")]
		[Bindable(true)]
		public string ArrearNo 
		{
			get { return GetColumnValue<string>(Columns.ArrearNo); }
			set { SetColumnValue(Columns.ArrearNo, value); }
		}
		  
		[XmlAttribute("IsPaid")]
		[Bindable(true)]
		public bool? IsPaid 
		{
			get { return GetColumnValue<bool?>(Columns.IsPaid); }
			set { SetColumnValue(Columns.IsPaid, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblArrearAdjustmentCollection TblArrearAdjustmentRecords()
		{
			return new SmartCBSDataAccess.TblArrearAdjustmentCollection().Where(TblArrearAdjustment.Columns.ArrearID, ArrearID).Load();
		}
		public SmartCBSDataAccess.TblBillPaymentCollection TblBillPaymentRecords()
		{
			return new SmartCBSDataAccess.TblBillPaymentCollection().Where(TblBillPayment.Columns.ArrearID, ArrearID).Load();
		}
		public SmartCBSDataAccess.TblInstallementCollection TblInstallementRecords()
		{
			return new SmartCBSDataAccess.TblInstallementCollection().Where(TblInstallement.Columns.ArrearID, ArrearID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBill ActiveRecord object related to this TblArrear
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBill TblBill
		{
			get { return SmartCBSDataAccess.TblBill.FetchByID(this.BillID); }
			set { SetColumnValue("BillID", value.BillID); }
		}
		
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblArrear
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.ConsumerID); }
			set { SetColumnValue("ConsumerID", value.CunsumerID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblArrear
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal? varAmount,int? varBillID,string varFy,int? varMeterID,int? varConsumerID,string varArrearNo,bool? varIsPaid)
		{
			TblArrear item = new TblArrear();
			
			item.Amount = varAmount;
			
			item.BillID = varBillID;
			
			item.Fy = varFy;
			
			item.MeterID = varMeterID;
			
			item.ConsumerID = varConsumerID;
			
			item.ArrearNo = varArrearNo;
			
			item.IsPaid = varIsPaid;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varArrearID,decimal? varAmount,int? varBillID,string varFy,int? varMeterID,int? varConsumerID,string varArrearNo,bool? varIsPaid)
		{
			TblArrear item = new TblArrear();
			
				item.ArrearID = varArrearID;
			
				item.Amount = varAmount;
			
				item.BillID = varBillID;
			
				item.Fy = varFy;
			
				item.MeterID = varMeterID;
			
				item.ConsumerID = varConsumerID;
			
				item.ArrearNo = varArrearNo;
			
				item.IsPaid = varIsPaid;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ArrearIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BillIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FyColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ArrearNoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPaidColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ArrearID = @"ArrearID";
			 public static string Amount = @"Amount";
			 public static string BillID = @"BillID";
			 public static string Fy = @"FY";
			 public static string MeterID = @"MeterID";
			 public static string ConsumerID = @"ConsumerID";
			 public static string ArrearNo = @"ArrearNo";
			 public static string IsPaid = @"IsPaid";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
