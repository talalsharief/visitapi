using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblScheduleInstallement class.
	/// </summary>
    [Serializable]
	public partial class TblScheduleInstallementCollection : ActiveList<TblScheduleInstallement, TblScheduleInstallementCollection>
	{	   
		public TblScheduleInstallementCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblScheduleInstallementCollection</returns>
		public TblScheduleInstallementCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblScheduleInstallement o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblScheduleInstallement table.
	/// </summary>
	[Serializable]
	public partial class TblScheduleInstallement : ActiveRecord<TblScheduleInstallement>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblScheduleInstallement()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblScheduleInstallement(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblScheduleInstallement(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblScheduleInstallement(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblScheduleInstallement", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarScheduleInstallementID = new TableSchema.TableColumn(schema);
				colvarScheduleInstallementID.ColumnName = "ScheduleInstallementID";
				colvarScheduleInstallementID.DataType = DbType.Int32;
				colvarScheduleInstallementID.MaxLength = 0;
				colvarScheduleInstallementID.AutoIncrement = true;
				colvarScheduleInstallementID.IsNullable = false;
				colvarScheduleInstallementID.IsPrimaryKey = true;
				colvarScheduleInstallementID.IsForeignKey = false;
				colvarScheduleInstallementID.IsReadOnly = false;
				colvarScheduleInstallementID.DefaultSetting = @"";
				colvarScheduleInstallementID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScheduleInstallementID);
				
				TableSchema.TableColumn colvarDueDate = new TableSchema.TableColumn(schema);
				colvarDueDate.ColumnName = "DueDate";
				colvarDueDate.DataType = DbType.DateTime;
				colvarDueDate.MaxLength = 0;
				colvarDueDate.AutoIncrement = false;
				colvarDueDate.IsNullable = true;
				colvarDueDate.IsPrimaryKey = false;
				colvarDueDate.IsForeignKey = false;
				colvarDueDate.IsReadOnly = false;
				colvarDueDate.DefaultSetting = @"";
				colvarDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDueDate);
				
				TableSchema.TableColumn colvarIsPaid = new TableSchema.TableColumn(schema);
				colvarIsPaid.ColumnName = "IsPaid";
				colvarIsPaid.DataType = DbType.Boolean;
				colvarIsPaid.MaxLength = 0;
				colvarIsPaid.AutoIncrement = false;
				colvarIsPaid.IsNullable = true;
				colvarIsPaid.IsPrimaryKey = false;
				colvarIsPaid.IsForeignKey = false;
				colvarIsPaid.IsReadOnly = false;
				colvarIsPaid.DefaultSetting = @"";
				colvarIsPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPaid);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = false;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				colvarConsumerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarInstallementID = new TableSchema.TableColumn(schema);
				colvarInstallementID.ColumnName = "InstallementID";
				colvarInstallementID.DataType = DbType.Int32;
				colvarInstallementID.MaxLength = 0;
				colvarInstallementID.AutoIncrement = false;
				colvarInstallementID.IsNullable = true;
				colvarInstallementID.IsPrimaryKey = false;
				colvarInstallementID.IsForeignKey = true;
				colvarInstallementID.IsReadOnly = false;
				colvarInstallementID.DefaultSetting = @"";
				
					colvarInstallementID.ForeignKeyTableName = "TblInstallement";
				schema.Columns.Add(colvarInstallementID);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Decimal;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarIsUpfront = new TableSchema.TableColumn(schema);
				colvarIsUpfront.ColumnName = "IsUpfront";
				colvarIsUpfront.DataType = DbType.Boolean;
				colvarIsUpfront.MaxLength = 0;
				colvarIsUpfront.AutoIncrement = false;
				colvarIsUpfront.IsNullable = true;
				colvarIsUpfront.IsPrimaryKey = false;
				colvarIsUpfront.IsForeignKey = false;
				colvarIsUpfront.IsReadOnly = false;
				colvarIsUpfront.DefaultSetting = @"";
				colvarIsUpfront.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsUpfront);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblScheduleInstallement",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ScheduleInstallementID")]
		[Bindable(true)]
		public int ScheduleInstallementID 
		{
			get { return GetColumnValue<int>(Columns.ScheduleInstallementID); }
			set { SetColumnValue(Columns.ScheduleInstallementID, value); }
		}
		  
		[XmlAttribute("DueDate")]
		[Bindable(true)]
		public DateTime? DueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DueDate); }
			set { SetColumnValue(Columns.DueDate, value); }
		}
		  
		[XmlAttribute("IsPaid")]
		[Bindable(true)]
		public bool? IsPaid 
		{
			get { return GetColumnValue<bool?>(Columns.IsPaid); }
			set { SetColumnValue(Columns.IsPaid, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("InstallementID")]
		[Bindable(true)]
		public int? InstallementID 
		{
			get { return GetColumnValue<int?>(Columns.InstallementID); }
			set { SetColumnValue(Columns.InstallementID, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal? Amount 
		{
			get { return GetColumnValue<decimal?>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("IsUpfront")]
		[Bindable(true)]
		public bool? IsUpfront 
		{
			get { return GetColumnValue<bool?>(Columns.IsUpfront); }
			set { SetColumnValue(Columns.IsUpfront, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblInstallement ActiveRecord object related to this TblScheduleInstallement
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblInstallement TblInstallement
		{
			get { return SmartCBSDataAccess.TblInstallement.FetchByID(this.InstallementID); }
			set { SetColumnValue("InstallementID", value.InstallementID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime? varDueDate,bool? varIsPaid,int? varConsumerID,int? varInstallementID,decimal? varAmount,bool? varIsUpfront)
		{
			TblScheduleInstallement item = new TblScheduleInstallement();
			
			item.DueDate = varDueDate;
			
			item.IsPaid = varIsPaid;
			
			item.ConsumerID = varConsumerID;
			
			item.InstallementID = varInstallementID;
			
			item.Amount = varAmount;
			
			item.IsUpfront = varIsUpfront;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varScheduleInstallementID,DateTime? varDueDate,bool? varIsPaid,int? varConsumerID,int? varInstallementID,decimal? varAmount,bool? varIsUpfront)
		{
			TblScheduleInstallement item = new TblScheduleInstallement();
			
				item.ScheduleInstallementID = varScheduleInstallementID;
			
				item.DueDate = varDueDate;
			
				item.IsPaid = varIsPaid;
			
				item.ConsumerID = varConsumerID;
			
				item.InstallementID = varInstallementID;
			
				item.Amount = varAmount;
			
				item.IsUpfront = varIsUpfront;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScheduleInstallementIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DueDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPaidColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn InstallementIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsUpfrontColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ScheduleInstallementID = @"ScheduleInstallementID";
			 public static string DueDate = @"DueDate";
			 public static string IsPaid = @"IsPaid";
			 public static string ConsumerID = @"ConsumerID";
			 public static string InstallementID = @"InstallementID";
			 public static string Amount = @"Amount";
			 public static string IsUpfront = @"IsUpfront";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
