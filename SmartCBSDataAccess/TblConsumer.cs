using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblConsumer class.
	/// </summary>
    [Serializable]
	public partial class TblConsumerCollection : ActiveList<TblConsumer, TblConsumerCollection>
	{	   
		public TblConsumerCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblConsumerCollection</returns>
		public TblConsumerCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblConsumer o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblConsumer table.
	/// </summary>
	[Serializable]
	public partial class TblConsumer : ActiveRecord<TblConsumer>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblConsumer()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblConsumer(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblConsumer(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblConsumer(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblConsumer", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCunsumerID = new TableSchema.TableColumn(schema);
				colvarCunsumerID.ColumnName = "CunsumerID";
				colvarCunsumerID.DataType = DbType.Int32;
				colvarCunsumerID.MaxLength = 0;
				colvarCunsumerID.AutoIncrement = true;
				colvarCunsumerID.IsNullable = false;
				colvarCunsumerID.IsPrimaryKey = true;
				colvarCunsumerID.IsForeignKey = false;
				colvarCunsumerID.IsReadOnly = false;
				colvarCunsumerID.DefaultSetting = @"";
				colvarCunsumerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCunsumerID);
				
				TableSchema.TableColumn colvarConsumerName = new TableSchema.TableColumn(schema);
				colvarConsumerName.ColumnName = "ConsumerName";
				colvarConsumerName.DataType = DbType.AnsiString;
				colvarConsumerName.MaxLength = 50;
				colvarConsumerName.AutoIncrement = false;
				colvarConsumerName.IsNullable = true;
				colvarConsumerName.IsPrimaryKey = false;
				colvarConsumerName.IsForeignKey = false;
				colvarConsumerName.IsReadOnly = false;
				colvarConsumerName.DefaultSetting = @"";
				colvarConsumerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerName);
				
				TableSchema.TableColumn colvarCunsumerEmail = new TableSchema.TableColumn(schema);
				colvarCunsumerEmail.ColumnName = "CunsumerEmail";
				colvarCunsumerEmail.DataType = DbType.AnsiString;
				colvarCunsumerEmail.MaxLength = 50;
				colvarCunsumerEmail.AutoIncrement = false;
				colvarCunsumerEmail.IsNullable = true;
				colvarCunsumerEmail.IsPrimaryKey = false;
				colvarCunsumerEmail.IsForeignKey = false;
				colvarCunsumerEmail.IsReadOnly = false;
				colvarCunsumerEmail.DefaultSetting = @"";
				colvarCunsumerEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCunsumerEmail);
				
				TableSchema.TableColumn colvarConsumerResidensePhoneNo = new TableSchema.TableColumn(schema);
				colvarConsumerResidensePhoneNo.ColumnName = "ConsumerResidensePhoneNo";
				colvarConsumerResidensePhoneNo.DataType = DbType.AnsiString;
				colvarConsumerResidensePhoneNo.MaxLength = 50;
				colvarConsumerResidensePhoneNo.AutoIncrement = false;
				colvarConsumerResidensePhoneNo.IsNullable = true;
				colvarConsumerResidensePhoneNo.IsPrimaryKey = false;
				colvarConsumerResidensePhoneNo.IsForeignKey = false;
				colvarConsumerResidensePhoneNo.IsReadOnly = false;
				colvarConsumerResidensePhoneNo.DefaultSetting = @"";
				colvarConsumerResidensePhoneNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerResidensePhoneNo);
				
				TableSchema.TableColumn colvarCunsumerAddress = new TableSchema.TableColumn(schema);
				colvarCunsumerAddress.ColumnName = "CunsumerAddress";
				colvarCunsumerAddress.DataType = DbType.AnsiString;
				colvarCunsumerAddress.MaxLength = -1;
				colvarCunsumerAddress.AutoIncrement = false;
				colvarCunsumerAddress.IsNullable = true;
				colvarCunsumerAddress.IsPrimaryKey = false;
				colvarCunsumerAddress.IsForeignKey = false;
				colvarCunsumerAddress.IsReadOnly = false;
				colvarCunsumerAddress.DefaultSetting = @"";
				colvarCunsumerAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCunsumerAddress);
				
				TableSchema.TableColumn colvarConsumerMobileNo = new TableSchema.TableColumn(schema);
				colvarConsumerMobileNo.ColumnName = "ConsumerMobileNo";
				colvarConsumerMobileNo.DataType = DbType.AnsiString;
				colvarConsumerMobileNo.MaxLength = 50;
				colvarConsumerMobileNo.AutoIncrement = false;
				colvarConsumerMobileNo.IsNullable = true;
				colvarConsumerMobileNo.IsPrimaryKey = false;
				colvarConsumerMobileNo.IsForeignKey = false;
				colvarConsumerMobileNo.IsReadOnly = false;
				colvarConsumerMobileNo.DefaultSetting = @"";
				colvarConsumerMobileNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerMobileNo);
				
				TableSchema.TableColumn colvarConsumerNo = new TableSchema.TableColumn(schema);
				colvarConsumerNo.ColumnName = "ConsumerNo";
				colvarConsumerNo.DataType = DbType.AnsiString;
				colvarConsumerNo.MaxLength = -1;
				colvarConsumerNo.AutoIncrement = false;
				colvarConsumerNo.IsNullable = true;
				colvarConsumerNo.IsPrimaryKey = false;
				colvarConsumerNo.IsForeignKey = false;
				colvarConsumerNo.IsReadOnly = false;
				colvarConsumerNo.DefaultSetting = @"";
				colvarConsumerNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerNo);
				
				TableSchema.TableColumn colvarConsumerNIC = new TableSchema.TableColumn(schema);
				colvarConsumerNIC.ColumnName = "ConsumerNIC";
				colvarConsumerNIC.DataType = DbType.AnsiString;
				colvarConsumerNIC.MaxLength = 70;
				colvarConsumerNIC.AutoIncrement = false;
				colvarConsumerNIC.IsNullable = true;
				colvarConsumerNIC.IsPrimaryKey = false;
				colvarConsumerNIC.IsForeignKey = false;
				colvarConsumerNIC.IsReadOnly = false;
				colvarConsumerNIC.DefaultSetting = @"";
				colvarConsumerNIC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerNIC);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarConsumerStatusID = new TableSchema.TableColumn(schema);
				colvarConsumerStatusID.ColumnName = "ConsumerStatusID";
				colvarConsumerStatusID.DataType = DbType.Int32;
				colvarConsumerStatusID.MaxLength = 0;
				colvarConsumerStatusID.AutoIncrement = false;
				colvarConsumerStatusID.IsNullable = true;
				colvarConsumerStatusID.IsPrimaryKey = false;
				colvarConsumerStatusID.IsForeignKey = true;
				colvarConsumerStatusID.IsReadOnly = false;
				colvarConsumerStatusID.DefaultSetting = @"";
				
					colvarConsumerStatusID.ForeignKeyTableName = "TblConsumerStatus";
				schema.Columns.Add(colvarConsumerStatusID);
				
				TableSchema.TableColumn colvarConsumerFatherHusbandName = new TableSchema.TableColumn(schema);
				colvarConsumerFatherHusbandName.ColumnName = "ConsumerFather_HusbandName";
				colvarConsumerFatherHusbandName.DataType = DbType.AnsiString;
				colvarConsumerFatherHusbandName.MaxLength = 50;
				colvarConsumerFatherHusbandName.AutoIncrement = false;
				colvarConsumerFatherHusbandName.IsNullable = true;
				colvarConsumerFatherHusbandName.IsPrimaryKey = false;
				colvarConsumerFatherHusbandName.IsForeignKey = false;
				colvarConsumerFatherHusbandName.IsReadOnly = false;
				colvarConsumerFatherHusbandName.DefaultSetting = @"";
				colvarConsumerFatherHusbandName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerFatherHusbandName);
				
				TableSchema.TableColumn colvarConsumerCNICExpiryDate = new TableSchema.TableColumn(schema);
				colvarConsumerCNICExpiryDate.ColumnName = "ConsumerCNICExpiryDate";
				colvarConsumerCNICExpiryDate.DataType = DbType.AnsiString;
				colvarConsumerCNICExpiryDate.MaxLength = 0;
				colvarConsumerCNICExpiryDate.AutoIncrement = false;
				colvarConsumerCNICExpiryDate.IsNullable = true;
				colvarConsumerCNICExpiryDate.IsPrimaryKey = false;
				colvarConsumerCNICExpiryDate.IsForeignKey = false;
				colvarConsumerCNICExpiryDate.IsReadOnly = false;
				colvarConsumerCNICExpiryDate.DefaultSetting = @"";
				colvarConsumerCNICExpiryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerCNICExpiryDate);
				
				TableSchema.TableColumn colvarConsumerProfessionalOccupation = new TableSchema.TableColumn(schema);
				colvarConsumerProfessionalOccupation.ColumnName = "ConsumerProfessional_Occupation";
				colvarConsumerProfessionalOccupation.DataType = DbType.AnsiString;
				colvarConsumerProfessionalOccupation.MaxLength = 50;
				colvarConsumerProfessionalOccupation.AutoIncrement = false;
				colvarConsumerProfessionalOccupation.IsNullable = true;
				colvarConsumerProfessionalOccupation.IsPrimaryKey = false;
				colvarConsumerProfessionalOccupation.IsForeignKey = false;
				colvarConsumerProfessionalOccupation.IsReadOnly = false;
				colvarConsumerProfessionalOccupation.DefaultSetting = @"";
				colvarConsumerProfessionalOccupation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerProfessionalOccupation);
				
				TableSchema.TableColumn colvarConsumerOfficePhoneNo = new TableSchema.TableColumn(schema);
				colvarConsumerOfficePhoneNo.ColumnName = "ConsumerOfficePhoneNo";
				colvarConsumerOfficePhoneNo.DataType = DbType.AnsiString;
				colvarConsumerOfficePhoneNo.MaxLength = 50;
				colvarConsumerOfficePhoneNo.AutoIncrement = false;
				colvarConsumerOfficePhoneNo.IsNullable = true;
				colvarConsumerOfficePhoneNo.IsPrimaryKey = false;
				colvarConsumerOfficePhoneNo.IsForeignKey = false;
				colvarConsumerOfficePhoneNo.IsReadOnly = false;
				colvarConsumerOfficePhoneNo.DefaultSetting = @"";
				colvarConsumerOfficePhoneNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerOfficePhoneNo);
				
				TableSchema.TableColumn colvarConsumerNationalTaxGSTNo = new TableSchema.TableColumn(schema);
				colvarConsumerNationalTaxGSTNo.ColumnName = "ConsumerNationalTax_GSTNo";
				colvarConsumerNationalTaxGSTNo.DataType = DbType.AnsiString;
				colvarConsumerNationalTaxGSTNo.MaxLength = 50;
				colvarConsumerNationalTaxGSTNo.AutoIncrement = false;
				colvarConsumerNationalTaxGSTNo.IsNullable = true;
				colvarConsumerNationalTaxGSTNo.IsPrimaryKey = false;
				colvarConsumerNationalTaxGSTNo.IsForeignKey = false;
				colvarConsumerNationalTaxGSTNo.IsReadOnly = false;
				colvarConsumerNationalTaxGSTNo.DefaultSetting = @"";
				colvarConsumerNationalTaxGSTNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsumerNationalTaxGSTNo);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarConsumerCreatedBy = new TableSchema.TableColumn(schema);
				colvarConsumerCreatedBy.ColumnName = "ConsumerCreatedBy";
				colvarConsumerCreatedBy.DataType = DbType.Int32;
				colvarConsumerCreatedBy.MaxLength = 0;
				colvarConsumerCreatedBy.AutoIncrement = false;
				colvarConsumerCreatedBy.IsNullable = true;
				colvarConsumerCreatedBy.IsPrimaryKey = false;
				colvarConsumerCreatedBy.IsForeignKey = true;
				colvarConsumerCreatedBy.IsReadOnly = false;
				colvarConsumerCreatedBy.DefaultSetting = @"";
				
					colvarConsumerCreatedBy.ForeignKeyTableName = "tblEmployee";
				schema.Columns.Add(colvarConsumerCreatedBy);
				
				TableSchema.TableColumn colvarOldCunsomerNo = new TableSchema.TableColumn(schema);
				colvarOldCunsomerNo.ColumnName = "OldCunsomerNo";
				colvarOldCunsomerNo.DataType = DbType.AnsiString;
				colvarOldCunsomerNo.MaxLength = 200;
				colvarOldCunsomerNo.AutoIncrement = false;
				colvarOldCunsomerNo.IsNullable = true;
				colvarOldCunsomerNo.IsPrimaryKey = false;
				colvarOldCunsomerNo.IsForeignKey = false;
				colvarOldCunsomerNo.IsReadOnly = false;
				colvarOldCunsomerNo.DefaultSetting = @"";
				colvarOldCunsomerNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOldCunsomerNo);
				
				TableSchema.TableColumn colvarIsBankChargeAndSurChargeApply = new TableSchema.TableColumn(schema);
				colvarIsBankChargeAndSurChargeApply.ColumnName = "IsBankChargeAndSurChargeApply";
				colvarIsBankChargeAndSurChargeApply.DataType = DbType.Boolean;
				colvarIsBankChargeAndSurChargeApply.MaxLength = 0;
				colvarIsBankChargeAndSurChargeApply.AutoIncrement = false;
				colvarIsBankChargeAndSurChargeApply.IsNullable = true;
				colvarIsBankChargeAndSurChargeApply.IsPrimaryKey = false;
				colvarIsBankChargeAndSurChargeApply.IsForeignKey = false;
				colvarIsBankChargeAndSurChargeApply.IsReadOnly = false;
				colvarIsBankChargeAndSurChargeApply.DefaultSetting = @"";
				colvarIsBankChargeAndSurChargeApply.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsBankChargeAndSurChargeApply);
				
				TableSchema.TableColumn colvarFreeUnits = new TableSchema.TableColumn(schema);
				colvarFreeUnits.ColumnName = "FreeUnits";
				colvarFreeUnits.DataType = DbType.Int32;
				colvarFreeUnits.MaxLength = 0;
				colvarFreeUnits.AutoIncrement = false;
				colvarFreeUnits.IsNullable = true;
				colvarFreeUnits.IsPrimaryKey = false;
				colvarFreeUnits.IsForeignKey = false;
				colvarFreeUnits.IsReadOnly = false;
				colvarFreeUnits.DefaultSetting = @"";
				colvarFreeUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreeUnits);
				
				TableSchema.TableColumn colvarIsGovernment = new TableSchema.TableColumn(schema);
				colvarIsGovernment.ColumnName = "IsGovernment";
				colvarIsGovernment.DataType = DbType.Boolean;
				colvarIsGovernment.MaxLength = 0;
				colvarIsGovernment.AutoIncrement = false;
				colvarIsGovernment.IsNullable = true;
				colvarIsGovernment.IsPrimaryKey = false;
				colvarIsGovernment.IsForeignKey = false;
				colvarIsGovernment.IsReadOnly = false;
				colvarIsGovernment.DefaultSetting = @"";
				colvarIsGovernment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsGovernment);
				
				TableSchema.TableColumn colvarBusinessName = new TableSchema.TableColumn(schema);
				colvarBusinessName.ColumnName = "BusinessName";
				colvarBusinessName.DataType = DbType.AnsiString;
				colvarBusinessName.MaxLength = 150;
				colvarBusinessName.AutoIncrement = false;
				colvarBusinessName.IsNullable = true;
				colvarBusinessName.IsPrimaryKey = false;
				colvarBusinessName.IsForeignKey = false;
				colvarBusinessName.IsReadOnly = false;
				colvarBusinessName.DefaultSetting = @"";
				colvarBusinessName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBusinessName);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblConsumer",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CunsumerID")]
		[Bindable(true)]
		public int CunsumerID 
		{
			get { return GetColumnValue<int>(Columns.CunsumerID); }
			set { SetColumnValue(Columns.CunsumerID, value); }
		}
		  
		[XmlAttribute("ConsumerName")]
		[Bindable(true)]
		public string ConsumerName 
		{
			get { return GetColumnValue<string>(Columns.ConsumerName); }
			set { SetColumnValue(Columns.ConsumerName, value); }
		}
		  
		[XmlAttribute("CunsumerEmail")]
		[Bindable(true)]
		public string CunsumerEmail 
		{
			get { return GetColumnValue<string>(Columns.CunsumerEmail); }
			set { SetColumnValue(Columns.CunsumerEmail, value); }
		}
		  
		[XmlAttribute("ConsumerResidensePhoneNo")]
		[Bindable(true)]
		public string ConsumerResidensePhoneNo 
		{
			get { return GetColumnValue<string>(Columns.ConsumerResidensePhoneNo); }
			set { SetColumnValue(Columns.ConsumerResidensePhoneNo, value); }
		}
		  
		[XmlAttribute("CunsumerAddress")]
		[Bindable(true)]
		public string CunsumerAddress 
		{
			get { return GetColumnValue<string>(Columns.CunsumerAddress); }
			set { SetColumnValue(Columns.CunsumerAddress, value); }
		}
		  
		[XmlAttribute("ConsumerMobileNo")]
		[Bindable(true)]
		public string ConsumerMobileNo 
		{
			get { return GetColumnValue<string>(Columns.ConsumerMobileNo); }
			set { SetColumnValue(Columns.ConsumerMobileNo, value); }
		}
		  
		[XmlAttribute("ConsumerNo")]
		[Bindable(true)]
		public string ConsumerNo 
		{
			get { return GetColumnValue<string>(Columns.ConsumerNo); }
			set { SetColumnValue(Columns.ConsumerNo, value); }
		}
		  
		[XmlAttribute("ConsumerNIC")]
		[Bindable(true)]
		public string ConsumerNIC 
		{
			get { return GetColumnValue<string>(Columns.ConsumerNIC); }
			set { SetColumnValue(Columns.ConsumerNIC, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("ConsumerStatusID")]
		[Bindable(true)]
		public int? ConsumerStatusID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerStatusID); }
			set { SetColumnValue(Columns.ConsumerStatusID, value); }
		}
		  
		[XmlAttribute("ConsumerFatherHusbandName")]
		[Bindable(true)]
		public string ConsumerFatherHusbandName 
		{
			get { return GetColumnValue<string>(Columns.ConsumerFatherHusbandName); }
			set { SetColumnValue(Columns.ConsumerFatherHusbandName, value); }
		}
		  
		[XmlAttribute("ConsumerCNICExpiryDate")]
		[Bindable(true)]
		public string ConsumerCNICExpiryDate 
		{
			get { return GetColumnValue<string>(Columns.ConsumerCNICExpiryDate); }
			set { SetColumnValue(Columns.ConsumerCNICExpiryDate, value); }
		}
		  
		[XmlAttribute("ConsumerProfessionalOccupation")]
		[Bindable(true)]
		public string ConsumerProfessionalOccupation 
		{
			get { return GetColumnValue<string>(Columns.ConsumerProfessionalOccupation); }
			set { SetColumnValue(Columns.ConsumerProfessionalOccupation, value); }
		}
		  
		[XmlAttribute("ConsumerOfficePhoneNo")]
		[Bindable(true)]
		public string ConsumerOfficePhoneNo 
		{
			get { return GetColumnValue<string>(Columns.ConsumerOfficePhoneNo); }
			set { SetColumnValue(Columns.ConsumerOfficePhoneNo, value); }
		}
		  
		[XmlAttribute("ConsumerNationalTaxGSTNo")]
		[Bindable(true)]
		public string ConsumerNationalTaxGSTNo 
		{
			get { return GetColumnValue<string>(Columns.ConsumerNationalTaxGSTNo); }
			set { SetColumnValue(Columns.ConsumerNationalTaxGSTNo, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("ConsumerCreatedBy")]
		[Bindable(true)]
		public int? ConsumerCreatedBy 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerCreatedBy); }
			set { SetColumnValue(Columns.ConsumerCreatedBy, value); }
		}
		  
		[XmlAttribute("OldCunsomerNo")]
		[Bindable(true)]
		public string OldCunsomerNo 
		{
			get { return GetColumnValue<string>(Columns.OldCunsomerNo); }
			set { SetColumnValue(Columns.OldCunsomerNo, value); }
		}
		  
		[XmlAttribute("IsBankChargeAndSurChargeApply")]
		[Bindable(true)]
		public bool? IsBankChargeAndSurChargeApply 
		{
			get { return GetColumnValue<bool?>(Columns.IsBankChargeAndSurChargeApply); }
			set { SetColumnValue(Columns.IsBankChargeAndSurChargeApply, value); }
		}
		  
		[XmlAttribute("FreeUnits")]
		[Bindable(true)]
		public int? FreeUnits 
		{
			get { return GetColumnValue<int?>(Columns.FreeUnits); }
			set { SetColumnValue(Columns.FreeUnits, value); }
		}
		  
		[XmlAttribute("IsGovernment")]
		[Bindable(true)]
		public bool? IsGovernment 
		{
			get { return GetColumnValue<bool?>(Columns.IsGovernment); }
			set { SetColumnValue(Columns.IsGovernment, value); }
		}
		  
		[XmlAttribute("BusinessName")]
		[Bindable(true)]
		public string BusinessName 
		{
			get { return GetColumnValue<string>(Columns.BusinessName); }
			set { SetColumnValue(Columns.BusinessName, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblAdvanceCollection TblAdvanceRecords()
		{
			return new SmartCBSDataAccess.TblAdvanceCollection().Where(TblAdvance.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblArrearCollection TblArrearRecords()
		{
			return new SmartCBSDataAccess.TblArrearCollection().Where(TblArrear.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblBillCollection TblBillRecords()
		{
			return new SmartCBSDataAccess.TblBillCollection().Where(TblBill.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblChequeCollection TblChequeRecords()
		{
			return new SmartCBSDataAccess.TblChequeCollection().Where(TblCheque.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblConsumerUpdateOnMeterCollection TblConsumerUpdateOnMeterRecords()
		{
			return new SmartCBSDataAccess.TblConsumerUpdateOnMeterCollection().Where(TblConsumerUpdateOnMeter.Columns.NewConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblConsumerUpdateOnMeterCollection TblConsumerUpdateOnMeterRecordsFromTblConsumer()
		{
			return new SmartCBSDataAccess.TblConsumerUpdateOnMeterCollection().Where(TblConsumerUpdateOnMeter.Columns.OldConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblConsumerLedgerCollection TblConsumerLedgerRecords()
		{
			return new SmartCBSDataAccess.TblConsumerLedgerCollection().Where(TblConsumerLedger.Columns.CunsomerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblDetectionBillCollection TblDetectionBillRecords()
		{
			return new SmartCBSDataAccess.TblDetectionBillCollection().Where(TblDetectionBill.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblDupMeterReadingCollection TblDupMeterReadingRecords()
		{
			return new SmartCBSDataAccess.TblDupMeterReadingCollection().Where(TblDupMeterReading.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblInstallementCollection TblInstallementRecords()
		{
			return new SmartCBSDataAccess.TblInstallementCollection().Where(TblInstallement.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblLedgerCollection TblLedgerRecords()
		{
			return new SmartCBSDataAccess.TblLedgerCollection().Where(TblLedger.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblMeterCollection TblMeterRecords()
		{
			return new SmartCBSDataAccess.TblMeterCollection().Where(TblMeter.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblMeterDefectedDetailCollection TblMeterDefectedDetailRecords()
		{
			return new SmartCBSDataAccess.TblMeterDefectedDetailCollection().Where(TblMeterDefectedDetail.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblMeterIssueRequestCollection TblMeterIssueRequests()
		{
			return new SmartCBSDataAccess.TblMeterIssueRequestCollection().Where(TblMeterIssueRequest.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblMeterReadingCollection TblMeterReadingRecords()
		{
			return new SmartCBSDataAccess.TblMeterReadingCollection().Where(TblMeterReading.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblMeterReadingDatumCollection TblMeterReadingData()
		{
			return new SmartCBSDataAccess.TblMeterReadingDatumCollection().Where(TblMeterReadingDatum.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblMeterReplacementCollection TblMeterReplacementRecords()
		{
			return new SmartCBSDataAccess.TblMeterReplacementCollection().Where(TblMeterReplacement.Columns.ConsumerID, CunsumerID).Load();
		}
		public SmartCBSDataAccess.TblNewConnectionCollection TblNewConnectionRecords()
		{
			return new SmartCBSDataAccess.TblNewConnectionCollection().Where(TblNewConnection.Columns.ConsumerID, CunsumerID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this TblConsumer
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblBranch TblBranch
		{
			get { return SmartCBSDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a TblConsumerStatus ActiveRecord object related to this TblConsumer
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumerStatus TblConsumerStatus
		{
			get { return SmartCBSDataAccess.TblConsumerStatus.FetchByID(this.ConsumerStatusID); }
			set { SetColumnValue("ConsumerStatusID", value.ConsumerStatusID); }
		}
		
		
		/// <summary>
		/// Returns a TblEmployee ActiveRecord object related to this TblConsumer
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblEmployee TblEmployee
		{
			get { return SmartCBSDataAccess.TblEmployee.FetchByID(this.ConsumerCreatedBy); }
			set { SetColumnValue("ConsumerCreatedBy", value.EmployeeID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varConsumerName,string varCunsumerEmail,string varConsumerResidensePhoneNo,string varCunsumerAddress,string varConsumerMobileNo,string varConsumerNo,string varConsumerNIC,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varConsumerStatusID,string varConsumerFatherHusbandName,string varConsumerCNICExpiryDate,string varConsumerProfessionalOccupation,string varConsumerOfficePhoneNo,string varConsumerNationalTaxGSTNo,int? varBranchID,int? varConsumerCreatedBy,string varOldCunsomerNo,bool? varIsBankChargeAndSurChargeApply,int? varFreeUnits,bool? varIsGovernment,string varBusinessName)
		{
			TblConsumer item = new TblConsumer();
			
			item.ConsumerName = varConsumerName;
			
			item.CunsumerEmail = varCunsumerEmail;
			
			item.ConsumerResidensePhoneNo = varConsumerResidensePhoneNo;
			
			item.CunsumerAddress = varCunsumerAddress;
			
			item.ConsumerMobileNo = varConsumerMobileNo;
			
			item.ConsumerNo = varConsumerNo;
			
			item.ConsumerNIC = varConsumerNIC;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.ConsumerStatusID = varConsumerStatusID;
			
			item.ConsumerFatherHusbandName = varConsumerFatherHusbandName;
			
			item.ConsumerCNICExpiryDate = varConsumerCNICExpiryDate;
			
			item.ConsumerProfessionalOccupation = varConsumerProfessionalOccupation;
			
			item.ConsumerOfficePhoneNo = varConsumerOfficePhoneNo;
			
			item.ConsumerNationalTaxGSTNo = varConsumerNationalTaxGSTNo;
			
			item.BranchID = varBranchID;
			
			item.ConsumerCreatedBy = varConsumerCreatedBy;
			
			item.OldCunsomerNo = varOldCunsomerNo;
			
			item.IsBankChargeAndSurChargeApply = varIsBankChargeAndSurChargeApply;
			
			item.FreeUnits = varFreeUnits;
			
			item.IsGovernment = varIsGovernment;
			
			item.BusinessName = varBusinessName;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCunsumerID,string varConsumerName,string varCunsumerEmail,string varConsumerResidensePhoneNo,string varCunsumerAddress,string varConsumerMobileNo,string varConsumerNo,string varConsumerNIC,DateTime? varCreatedOn,DateTime? varModifiedOn,int? varConsumerStatusID,string varConsumerFatherHusbandName,string varConsumerCNICExpiryDate,string varConsumerProfessionalOccupation,string varConsumerOfficePhoneNo,string varConsumerNationalTaxGSTNo,int? varBranchID,int? varConsumerCreatedBy,string varOldCunsomerNo,bool? varIsBankChargeAndSurChargeApply,int? varFreeUnits,bool? varIsGovernment,string varBusinessName)
		{
			TblConsumer item = new TblConsumer();
			
				item.CunsumerID = varCunsumerID;
			
				item.ConsumerName = varConsumerName;
			
				item.CunsumerEmail = varCunsumerEmail;
			
				item.ConsumerResidensePhoneNo = varConsumerResidensePhoneNo;
			
				item.CunsumerAddress = varCunsumerAddress;
			
				item.ConsumerMobileNo = varConsumerMobileNo;
			
				item.ConsumerNo = varConsumerNo;
			
				item.ConsumerNIC = varConsumerNIC;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.ConsumerStatusID = varConsumerStatusID;
			
				item.ConsumerFatherHusbandName = varConsumerFatherHusbandName;
			
				item.ConsumerCNICExpiryDate = varConsumerCNICExpiryDate;
			
				item.ConsumerProfessionalOccupation = varConsumerProfessionalOccupation;
			
				item.ConsumerOfficePhoneNo = varConsumerOfficePhoneNo;
			
				item.ConsumerNationalTaxGSTNo = varConsumerNationalTaxGSTNo;
			
				item.BranchID = varBranchID;
			
				item.ConsumerCreatedBy = varConsumerCreatedBy;
			
				item.OldCunsomerNo = varOldCunsomerNo;
			
				item.IsBankChargeAndSurChargeApply = varIsBankChargeAndSurChargeApply;
			
				item.FreeUnits = varFreeUnits;
			
				item.IsGovernment = varIsGovernment;
			
				item.BusinessName = varBusinessName;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CunsumerIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CunsumerEmailColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerResidensePhoneNoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CunsumerAddressColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerMobileNoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerNoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerNICColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerStatusIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerFatherHusbandNameColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerCNICExpiryDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerProfessionalOccupationColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerOfficePhoneNoColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerNationalTaxGSTNoColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerCreatedByColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn OldCunsomerNoColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn IsBankChargeAndSurChargeApplyColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn FreeUnitsColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn IsGovernmentColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn BusinessNameColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CunsumerID = @"CunsumerID";
			 public static string ConsumerName = @"ConsumerName";
			 public static string CunsumerEmail = @"CunsumerEmail";
			 public static string ConsumerResidensePhoneNo = @"ConsumerResidensePhoneNo";
			 public static string CunsumerAddress = @"CunsumerAddress";
			 public static string ConsumerMobileNo = @"ConsumerMobileNo";
			 public static string ConsumerNo = @"ConsumerNo";
			 public static string ConsumerNIC = @"ConsumerNIC";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string ConsumerStatusID = @"ConsumerStatusID";
			 public static string ConsumerFatherHusbandName = @"ConsumerFather_HusbandName";
			 public static string ConsumerCNICExpiryDate = @"ConsumerCNICExpiryDate";
			 public static string ConsumerProfessionalOccupation = @"ConsumerProfessional_Occupation";
			 public static string ConsumerOfficePhoneNo = @"ConsumerOfficePhoneNo";
			 public static string ConsumerNationalTaxGSTNo = @"ConsumerNationalTax_GSTNo";
			 public static string BranchID = @"BranchID";
			 public static string ConsumerCreatedBy = @"ConsumerCreatedBy";
			 public static string OldCunsomerNo = @"OldCunsomerNo";
			 public static string IsBankChargeAndSurChargeApply = @"IsBankChargeAndSurChargeApply";
			 public static string FreeUnits = @"FreeUnits";
			 public static string IsGovernment = @"IsGovernment";
			 public static string BusinessName = @"BusinessName";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
