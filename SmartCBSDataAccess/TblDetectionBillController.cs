using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
    /// <summary>
    /// Controller class for tblDetectionBill
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblDetectionBillController
    {
        // Preload our schema..
        TblDetectionBill thisSchemaLoad = new TblDetectionBill();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblDetectionBillCollection FetchAll()
        {
            TblDetectionBillCollection coll = new TblDetectionBillCollection();
            Query qry = new Query(TblDetectionBill.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblDetectionBillCollection FetchByID(object DetectionBillID)
        {
            TblDetectionBillCollection coll = new TblDetectionBillCollection().Where("DetectionBillID", DetectionBillID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblDetectionBillCollection FetchByQuery(Query qry)
        {
            TblDetectionBillCollection coll = new TblDetectionBillCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object DetectionBillID)
        {
            return (TblDetectionBill.Delete(DetectionBillID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object DetectionBillID)
        {
            return (TblDetectionBill.Destroy(DetectionBillID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string DetectionBillNo,int? MeterID,int? ConsumerID,int? NoOfMonths,decimal? PerMonthAmount,bool? IsPaid,DateTime? CreatedOn,DateTime? ModifiedOn,string BillFortheMonth,decimal? AmountPayable,decimal? AmountPayableAfterDueDate,DateTime? DueDate)
	    {
		    TblDetectionBill item = new TblDetectionBill();
		    
            item.DetectionBillNo = DetectionBillNo;
            
            item.MeterID = MeterID;
            
            item.ConsumerID = ConsumerID;
            
            item.NoOfMonths = NoOfMonths;
            
            item.PerMonthAmount = PerMonthAmount;
            
            item.IsPaid = IsPaid;
            
            item.CreatedOn = CreatedOn;
            
            item.ModifiedOn = ModifiedOn;
            
            item.BillFortheMonth = BillFortheMonth;
            
            item.AmountPayable = AmountPayable;
            
            item.AmountPayableAfterDueDate = AmountPayableAfterDueDate;
            
            item.DueDate = DueDate;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int DetectionBillID,string DetectionBillNo,int? MeterID,int? ConsumerID,int? NoOfMonths,decimal? PerMonthAmount,bool? IsPaid,DateTime? CreatedOn,DateTime? ModifiedOn,string BillFortheMonth,decimal? AmountPayable,decimal? AmountPayableAfterDueDate,DateTime? DueDate)
	    {
		    TblDetectionBill item = new TblDetectionBill();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.DetectionBillID = DetectionBillID;
				
			item.DetectionBillNo = DetectionBillNo;
				
			item.MeterID = MeterID;
				
			item.ConsumerID = ConsumerID;
				
			item.NoOfMonths = NoOfMonths;
				
			item.PerMonthAmount = PerMonthAmount;
				
			item.IsPaid = IsPaid;
				
			item.CreatedOn = CreatedOn;
				
			item.ModifiedOn = ModifiedOn;
				
			item.BillFortheMonth = BillFortheMonth;
				
			item.AmountPayable = AmountPayable;
				
			item.AmountPayableAfterDueDate = AmountPayableAfterDueDate;
				
			item.DueDate = DueDate;
				
	        item.Save(UserName);
	    }
    }
}
