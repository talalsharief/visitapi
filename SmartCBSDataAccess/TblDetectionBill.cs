using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SmartCBSDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblDetectionBill class.
	/// </summary>
    [Serializable]
	public partial class TblDetectionBillCollection : ActiveList<TblDetectionBill, TblDetectionBillCollection>
	{	   
		public TblDetectionBillCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblDetectionBillCollection</returns>
		public TblDetectionBillCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblDetectionBill o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblDetectionBill table.
	/// </summary>
	[Serializable]
	public partial class TblDetectionBill : ActiveRecord<TblDetectionBill>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblDetectionBill()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblDetectionBill(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblDetectionBill(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblDetectionBill(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblDetectionBill", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDetectionBillID = new TableSchema.TableColumn(schema);
				colvarDetectionBillID.ColumnName = "DetectionBillID";
				colvarDetectionBillID.DataType = DbType.Int32;
				colvarDetectionBillID.MaxLength = 0;
				colvarDetectionBillID.AutoIncrement = true;
				colvarDetectionBillID.IsNullable = false;
				colvarDetectionBillID.IsPrimaryKey = true;
				colvarDetectionBillID.IsForeignKey = false;
				colvarDetectionBillID.IsReadOnly = false;
				colvarDetectionBillID.DefaultSetting = @"";
				colvarDetectionBillID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetectionBillID);
				
				TableSchema.TableColumn colvarDetectionBillNo = new TableSchema.TableColumn(schema);
				colvarDetectionBillNo.ColumnName = "DetectionBillNo";
				colvarDetectionBillNo.DataType = DbType.AnsiString;
				colvarDetectionBillNo.MaxLength = 50;
				colvarDetectionBillNo.AutoIncrement = false;
				colvarDetectionBillNo.IsNullable = true;
				colvarDetectionBillNo.IsPrimaryKey = false;
				colvarDetectionBillNo.IsForeignKey = false;
				colvarDetectionBillNo.IsReadOnly = false;
				colvarDetectionBillNo.DefaultSetting = @"";
				colvarDetectionBillNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetectionBillNo);
				
				TableSchema.TableColumn colvarMeterID = new TableSchema.TableColumn(schema);
				colvarMeterID.ColumnName = "MeterID";
				colvarMeterID.DataType = DbType.Int32;
				colvarMeterID.MaxLength = 0;
				colvarMeterID.AutoIncrement = false;
				colvarMeterID.IsNullable = true;
				colvarMeterID.IsPrimaryKey = false;
				colvarMeterID.IsForeignKey = true;
				colvarMeterID.IsReadOnly = false;
				colvarMeterID.DefaultSetting = @"";
				
					colvarMeterID.ForeignKeyTableName = "TblMeter";
				schema.Columns.Add(colvarMeterID);
				
				TableSchema.TableColumn colvarConsumerID = new TableSchema.TableColumn(schema);
				colvarConsumerID.ColumnName = "ConsumerID";
				colvarConsumerID.DataType = DbType.Int32;
				colvarConsumerID.MaxLength = 0;
				colvarConsumerID.AutoIncrement = false;
				colvarConsumerID.IsNullable = true;
				colvarConsumerID.IsPrimaryKey = false;
				colvarConsumerID.IsForeignKey = true;
				colvarConsumerID.IsReadOnly = false;
				colvarConsumerID.DefaultSetting = @"";
				
					colvarConsumerID.ForeignKeyTableName = "TblConsumer";
				schema.Columns.Add(colvarConsumerID);
				
				TableSchema.TableColumn colvarNoOfMonths = new TableSchema.TableColumn(schema);
				colvarNoOfMonths.ColumnName = "NoOfMonths";
				colvarNoOfMonths.DataType = DbType.Int32;
				colvarNoOfMonths.MaxLength = 0;
				colvarNoOfMonths.AutoIncrement = false;
				colvarNoOfMonths.IsNullable = true;
				colvarNoOfMonths.IsPrimaryKey = false;
				colvarNoOfMonths.IsForeignKey = false;
				colvarNoOfMonths.IsReadOnly = false;
				colvarNoOfMonths.DefaultSetting = @"";
				colvarNoOfMonths.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoOfMonths);
				
				TableSchema.TableColumn colvarPerMonthAmount = new TableSchema.TableColumn(schema);
				colvarPerMonthAmount.ColumnName = "PerMonthAmount";
				colvarPerMonthAmount.DataType = DbType.Decimal;
				colvarPerMonthAmount.MaxLength = 0;
				colvarPerMonthAmount.AutoIncrement = false;
				colvarPerMonthAmount.IsNullable = true;
				colvarPerMonthAmount.IsPrimaryKey = false;
				colvarPerMonthAmount.IsForeignKey = false;
				colvarPerMonthAmount.IsReadOnly = false;
				colvarPerMonthAmount.DefaultSetting = @"";
				colvarPerMonthAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPerMonthAmount);
				
				TableSchema.TableColumn colvarIsPaid = new TableSchema.TableColumn(schema);
				colvarIsPaid.ColumnName = "IsPaid";
				colvarIsPaid.DataType = DbType.Boolean;
				colvarIsPaid.MaxLength = 0;
				colvarIsPaid.AutoIncrement = false;
				colvarIsPaid.IsNullable = true;
				colvarIsPaid.IsPrimaryKey = false;
				colvarIsPaid.IsForeignKey = false;
				colvarIsPaid.IsReadOnly = false;
				colvarIsPaid.DefaultSetting = @"";
				colvarIsPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPaid);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarBillFortheMonth = new TableSchema.TableColumn(schema);
				colvarBillFortheMonth.ColumnName = "BillFortheMonth";
				colvarBillFortheMonth.DataType = DbType.AnsiString;
				colvarBillFortheMonth.MaxLength = 50;
				colvarBillFortheMonth.AutoIncrement = false;
				colvarBillFortheMonth.IsNullable = true;
				colvarBillFortheMonth.IsPrimaryKey = false;
				colvarBillFortheMonth.IsForeignKey = false;
				colvarBillFortheMonth.IsReadOnly = false;
				colvarBillFortheMonth.DefaultSetting = @"";
				colvarBillFortheMonth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillFortheMonth);
				
				TableSchema.TableColumn colvarAmountPayable = new TableSchema.TableColumn(schema);
				colvarAmountPayable.ColumnName = "AmountPayable";
				colvarAmountPayable.DataType = DbType.Decimal;
				colvarAmountPayable.MaxLength = 0;
				colvarAmountPayable.AutoIncrement = false;
				colvarAmountPayable.IsNullable = true;
				colvarAmountPayable.IsPrimaryKey = false;
				colvarAmountPayable.IsForeignKey = false;
				colvarAmountPayable.IsReadOnly = false;
				colvarAmountPayable.DefaultSetting = @"";
				colvarAmountPayable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmountPayable);
				
				TableSchema.TableColumn colvarAmountPayableAfterDueDate = new TableSchema.TableColumn(schema);
				colvarAmountPayableAfterDueDate.ColumnName = "AmountPayableAfterDueDate";
				colvarAmountPayableAfterDueDate.DataType = DbType.Decimal;
				colvarAmountPayableAfterDueDate.MaxLength = 0;
				colvarAmountPayableAfterDueDate.AutoIncrement = false;
				colvarAmountPayableAfterDueDate.IsNullable = true;
				colvarAmountPayableAfterDueDate.IsPrimaryKey = false;
				colvarAmountPayableAfterDueDate.IsForeignKey = false;
				colvarAmountPayableAfterDueDate.IsReadOnly = false;
				colvarAmountPayableAfterDueDate.DefaultSetting = @"";
				colvarAmountPayableAfterDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmountPayableAfterDueDate);
				
				TableSchema.TableColumn colvarDueDate = new TableSchema.TableColumn(schema);
				colvarDueDate.ColumnName = "DueDate";
				colvarDueDate.DataType = DbType.DateTime;
				colvarDueDate.MaxLength = 0;
				colvarDueDate.AutoIncrement = false;
				colvarDueDate.IsNullable = true;
				colvarDueDate.IsPrimaryKey = false;
				colvarDueDate.IsForeignKey = false;
				colvarDueDate.IsReadOnly = false;
				colvarDueDate.DefaultSetting = @"";
				colvarDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDueDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblDetectionBill",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DetectionBillID")]
		[Bindable(true)]
		public int DetectionBillID 
		{
			get { return GetColumnValue<int>(Columns.DetectionBillID); }
			set { SetColumnValue(Columns.DetectionBillID, value); }
		}
		  
		[XmlAttribute("DetectionBillNo")]
		[Bindable(true)]
		public string DetectionBillNo 
		{
			get { return GetColumnValue<string>(Columns.DetectionBillNo); }
			set { SetColumnValue(Columns.DetectionBillNo, value); }
		}
		  
		[XmlAttribute("MeterID")]
		[Bindable(true)]
		public int? MeterID 
		{
			get { return GetColumnValue<int?>(Columns.MeterID); }
			set { SetColumnValue(Columns.MeterID, value); }
		}
		  
		[XmlAttribute("ConsumerID")]
		[Bindable(true)]
		public int? ConsumerID 
		{
			get { return GetColumnValue<int?>(Columns.ConsumerID); }
			set { SetColumnValue(Columns.ConsumerID, value); }
		}
		  
		[XmlAttribute("NoOfMonths")]
		[Bindable(true)]
		public int? NoOfMonths 
		{
			get { return GetColumnValue<int?>(Columns.NoOfMonths); }
			set { SetColumnValue(Columns.NoOfMonths, value); }
		}
		  
		[XmlAttribute("PerMonthAmount")]
		[Bindable(true)]
		public decimal? PerMonthAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.PerMonthAmount); }
			set { SetColumnValue(Columns.PerMonthAmount, value); }
		}
		  
		[XmlAttribute("IsPaid")]
		[Bindable(true)]
		public bool? IsPaid 
		{
			get { return GetColumnValue<bool?>(Columns.IsPaid); }
			set { SetColumnValue(Columns.IsPaid, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime? CreatedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime? ModifiedOn 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("BillFortheMonth")]
		[Bindable(true)]
		public string BillFortheMonth 
		{
			get { return GetColumnValue<string>(Columns.BillFortheMonth); }
			set { SetColumnValue(Columns.BillFortheMonth, value); }
		}
		  
		[XmlAttribute("AmountPayable")]
		[Bindable(true)]
		public decimal? AmountPayable 
		{
			get { return GetColumnValue<decimal?>(Columns.AmountPayable); }
			set { SetColumnValue(Columns.AmountPayable, value); }
		}
		  
		[XmlAttribute("AmountPayableAfterDueDate")]
		[Bindable(true)]
		public decimal? AmountPayableAfterDueDate 
		{
			get { return GetColumnValue<decimal?>(Columns.AmountPayableAfterDueDate); }
			set { SetColumnValue(Columns.AmountPayableAfterDueDate, value); }
		}
		  
		[XmlAttribute("DueDate")]
		[Bindable(true)]
		public DateTime? DueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DueDate); }
			set { SetColumnValue(Columns.DueDate, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public SmartCBSDataAccess.TblDetectionBillPaymentCollection TblDetectionBillPaymentRecords()
		{
			return new SmartCBSDataAccess.TblDetectionBillPaymentCollection().Where(TblDetectionBillPayment.Columns.DetectionBillID, DetectionBillID).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblConsumer ActiveRecord object related to this TblDetectionBill
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblConsumer TblConsumer
		{
			get { return SmartCBSDataAccess.TblConsumer.FetchByID(this.ConsumerID); }
			set { SetColumnValue("ConsumerID", value.CunsumerID); }
		}
		
		
		/// <summary>
		/// Returns a TblMeter ActiveRecord object related to this TblDetectionBill
		/// 
		/// </summary>
		public SmartCBSDataAccess.TblMeter TblMeter
		{
			get { return SmartCBSDataAccess.TblMeter.FetchByID(this.MeterID); }
			set { SetColumnValue("MeterID", value.MeterID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDetectionBillNo,int? varMeterID,int? varConsumerID,int? varNoOfMonths,decimal? varPerMonthAmount,bool? varIsPaid,DateTime? varCreatedOn,DateTime? varModifiedOn,string varBillFortheMonth,decimal? varAmountPayable,decimal? varAmountPayableAfterDueDate,DateTime? varDueDate)
		{
			TblDetectionBill item = new TblDetectionBill();
			
			item.DetectionBillNo = varDetectionBillNo;
			
			item.MeterID = varMeterID;
			
			item.ConsumerID = varConsumerID;
			
			item.NoOfMonths = varNoOfMonths;
			
			item.PerMonthAmount = varPerMonthAmount;
			
			item.IsPaid = varIsPaid;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedOn = varModifiedOn;
			
			item.BillFortheMonth = varBillFortheMonth;
			
			item.AmountPayable = varAmountPayable;
			
			item.AmountPayableAfterDueDate = varAmountPayableAfterDueDate;
			
			item.DueDate = varDueDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDetectionBillID,string varDetectionBillNo,int? varMeterID,int? varConsumerID,int? varNoOfMonths,decimal? varPerMonthAmount,bool? varIsPaid,DateTime? varCreatedOn,DateTime? varModifiedOn,string varBillFortheMonth,decimal? varAmountPayable,decimal? varAmountPayableAfterDueDate,DateTime? varDueDate)
		{
			TblDetectionBill item = new TblDetectionBill();
			
				item.DetectionBillID = varDetectionBillID;
			
				item.DetectionBillNo = varDetectionBillNo;
			
				item.MeterID = varMeterID;
			
				item.ConsumerID = varConsumerID;
			
				item.NoOfMonths = varNoOfMonths;
			
				item.PerMonthAmount = varPerMonthAmount;
			
				item.IsPaid = varIsPaid;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedOn = varModifiedOn;
			
				item.BillFortheMonth = varBillFortheMonth;
			
				item.AmountPayable = varAmountPayable;
			
				item.AmountPayableAfterDueDate = varAmountPayableAfterDueDate;
			
				item.DueDate = varDueDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DetectionBillIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DetectionBillNoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MeterIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsumerIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NoOfMonthsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PerMonthAmountColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPaidColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn BillFortheMonthColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountPayableColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountPayableAfterDueDateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DueDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DetectionBillID = @"DetectionBillID";
			 public static string DetectionBillNo = @"DetectionBillNo";
			 public static string MeterID = @"MeterID";
			 public static string ConsumerID = @"ConsumerID";
			 public static string NoOfMonths = @"NoOfMonths";
			 public static string PerMonthAmount = @"PerMonthAmount";
			 public static string IsPaid = @"IsPaid";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string BillFortheMonth = @"BillFortheMonth";
			 public static string AmountPayable = @"AmountPayable";
			 public static string AmountPayableAfterDueDate = @"AmountPayableAfterDueDate";
			 public static string DueDate = @"DueDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
