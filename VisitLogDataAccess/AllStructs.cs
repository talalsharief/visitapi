using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VisitLogDataAccess
{
	#region Tables Struct
	public partial struct Tables
	{
		
		public static readonly string ListReport = @"ListReport";
        
		public static readonly string ListReportDetail = @"ListReportDetail";
        
		public static readonly string Privillage = @"Privillage";
        
		public static readonly string RolePrivillage = @"RolePrivillage";
        
		public static readonly string SystemLogging = @"SystemLogging";
        
		public static readonly string TblActivity = @"tblActivity";
        
		public static readonly string TblAssignPrivillage = @"TblAssignPrivillage";
        
		public static readonly string TblBranch = @"TblBranch";
        
		public static readonly string TblCurrency = @"tblCurrency";
        
		public static readonly string TblDesignation = @"TblDesignation";
        
		public static readonly string TblEmployee = @"tblEmployee";
        
		public static readonly string TblException = @"tblException";
        
		public static readonly string TblModule = @"tblModule";
        
		public static readonly string TblProduct = @"tblProduct";
        
		public static readonly string TblSystemLogging = @"tblSystemLogging";
        
		public static readonly string TblSystemParam = @"tblSystemParams";
        
		public static readonly string UserLogin = @"UserLogin";
        
		public static readonly string UserMenu = @"UserMenu";
        
		public static readonly string UserRole = @"UserRole";
        
	}
	#endregion
    #region Schemas
    public partial class Schemas {
		
		public static TableSchema.Table ListReport
		{
            get { return DataService.GetSchema("ListReport", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table ListReportDetail
		{
            get { return DataService.GetSchema("ListReportDetail", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table Privillage
		{
            get { return DataService.GetSchema("Privillage", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table RolePrivillage
		{
            get { return DataService.GetSchema("RolePrivillage", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table SystemLogging
		{
            get { return DataService.GetSchema("SystemLogging", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblActivity
		{
            get { return DataService.GetSchema("tblActivity", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblAssignPrivillage
		{
            get { return DataService.GetSchema("TblAssignPrivillage", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblBranch
		{
            get { return DataService.GetSchema("TblBranch", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblCurrency
		{
            get { return DataService.GetSchema("tblCurrency", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblDesignation
		{
            get { return DataService.GetSchema("TblDesignation", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblEmployee
		{
            get { return DataService.GetSchema("tblEmployee", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblException
		{
            get { return DataService.GetSchema("tblException", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblModule
		{
            get { return DataService.GetSchema("tblModule", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblProduct
		{
            get { return DataService.GetSchema("tblProduct", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblSystemLogging
		{
            get { return DataService.GetSchema("tblSystemLogging", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table TblSystemParam
		{
            get { return DataService.GetSchema("tblSystemParams", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table UserLogin
		{
            get { return DataService.GetSchema("UserLogin", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table UserMenu
		{
            get { return DataService.GetSchema("UserMenu", "PrimaryProvider"); }
		}
        
		public static TableSchema.Table UserRole
		{
            get { return DataService.GetSchema("UserRole", "PrimaryProvider"); }
		}
        
	
    }
    #endregion
    #region View Struct
    public partial struct Views 
    {
		
		public static readonly string VwAssignPrivillage = @"VwAssignPrivillage";
        
		public static readonly string VwRolePrivillage = @"vwRolePrivillage";
        
		public static readonly string VwUserLogin = @"VwUserLogin";
        
		public static readonly string VwUserMenu = @"VwUserMenu";
        
    }
    #endregion
    
    #region Query Factories
	public static partial class DB
	{
        public static DataProvider _provider = DataService.Providers["PrimaryProvider"];
        static ISubSonicRepository _repository;
        public static ISubSonicRepository Repository 
        {
            get 
            {
                if (_repository == null)
                    return new SubSonicRepository(_provider);
                return _repository; 
            }
            set { _repository = value; }
        }
        public static Select SelectAllColumnsFrom<T>() where T : RecordBase<T>, new()
	    {
            return Repository.SelectAllColumnsFrom<T>();
	    }
	    public static Select Select()
	    {
            return Repository.Select();
	    }
	    
		public static Select Select(params string[] columns)
		{
            return Repository.Select(columns);
        }
	    
		public static Select Select(params Aggregate[] aggregates)
		{
            return Repository.Select(aggregates);
        }
   
	    public static Update Update<T>() where T : RecordBase<T>, new()
	    {
            return Repository.Update<T>();
	    }
	    
	    public static Insert Insert()
	    {
            return Repository.Insert();
	    }
	    
	    public static Delete Delete()
	    {
            return Repository.Delete();
	    }
	    
	    public static InlineQuery Query()
	    {
            return Repository.Query();
	    }
	    	    
	    
	}
    #endregion
    
}
#region Databases
public partial struct Databases 
{
	
	public static readonly string PrimaryProvider = @"PrimaryProvider";
    
}
#endregion