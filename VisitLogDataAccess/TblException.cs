using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VisitLogDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblException class.
	/// </summary>
    [Serializable]
	public partial class TblExceptionCollection : ActiveList<TblException, TblExceptionCollection>
	{	   
		public TblExceptionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblExceptionCollection</returns>
		public TblExceptionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblException o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblException table.
	/// </summary>
	[Serializable]
	public partial class TblException : ActiveRecord<TblException>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblException()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblException(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblException(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblException(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblException", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarExceptionID = new TableSchema.TableColumn(schema);
				colvarExceptionID.ColumnName = "ExceptionID";
				colvarExceptionID.DataType = DbType.Int32;
				colvarExceptionID.MaxLength = 0;
				colvarExceptionID.AutoIncrement = true;
				colvarExceptionID.IsNullable = false;
				colvarExceptionID.IsPrimaryKey = true;
				colvarExceptionID.IsForeignKey = false;
				colvarExceptionID.IsReadOnly = false;
				colvarExceptionID.DefaultSetting = @"";
				colvarExceptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExceptionID);
				
				TableSchema.TableColumn colvarActivity = new TableSchema.TableColumn(schema);
				colvarActivity.ColumnName = "Activity";
				colvarActivity.DataType = DbType.AnsiString;
				colvarActivity.MaxLength = 200;
				colvarActivity.AutoIncrement = false;
				colvarActivity.IsNullable = true;
				colvarActivity.IsPrimaryKey = false;
				colvarActivity.IsForeignKey = false;
				colvarActivity.IsReadOnly = false;
				colvarActivity.DefaultSetting = @"";
				colvarActivity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivity);
				
				TableSchema.TableColumn colvarStackTrace = new TableSchema.TableColumn(schema);
				colvarStackTrace.ColumnName = "StackTrace";
				colvarStackTrace.DataType = DbType.AnsiString;
				colvarStackTrace.MaxLength = 200;
				colvarStackTrace.AutoIncrement = false;
				colvarStackTrace.IsNullable = true;
				colvarStackTrace.IsPrimaryKey = false;
				colvarStackTrace.IsForeignKey = false;
				colvarStackTrace.IsReadOnly = false;
				colvarStackTrace.DefaultSetting = @"";
				colvarStackTrace.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStackTrace);
				
				TableSchema.TableColumn colvarErrorMethod = new TableSchema.TableColumn(schema);
				colvarErrorMethod.ColumnName = "ErrorMethod";
				colvarErrorMethod.DataType = DbType.AnsiString;
				colvarErrorMethod.MaxLength = 50;
				colvarErrorMethod.AutoIncrement = false;
				colvarErrorMethod.IsNullable = true;
				colvarErrorMethod.IsPrimaryKey = false;
				colvarErrorMethod.IsForeignKey = false;
				colvarErrorMethod.IsReadOnly = false;
				colvarErrorMethod.DefaultSetting = @"";
				colvarErrorMethod.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrorMethod);
				
				TableSchema.TableColumn colvarException = new TableSchema.TableColumn(schema);
				colvarException.ColumnName = "Exception";
				colvarException.DataType = DbType.AnsiString;
				colvarException.MaxLength = -1;
				colvarException.AutoIncrement = false;
				colvarException.IsNullable = true;
				colvarException.IsPrimaryKey = false;
				colvarException.IsForeignKey = false;
				colvarException.IsReadOnly = false;
				colvarException.DefaultSetting = @"";
				colvarException.ForeignKeyTableName = "";
				schema.Columns.Add(colvarException);
				
				TableSchema.TableColumn colvarCurrentUserID = new TableSchema.TableColumn(schema);
				colvarCurrentUserID.ColumnName = "CurrentUserID";
				colvarCurrentUserID.DataType = DbType.Int32;
				colvarCurrentUserID.MaxLength = 0;
				colvarCurrentUserID.AutoIncrement = false;
				colvarCurrentUserID.IsNullable = true;
				colvarCurrentUserID.IsPrimaryKey = false;
				colvarCurrentUserID.IsForeignKey = true;
				colvarCurrentUserID.IsReadOnly = false;
				colvarCurrentUserID.DefaultSetting = @"";
				
					colvarCurrentUserID.ForeignKeyTableName = "UserLogin";
				schema.Columns.Add(colvarCurrentUserID);
				
				TableSchema.TableColumn colvarExceptionDateTime = new TableSchema.TableColumn(schema);
				colvarExceptionDateTime.ColumnName = "ExceptionDateTime";
				colvarExceptionDateTime.DataType = DbType.DateTime;
				colvarExceptionDateTime.MaxLength = 0;
				colvarExceptionDateTime.AutoIncrement = false;
				colvarExceptionDateTime.IsNullable = true;
				colvarExceptionDateTime.IsPrimaryKey = false;
				colvarExceptionDateTime.IsForeignKey = false;
				colvarExceptionDateTime.IsReadOnly = false;
				colvarExceptionDateTime.DefaultSetting = @"";
				colvarExceptionDateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExceptionDateTime);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("tblException",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ExceptionID")]
		[Bindable(true)]
		public int ExceptionID 
		{
			get { return GetColumnValue<int>(Columns.ExceptionID); }
			set { SetColumnValue(Columns.ExceptionID, value); }
		}
		  
		[XmlAttribute("Activity")]
		[Bindable(true)]
		public string Activity 
		{
			get { return GetColumnValue<string>(Columns.Activity); }
			set { SetColumnValue(Columns.Activity, value); }
		}
		  
		[XmlAttribute("StackTrace")]
		[Bindable(true)]
		public string StackTrace 
		{
			get { return GetColumnValue<string>(Columns.StackTrace); }
			set { SetColumnValue(Columns.StackTrace, value); }
		}
		  
		[XmlAttribute("ErrorMethod")]
		[Bindable(true)]
		public string ErrorMethod 
		{
			get { return GetColumnValue<string>(Columns.ErrorMethod); }
			set { SetColumnValue(Columns.ErrorMethod, value); }
		}
		  
		[XmlAttribute("Exception")]
		[Bindable(true)]
		public string Exception 
		{
			get { return GetColumnValue<string>(Columns.Exception); }
			set { SetColumnValue(Columns.Exception, value); }
		}
		  
		[XmlAttribute("CurrentUserID")]
		[Bindable(true)]
		public int? CurrentUserID 
		{
			get { return GetColumnValue<int?>(Columns.CurrentUserID); }
			set { SetColumnValue(Columns.CurrentUserID, value); }
		}
		  
		[XmlAttribute("ExceptionDateTime")]
		[Bindable(true)]
		public DateTime? ExceptionDateTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.ExceptionDateTime); }
			set { SetColumnValue(Columns.ExceptionDateTime, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a UserLogin ActiveRecord object related to this TblException
		/// 
		/// </summary>
		public VisitLogDataAccess.UserLogin UserLogin
		{
			get { return VisitLogDataAccess.UserLogin.FetchByID(this.CurrentUserID); }
			set { SetColumnValue("CurrentUserID", value.UserLoginId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varActivity,string varStackTrace,string varErrorMethod,string varException,int? varCurrentUserID,DateTime? varExceptionDateTime)
		{
			TblException item = new TblException();
			
			item.Activity = varActivity;
			
			item.StackTrace = varStackTrace;
			
			item.ErrorMethod = varErrorMethod;
			
			item.Exception = varException;
			
			item.CurrentUserID = varCurrentUserID;
			
			item.ExceptionDateTime = varExceptionDateTime;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varExceptionID,string varActivity,string varStackTrace,string varErrorMethod,string varException,int? varCurrentUserID,DateTime? varExceptionDateTime)
		{
			TblException item = new TblException();
			
				item.ExceptionID = varExceptionID;
			
				item.Activity = varActivity;
			
				item.StackTrace = varStackTrace;
			
				item.ErrorMethod = varErrorMethod;
			
				item.Exception = varException;
			
				item.CurrentUserID = varCurrentUserID;
			
				item.ExceptionDateTime = varExceptionDateTime;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ExceptionIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivityColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn StackTraceColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ErrorMethodColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ExceptionColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentUserIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ExceptionDateTimeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ExceptionID = @"ExceptionID";
			 public static string Activity = @"Activity";
			 public static string StackTrace = @"StackTrace";
			 public static string ErrorMethod = @"ErrorMethod";
			 public static string Exception = @"Exception";
			 public static string CurrentUserID = @"CurrentUserID";
			 public static string ExceptionDateTime = @"ExceptionDateTime";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
