using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VisitLogDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the ListReportDetail class.
	/// </summary>
    [Serializable]
	public partial class ListReportDetailCollection : ActiveList<ListReportDetail, ListReportDetailCollection>
	{	   
		public ListReportDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ListReportDetailCollection</returns>
		public ListReportDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ListReportDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ListReportDetail table.
	/// </summary>
	[Serializable]
	public partial class ListReportDetail : ActiveRecord<ListReportDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ListReportDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ListReportDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ListReportDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ListReportDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ListReportDetail", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarListReportDetailId = new TableSchema.TableColumn(schema);
				colvarListReportDetailId.ColumnName = "ListReportDetailId";
				colvarListReportDetailId.DataType = DbType.Int32;
				colvarListReportDetailId.MaxLength = 0;
				colvarListReportDetailId.AutoIncrement = true;
				colvarListReportDetailId.IsNullable = false;
				colvarListReportDetailId.IsPrimaryKey = true;
				colvarListReportDetailId.IsForeignKey = false;
				colvarListReportDetailId.IsReadOnly = false;
				colvarListReportDetailId.DefaultSetting = @"";
				colvarListReportDetailId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarListReportDetailId);
				
				TableSchema.TableColumn colvarFieldName = new TableSchema.TableColumn(schema);
				colvarFieldName.ColumnName = "FieldName";
				colvarFieldName.DataType = DbType.AnsiString;
				colvarFieldName.MaxLength = 50;
				colvarFieldName.AutoIncrement = false;
				colvarFieldName.IsNullable = true;
				colvarFieldName.IsPrimaryKey = false;
				colvarFieldName.IsForeignKey = false;
				colvarFieldName.IsReadOnly = false;
				colvarFieldName.DefaultSetting = @"";
				colvarFieldName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFieldName);
				
				TableSchema.TableColumn colvarFieldAlias = new TableSchema.TableColumn(schema);
				colvarFieldAlias.ColumnName = "FieldAlias";
				colvarFieldAlias.DataType = DbType.AnsiString;
				colvarFieldAlias.MaxLength = 50;
				colvarFieldAlias.AutoIncrement = false;
				colvarFieldAlias.IsNullable = true;
				colvarFieldAlias.IsPrimaryKey = false;
				colvarFieldAlias.IsForeignKey = false;
				colvarFieldAlias.IsReadOnly = false;
				colvarFieldAlias.DefaultSetting = @"";
				colvarFieldAlias.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFieldAlias);
				
				TableSchema.TableColumn colvarIsGroupBy = new TableSchema.TableColumn(schema);
				colvarIsGroupBy.ColumnName = "IsGroupBy";
				colvarIsGroupBy.DataType = DbType.Boolean;
				colvarIsGroupBy.MaxLength = 0;
				colvarIsGroupBy.AutoIncrement = false;
				colvarIsGroupBy.IsNullable = false;
				colvarIsGroupBy.IsPrimaryKey = false;
				colvarIsGroupBy.IsForeignKey = false;
				colvarIsGroupBy.IsReadOnly = false;
				colvarIsGroupBy.DefaultSetting = @"";
				colvarIsGroupBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsGroupBy);
				
				TableSchema.TableColumn colvarListReportId = new TableSchema.TableColumn(schema);
				colvarListReportId.ColumnName = "ListReportId";
				colvarListReportId.DataType = DbType.Int32;
				colvarListReportId.MaxLength = 0;
				colvarListReportId.AutoIncrement = false;
				colvarListReportId.IsNullable = true;
				colvarListReportId.IsPrimaryKey = false;
				colvarListReportId.IsForeignKey = true;
				colvarListReportId.IsReadOnly = false;
				colvarListReportId.DefaultSetting = @"";
				
					colvarListReportId.ForeignKeyTableName = "ListReport";
				schema.Columns.Add(colvarListReportId);
				
				TableSchema.TableColumn colvarGroupFooter = new TableSchema.TableColumn(schema);
				colvarGroupFooter.ColumnName = "GroupFooter";
				colvarGroupFooter.DataType = DbType.AnsiString;
				colvarGroupFooter.MaxLength = 50;
				colvarGroupFooter.AutoIncrement = false;
				colvarGroupFooter.IsNullable = true;
				colvarGroupFooter.IsPrimaryKey = false;
				colvarGroupFooter.IsForeignKey = false;
				colvarGroupFooter.IsReadOnly = false;
				colvarGroupFooter.DefaultSetting = @"";
				colvarGroupFooter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGroupFooter);
				
				TableSchema.TableColumn colvarReportFooter = new TableSchema.TableColumn(schema);
				colvarReportFooter.ColumnName = "ReportFooter";
				colvarReportFooter.DataType = DbType.AnsiString;
				colvarReportFooter.MaxLength = 50;
				colvarReportFooter.AutoIncrement = false;
				colvarReportFooter.IsNullable = true;
				colvarReportFooter.IsPrimaryKey = false;
				colvarReportFooter.IsForeignKey = false;
				colvarReportFooter.IsReadOnly = false;
				colvarReportFooter.DefaultSetting = @"";
				colvarReportFooter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportFooter);
				
				TableSchema.TableColumn colvarSequence = new TableSchema.TableColumn(schema);
				colvarSequence.ColumnName = "Sequence";
				colvarSequence.DataType = DbType.Int32;
				colvarSequence.MaxLength = 0;
				colvarSequence.AutoIncrement = false;
				colvarSequence.IsNullable = true;
				colvarSequence.IsPrimaryKey = false;
				colvarSequence.IsForeignKey = false;
				colvarSequence.IsReadOnly = false;
				colvarSequence.DefaultSetting = @"";
				colvarSequence.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSequence);
				
				TableSchema.TableColumn colvarWidth = new TableSchema.TableColumn(schema);
				colvarWidth.ColumnName = "Width";
				colvarWidth.DataType = DbType.Int32;
				colvarWidth.MaxLength = 0;
				colvarWidth.AutoIncrement = false;
				colvarWidth.IsNullable = true;
				colvarWidth.IsPrimaryKey = false;
				colvarWidth.IsForeignKey = false;
				colvarWidth.IsReadOnly = false;
				colvarWidth.DefaultSetting = @"";
				colvarWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWidth);
				
				TableSchema.TableColumn colvarPaddingLeft = new TableSchema.TableColumn(schema);
				colvarPaddingLeft.ColumnName = "PaddingLeft";
				colvarPaddingLeft.DataType = DbType.Int32;
				colvarPaddingLeft.MaxLength = 0;
				colvarPaddingLeft.AutoIncrement = false;
				colvarPaddingLeft.IsNullable = true;
				colvarPaddingLeft.IsPrimaryKey = false;
				colvarPaddingLeft.IsForeignKey = false;
				colvarPaddingLeft.IsReadOnly = false;
				colvarPaddingLeft.DefaultSetting = @"";
				colvarPaddingLeft.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaddingLeft);
				
				TableSchema.TableColumn colvarPaddingRight = new TableSchema.TableColumn(schema);
				colvarPaddingRight.ColumnName = "PaddingRight";
				colvarPaddingRight.DataType = DbType.Int32;
				colvarPaddingRight.MaxLength = 0;
				colvarPaddingRight.AutoIncrement = false;
				colvarPaddingRight.IsNullable = true;
				colvarPaddingRight.IsPrimaryKey = false;
				colvarPaddingRight.IsForeignKey = false;
				colvarPaddingRight.IsReadOnly = false;
				colvarPaddingRight.DefaultSetting = @"";
				colvarPaddingRight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaddingRight);
				
				TableSchema.TableColumn colvarAlignment = new TableSchema.TableColumn(schema);
				colvarAlignment.ColumnName = "Alignment";
				colvarAlignment.DataType = DbType.AnsiString;
				colvarAlignment.MaxLength = 50;
				colvarAlignment.AutoIncrement = false;
				colvarAlignment.IsNullable = true;
				colvarAlignment.IsPrimaryKey = false;
				colvarAlignment.IsForeignKey = false;
				colvarAlignment.IsReadOnly = false;
				colvarAlignment.DefaultSetting = @"";
				colvarAlignment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlignment);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("ListReportDetail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ListReportDetailId")]
		[Bindable(true)]
		public int ListReportDetailId 
		{
			get { return GetColumnValue<int>(Columns.ListReportDetailId); }
			set { SetColumnValue(Columns.ListReportDetailId, value); }
		}
		  
		[XmlAttribute("FieldName")]
		[Bindable(true)]
		public string FieldName 
		{
			get { return GetColumnValue<string>(Columns.FieldName); }
			set { SetColumnValue(Columns.FieldName, value); }
		}
		  
		[XmlAttribute("FieldAlias")]
		[Bindable(true)]
		public string FieldAlias 
		{
			get { return GetColumnValue<string>(Columns.FieldAlias); }
			set { SetColumnValue(Columns.FieldAlias, value); }
		}
		  
		[XmlAttribute("IsGroupBy")]
		[Bindable(true)]
		public bool IsGroupBy 
		{
			get { return GetColumnValue<bool>(Columns.IsGroupBy); }
			set { SetColumnValue(Columns.IsGroupBy, value); }
		}
		  
		[XmlAttribute("ListReportId")]
		[Bindable(true)]
		public int? ListReportId 
		{
			get { return GetColumnValue<int?>(Columns.ListReportId); }
			set { SetColumnValue(Columns.ListReportId, value); }
		}
		  
		[XmlAttribute("GroupFooter")]
		[Bindable(true)]
		public string GroupFooter 
		{
			get { return GetColumnValue<string>(Columns.GroupFooter); }
			set { SetColumnValue(Columns.GroupFooter, value); }
		}
		  
		[XmlAttribute("ReportFooter")]
		[Bindable(true)]
		public string ReportFooter 
		{
			get { return GetColumnValue<string>(Columns.ReportFooter); }
			set { SetColumnValue(Columns.ReportFooter, value); }
		}
		  
		[XmlAttribute("Sequence")]
		[Bindable(true)]
		public int? Sequence 
		{
			get { return GetColumnValue<int?>(Columns.Sequence); }
			set { SetColumnValue(Columns.Sequence, value); }
		}
		  
		[XmlAttribute("Width")]
		[Bindable(true)]
		public int? Width 
		{
			get { return GetColumnValue<int?>(Columns.Width); }
			set { SetColumnValue(Columns.Width, value); }
		}
		  
		[XmlAttribute("PaddingLeft")]
		[Bindable(true)]
		public int? PaddingLeft 
		{
			get { return GetColumnValue<int?>(Columns.PaddingLeft); }
			set { SetColumnValue(Columns.PaddingLeft, value); }
		}
		  
		[XmlAttribute("PaddingRight")]
		[Bindable(true)]
		public int? PaddingRight 
		{
			get { return GetColumnValue<int?>(Columns.PaddingRight); }
			set { SetColumnValue(Columns.PaddingRight, value); }
		}
		  
		[XmlAttribute("Alignment")]
		[Bindable(true)]
		public string Alignment 
		{
			get { return GetColumnValue<string>(Columns.Alignment); }
			set { SetColumnValue(Columns.Alignment, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a ListReport ActiveRecord object related to this ListReportDetail
		/// 
		/// </summary>
		public VisitLogDataAccess.ListReport ListReport
		{
			get { return VisitLogDataAccess.ListReport.FetchByID(this.ListReportId); }
			set { SetColumnValue("ListReportId", value.ListReportId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varFieldName,string varFieldAlias,bool varIsGroupBy,int? varListReportId,string varGroupFooter,string varReportFooter,int? varSequence,int? varWidth,int? varPaddingLeft,int? varPaddingRight,string varAlignment)
		{
			ListReportDetail item = new ListReportDetail();
			
			item.FieldName = varFieldName;
			
			item.FieldAlias = varFieldAlias;
			
			item.IsGroupBy = varIsGroupBy;
			
			item.ListReportId = varListReportId;
			
			item.GroupFooter = varGroupFooter;
			
			item.ReportFooter = varReportFooter;
			
			item.Sequence = varSequence;
			
			item.Width = varWidth;
			
			item.PaddingLeft = varPaddingLeft;
			
			item.PaddingRight = varPaddingRight;
			
			item.Alignment = varAlignment;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varListReportDetailId,string varFieldName,string varFieldAlias,bool varIsGroupBy,int? varListReportId,string varGroupFooter,string varReportFooter,int? varSequence,int? varWidth,int? varPaddingLeft,int? varPaddingRight,string varAlignment)
		{
			ListReportDetail item = new ListReportDetail();
			
				item.ListReportDetailId = varListReportDetailId;
			
				item.FieldName = varFieldName;
			
				item.FieldAlias = varFieldAlias;
			
				item.IsGroupBy = varIsGroupBy;
			
				item.ListReportId = varListReportId;
			
				item.GroupFooter = varGroupFooter;
			
				item.ReportFooter = varReportFooter;
			
				item.Sequence = varSequence;
			
				item.Width = varWidth;
			
				item.PaddingLeft = varPaddingLeft;
			
				item.PaddingRight = varPaddingRight;
			
				item.Alignment = varAlignment;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ListReportDetailIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FieldNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FieldAliasColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IsGroupByColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ListReportIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn GroupFooterColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ReportFooterColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SequenceColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn WidthColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PaddingLeftColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PaddingRightColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn AlignmentColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ListReportDetailId = @"ListReportDetailId";
			 public static string FieldName = @"FieldName";
			 public static string FieldAlias = @"FieldAlias";
			 public static string IsGroupBy = @"IsGroupBy";
			 public static string ListReportId = @"ListReportId";
			 public static string GroupFooter = @"GroupFooter";
			 public static string ReportFooter = @"ReportFooter";
			 public static string Sequence = @"Sequence";
			 public static string Width = @"Width";
			 public static string PaddingLeft = @"PaddingLeft";
			 public static string PaddingRight = @"PaddingRight";
			 public static string Alignment = @"Alignment";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
