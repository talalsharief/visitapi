using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VisitLogDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblAssignPrivillage class.
	/// </summary>
    [Serializable]
	public partial class TblAssignPrivillageCollection : ActiveList<TblAssignPrivillage, TblAssignPrivillageCollection>
	{	   
		public TblAssignPrivillageCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblAssignPrivillageCollection</returns>
		public TblAssignPrivillageCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblAssignPrivillage o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblAssignPrivillage table.
	/// </summary>
	[Serializable]
	public partial class TblAssignPrivillage : ActiveRecord<TblAssignPrivillage>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblAssignPrivillage()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblAssignPrivillage(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblAssignPrivillage(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblAssignPrivillage(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblAssignPrivillage", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPrivillagePageID = new TableSchema.TableColumn(schema);
				colvarPrivillagePageID.ColumnName = "PrivillagePageID";
				colvarPrivillagePageID.DataType = DbType.Int32;
				colvarPrivillagePageID.MaxLength = 0;
				colvarPrivillagePageID.AutoIncrement = true;
				colvarPrivillagePageID.IsNullable = false;
				colvarPrivillagePageID.IsPrimaryKey = true;
				colvarPrivillagePageID.IsForeignKey = false;
				colvarPrivillagePageID.IsReadOnly = false;
				colvarPrivillagePageID.DefaultSetting = @"";
				colvarPrivillagePageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrivillagePageID);
				
				TableSchema.TableColumn colvarPageName = new TableSchema.TableColumn(schema);
				colvarPageName.ColumnName = "PageName";
				colvarPageName.DataType = DbType.AnsiString;
				colvarPageName.MaxLength = 150;
				colvarPageName.AutoIncrement = false;
				colvarPageName.IsNullable = true;
				colvarPageName.IsPrimaryKey = false;
				colvarPageName.IsForeignKey = false;
				colvarPageName.IsReadOnly = false;
				colvarPageName.DefaultSetting = @"";
				colvarPageName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPageName);
				
				TableSchema.TableColumn colvarViewID = new TableSchema.TableColumn(schema);
				colvarViewID.ColumnName = "ViewID";
				colvarViewID.DataType = DbType.Int32;
				colvarViewID.MaxLength = 0;
				colvarViewID.AutoIncrement = false;
				colvarViewID.IsNullable = true;
				colvarViewID.IsPrimaryKey = false;
				colvarViewID.IsForeignKey = true;
				colvarViewID.IsReadOnly = false;
				colvarViewID.DefaultSetting = @"";
				
					colvarViewID.ForeignKeyTableName = "Privillage";
				schema.Columns.Add(colvarViewID);
				
				TableSchema.TableColumn colvarAddID = new TableSchema.TableColumn(schema);
				colvarAddID.ColumnName = "AddID";
				colvarAddID.DataType = DbType.Int32;
				colvarAddID.MaxLength = 0;
				colvarAddID.AutoIncrement = false;
				colvarAddID.IsNullable = true;
				colvarAddID.IsPrimaryKey = false;
				colvarAddID.IsForeignKey = true;
				colvarAddID.IsReadOnly = false;
				colvarAddID.DefaultSetting = @"";
				
					colvarAddID.ForeignKeyTableName = "Privillage";
				schema.Columns.Add(colvarAddID);
				
				TableSchema.TableColumn colvarEditID = new TableSchema.TableColumn(schema);
				colvarEditID.ColumnName = "EditID";
				colvarEditID.DataType = DbType.Int32;
				colvarEditID.MaxLength = 0;
				colvarEditID.AutoIncrement = false;
				colvarEditID.IsNullable = true;
				colvarEditID.IsPrimaryKey = false;
				colvarEditID.IsForeignKey = true;
				colvarEditID.IsReadOnly = false;
				colvarEditID.DefaultSetting = @"";
				
					colvarEditID.ForeignKeyTableName = "Privillage";
				schema.Columns.Add(colvarEditID);
				
				TableSchema.TableColumn colvarDeleteID = new TableSchema.TableColumn(schema);
				colvarDeleteID.ColumnName = "DeleteID";
				colvarDeleteID.DataType = DbType.Int32;
				colvarDeleteID.MaxLength = 0;
				colvarDeleteID.AutoIncrement = false;
				colvarDeleteID.IsNullable = true;
				colvarDeleteID.IsPrimaryKey = false;
				colvarDeleteID.IsForeignKey = true;
				colvarDeleteID.IsReadOnly = false;
				colvarDeleteID.DefaultSetting = @"";
				
					colvarDeleteID.ForeignKeyTableName = "Privillage";
				schema.Columns.Add(colvarDeleteID);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				TableSchema.TableColumn colvarModuleID = new TableSchema.TableColumn(schema);
				colvarModuleID.ColumnName = "ModuleID";
				colvarModuleID.DataType = DbType.Int32;
				colvarModuleID.MaxLength = 0;
				colvarModuleID.AutoIncrement = false;
				colvarModuleID.IsNullable = true;
				colvarModuleID.IsPrimaryKey = false;
				colvarModuleID.IsForeignKey = true;
				colvarModuleID.IsReadOnly = false;
				colvarModuleID.DefaultSetting = @"";
				
					colvarModuleID.ForeignKeyTableName = "tblModule";
				schema.Columns.Add(colvarModuleID);
				
				TableSchema.TableColumn colvarDisplayOrder = new TableSchema.TableColumn(schema);
				colvarDisplayOrder.ColumnName = "DisplayOrder";
				colvarDisplayOrder.DataType = DbType.Int32;
				colvarDisplayOrder.MaxLength = 0;
				colvarDisplayOrder.AutoIncrement = false;
				colvarDisplayOrder.IsNullable = true;
				colvarDisplayOrder.IsPrimaryKey = false;
				colvarDisplayOrder.IsForeignKey = false;
				colvarDisplayOrder.IsReadOnly = false;
				colvarDisplayOrder.DefaultSetting = @"";
				colvarDisplayOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDisplayOrder);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("TblAssignPrivillage",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PrivillagePageID")]
		[Bindable(true)]
		public int PrivillagePageID 
		{
			get { return GetColumnValue<int>(Columns.PrivillagePageID); }
			set { SetColumnValue(Columns.PrivillagePageID, value); }
		}
		  
		[XmlAttribute("PageName")]
		[Bindable(true)]
		public string PageName 
		{
			get { return GetColumnValue<string>(Columns.PageName); }
			set { SetColumnValue(Columns.PageName, value); }
		}
		  
		[XmlAttribute("ViewID")]
		[Bindable(true)]
		public int? ViewID 
		{
			get { return GetColumnValue<int?>(Columns.ViewID); }
			set { SetColumnValue(Columns.ViewID, value); }
		}
		  
		[XmlAttribute("AddID")]
		[Bindable(true)]
		public int? AddID 
		{
			get { return GetColumnValue<int?>(Columns.AddID); }
			set { SetColumnValue(Columns.AddID, value); }
		}
		  
		[XmlAttribute("EditID")]
		[Bindable(true)]
		public int? EditID 
		{
			get { return GetColumnValue<int?>(Columns.EditID); }
			set { SetColumnValue(Columns.EditID, value); }
		}
		  
		[XmlAttribute("DeleteID")]
		[Bindable(true)]
		public int? DeleteID 
		{
			get { return GetColumnValue<int?>(Columns.DeleteID); }
			set { SetColumnValue(Columns.DeleteID, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		  
		[XmlAttribute("ModuleID")]
		[Bindable(true)]
		public int? ModuleID 
		{
			get { return GetColumnValue<int?>(Columns.ModuleID); }
			set { SetColumnValue(Columns.ModuleID, value); }
		}
		  
		[XmlAttribute("DisplayOrder")]
		[Bindable(true)]
		public int? DisplayOrder 
		{
			get { return GetColumnValue<int?>(Columns.DisplayOrder); }
			set { SetColumnValue(Columns.DisplayOrder, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Privillage ActiveRecord object related to this TblAssignPrivillage
		/// 
		/// </summary>
		public VisitLogDataAccess.Privillage Privillage
		{
			get { return VisitLogDataAccess.Privillage.FetchByID(this.ViewID); }
			set { SetColumnValue("ViewID", value.PrivillageId); }
		}
		
		
		/// <summary>
		/// Returns a Privillage ActiveRecord object related to this TblAssignPrivillage
		/// 
		/// </summary>
		public VisitLogDataAccess.Privillage PrivillageToAddID
		{
			get { return VisitLogDataAccess.Privillage.FetchByID(this.AddID); }
			set { SetColumnValue("AddID", value.PrivillageId); }
		}
		
		
		/// <summary>
		/// Returns a Privillage ActiveRecord object related to this TblAssignPrivillage
		/// 
		/// </summary>
		public VisitLogDataAccess.Privillage PrivillageToEditID
		{
			get { return VisitLogDataAccess.Privillage.FetchByID(this.EditID); }
			set { SetColumnValue("EditID", value.PrivillageId); }
		}
		
		
		/// <summary>
		/// Returns a Privillage ActiveRecord object related to this TblAssignPrivillage
		/// 
		/// </summary>
		public VisitLogDataAccess.Privillage PrivillageToDeleteID
		{
			get { return VisitLogDataAccess.Privillage.FetchByID(this.DeleteID); }
			set { SetColumnValue("DeleteID", value.PrivillageId); }
		}
		
		
		/// <summary>
		/// Returns a TblModule ActiveRecord object related to this TblAssignPrivillage
		/// 
		/// </summary>
		public VisitLogDataAccess.TblModule TblModule
		{
			get { return VisitLogDataAccess.TblModule.FetchByID(this.ModuleID); }
			set { SetColumnValue("ModuleID", value.ModuleID); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPageName,int? varViewID,int? varAddID,int? varEditID,int? varDeleteID,bool? varIsActive,int? varModuleID,int? varDisplayOrder)
		{
			TblAssignPrivillage item = new TblAssignPrivillage();
			
			item.PageName = varPageName;
			
			item.ViewID = varViewID;
			
			item.AddID = varAddID;
			
			item.EditID = varEditID;
			
			item.DeleteID = varDeleteID;
			
			item.IsActive = varIsActive;
			
			item.ModuleID = varModuleID;
			
			item.DisplayOrder = varDisplayOrder;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPrivillagePageID,string varPageName,int? varViewID,int? varAddID,int? varEditID,int? varDeleteID,bool? varIsActive,int? varModuleID,int? varDisplayOrder)
		{
			TblAssignPrivillage item = new TblAssignPrivillage();
			
				item.PrivillagePageID = varPrivillagePageID;
			
				item.PageName = varPageName;
			
				item.ViewID = varViewID;
			
				item.AddID = varAddID;
			
				item.EditID = varEditID;
			
				item.DeleteID = varDeleteID;
			
				item.IsActive = varIsActive;
			
				item.ModuleID = varModuleID;
			
				item.DisplayOrder = varDisplayOrder;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PrivillagePageIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PageNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ViewIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AddIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn EditIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DeleteIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ModuleIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DisplayOrderColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PrivillagePageID = @"PrivillagePageID";
			 public static string PageName = @"PageName";
			 public static string ViewID = @"ViewID";
			 public static string AddID = @"AddID";
			 public static string EditID = @"EditID";
			 public static string DeleteID = @"DeleteID";
			 public static string IsActive = @"IsActive";
			 public static string ModuleID = @"ModuleID";
			 public static string DisplayOrder = @"DisplayOrder";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
