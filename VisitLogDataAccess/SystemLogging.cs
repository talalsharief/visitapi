using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VisitLogDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the SystemLogging class.
	/// </summary>
    [Serializable]
	public partial class SystemLoggingCollection : ActiveList<SystemLogging, SystemLoggingCollection>
	{	   
		public SystemLoggingCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SystemLoggingCollection</returns>
		public SystemLoggingCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SystemLogging o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SystemLogging table.
	/// </summary>
	[Serializable]
	public partial class SystemLogging : ActiveRecord<SystemLogging>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SystemLogging()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SystemLogging(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SystemLogging(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SystemLogging(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SystemLogging", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarLogID = new TableSchema.TableColumn(schema);
				colvarLogID.ColumnName = "LogID";
				colvarLogID.DataType = DbType.Int32;
				colvarLogID.MaxLength = 0;
				colvarLogID.AutoIncrement = true;
				colvarLogID.IsNullable = false;
				colvarLogID.IsPrimaryKey = true;
				colvarLogID.IsForeignKey = false;
				colvarLogID.IsReadOnly = false;
				colvarLogID.DefaultSetting = @"";
				colvarLogID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogID);
				
				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = true;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = true;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				
					colvarUserID.ForeignKeyTableName = "UserLogin";
				schema.Columns.Add(colvarUserID);
				
				TableSchema.TableColumn colvarLogTime = new TableSchema.TableColumn(schema);
				colvarLogTime.ColumnName = "LogTime";
				colvarLogTime.DataType = DbType.DateTime;
				colvarLogTime.MaxLength = 0;
				colvarLogTime.AutoIncrement = false;
				colvarLogTime.IsNullable = true;
				colvarLogTime.IsPrimaryKey = false;
				colvarLogTime.IsForeignKey = false;
				colvarLogTime.IsReadOnly = false;
				colvarLogTime.DefaultSetting = @"";
				colvarLogTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogTime);
				
				TableSchema.TableColumn colvarPageAccessed = new TableSchema.TableColumn(schema);
				colvarPageAccessed.ColumnName = "PageAccessed";
				colvarPageAccessed.DataType = DbType.AnsiString;
				colvarPageAccessed.MaxLength = 50;
				colvarPageAccessed.AutoIncrement = false;
				colvarPageAccessed.IsNullable = true;
				colvarPageAccessed.IsPrimaryKey = false;
				colvarPageAccessed.IsForeignKey = false;
				colvarPageAccessed.IsReadOnly = false;
				colvarPageAccessed.DefaultSetting = @"";
				colvarPageAccessed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPageAccessed);
				
				TableSchema.TableColumn colvarActivity = new TableSchema.TableColumn(schema);
				colvarActivity.ColumnName = "Activity";
				colvarActivity.DataType = DbType.AnsiString;
				colvarActivity.MaxLength = 250;
				colvarActivity.AutoIncrement = false;
				colvarActivity.IsNullable = true;
				colvarActivity.IsPrimaryKey = false;
				colvarActivity.IsForeignKey = false;
				colvarActivity.IsReadOnly = false;
				colvarActivity.DefaultSetting = @"";
				colvarActivity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivity);
				
				TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
				colvarIpAddress.ColumnName = "IpAddress";
				colvarIpAddress.DataType = DbType.AnsiString;
				colvarIpAddress.MaxLength = 50;
				colvarIpAddress.AutoIncrement = false;
				colvarIpAddress.IsNullable = true;
				colvarIpAddress.IsPrimaryKey = false;
				colvarIpAddress.IsForeignKey = false;
				colvarIpAddress.IsReadOnly = false;
				colvarIpAddress.DefaultSetting = @"";
				colvarIpAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpAddress);
				
				TableSchema.TableColumn colvarLocation = new TableSchema.TableColumn(schema);
				colvarLocation.ColumnName = "Location";
				colvarLocation.DataType = DbType.AnsiString;
				colvarLocation.MaxLength = 50;
				colvarLocation.AutoIncrement = false;
				colvarLocation.IsNullable = true;
				colvarLocation.IsPrimaryKey = false;
				colvarLocation.IsForeignKey = false;
				colvarLocation.IsReadOnly = false;
				colvarLocation.DefaultSetting = @"";
				colvarLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocation);
				
				TableSchema.TableColumn colvarBrowser = new TableSchema.TableColumn(schema);
				colvarBrowser.ColumnName = "Browser";
				colvarBrowser.DataType = DbType.AnsiString;
				colvarBrowser.MaxLength = 50;
				colvarBrowser.AutoIncrement = false;
				colvarBrowser.IsNullable = true;
				colvarBrowser.IsPrimaryKey = false;
				colvarBrowser.IsForeignKey = false;
				colvarBrowser.IsReadOnly = false;
				colvarBrowser.DefaultSetting = @"";
				colvarBrowser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBrowser);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.Int32;
				colvarBranchID.MaxLength = 0;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = true;
				colvarBranchID.IsPrimaryKey = false;
				colvarBranchID.IsForeignKey = true;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				
					colvarBranchID.ForeignKeyTableName = "TblBranch";
				schema.Columns.Add(colvarBranchID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("SystemLogging",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("LogID")]
		[Bindable(true)]
		public int LogID 
		{
			get { return GetColumnValue<int>(Columns.LogID); }
			set { SetColumnValue(Columns.LogID, value); }
		}
		  
		[XmlAttribute("UserID")]
		[Bindable(true)]
		public int? UserID 
		{
			get { return GetColumnValue<int?>(Columns.UserID); }
			set { SetColumnValue(Columns.UserID, value); }
		}
		  
		[XmlAttribute("LogTime")]
		[Bindable(true)]
		public DateTime? LogTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.LogTime); }
			set { SetColumnValue(Columns.LogTime, value); }
		}
		  
		[XmlAttribute("PageAccessed")]
		[Bindable(true)]
		public string PageAccessed 
		{
			get { return GetColumnValue<string>(Columns.PageAccessed); }
			set { SetColumnValue(Columns.PageAccessed, value); }
		}
		  
		[XmlAttribute("Activity")]
		[Bindable(true)]
		public string Activity 
		{
			get { return GetColumnValue<string>(Columns.Activity); }
			set { SetColumnValue(Columns.Activity, value); }
		}
		  
		[XmlAttribute("IpAddress")]
		[Bindable(true)]
		public string IpAddress 
		{
			get { return GetColumnValue<string>(Columns.IpAddress); }
			set { SetColumnValue(Columns.IpAddress, value); }
		}
		  
		[XmlAttribute("Location")]
		[Bindable(true)]
		public string Location 
		{
			get { return GetColumnValue<string>(Columns.Location); }
			set { SetColumnValue(Columns.Location, value); }
		}
		  
		[XmlAttribute("Browser")]
		[Bindable(true)]
		public string Browser 
		{
			get { return GetColumnValue<string>(Columns.Browser); }
			set { SetColumnValue(Columns.Browser, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public int? BranchID 
		{
			get { return GetColumnValue<int?>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblBranch ActiveRecord object related to this SystemLogging
		/// 
		/// </summary>
		public VisitLogDataAccess.TblBranch TblBranch
		{
			get { return VisitLogDataAccess.TblBranch.FetchByID(this.BranchID); }
			set { SetColumnValue("BranchID", value.BranchID); }
		}
		
		
		/// <summary>
		/// Returns a UserLogin ActiveRecord object related to this SystemLogging
		/// 
		/// </summary>
		public VisitLogDataAccess.UserLogin UserLogin
		{
			get { return VisitLogDataAccess.UserLogin.FetchByID(this.UserID); }
			set { SetColumnValue("UserID", value.UserLoginId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varUserID,DateTime? varLogTime,string varPageAccessed,string varActivity,string varIpAddress,string varLocation,string varBrowser,int? varBranchID)
		{
			SystemLogging item = new SystemLogging();
			
			item.UserID = varUserID;
			
			item.LogTime = varLogTime;
			
			item.PageAccessed = varPageAccessed;
			
			item.Activity = varActivity;
			
			item.IpAddress = varIpAddress;
			
			item.Location = varLocation;
			
			item.Browser = varBrowser;
			
			item.BranchID = varBranchID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varLogID,int? varUserID,DateTime? varLogTime,string varPageAccessed,string varActivity,string varIpAddress,string varLocation,string varBrowser,int? varBranchID)
		{
			SystemLogging item = new SystemLogging();
			
				item.LogID = varLogID;
			
				item.UserID = varUserID;
			
				item.LogTime = varLogTime;
			
				item.PageAccessed = varPageAccessed;
			
				item.Activity = varActivity;
			
				item.IpAddress = varIpAddress;
			
				item.Location = varLocation;
			
				item.Browser = varBrowser;
			
				item.BranchID = varBranchID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn LogIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UserIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn LogTimeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PageAccessedColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivityColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IpAddressColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn LocationColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn BrowserColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string LogID = @"LogID";
			 public static string UserID = @"UserID";
			 public static string LogTime = @"LogTime";
			 public static string PageAccessed = @"PageAccessed";
			 public static string Activity = @"Activity";
			 public static string IpAddress = @"IpAddress";
			 public static string Location = @"Location";
			 public static string Browser = @"Browser";
			 public static string BranchID = @"BranchID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
