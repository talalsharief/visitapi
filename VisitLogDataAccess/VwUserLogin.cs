using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VisitLogDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwUserLogin class.
    /// </summary>
    [Serializable]
    public partial class VwUserLoginCollection : ReadOnlyList<VwUserLogin, VwUserLoginCollection>
    {        
        public VwUserLoginCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwUserLogin view.
    /// </summary>
    [Serializable]
    public partial class VwUserLogin : ReadOnlyRecord<VwUserLogin>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwUserLogin", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarUserLoginId = new TableSchema.TableColumn(schema);
                colvarUserLoginId.ColumnName = "UserLoginId";
                colvarUserLoginId.DataType = DbType.Int32;
                colvarUserLoginId.MaxLength = 0;
                colvarUserLoginId.AutoIncrement = false;
                colvarUserLoginId.IsNullable = false;
                colvarUserLoginId.IsPrimaryKey = false;
                colvarUserLoginId.IsForeignKey = false;
                colvarUserLoginId.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserLoginId);
                
                TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
                colvarUserName.ColumnName = "UserName";
                colvarUserName.DataType = DbType.AnsiString;
                colvarUserName.MaxLength = 50;
                colvarUserName.AutoIncrement = false;
                colvarUserName.IsNullable = false;
                colvarUserName.IsPrimaryKey = false;
                colvarUserName.IsForeignKey = false;
                colvarUserName.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserName);
                
                TableSchema.TableColumn colvarPassworrd = new TableSchema.TableColumn(schema);
                colvarPassworrd.ColumnName = "Passworrd";
                colvarPassworrd.DataType = DbType.AnsiString;
                colvarPassworrd.MaxLength = 50;
                colvarPassworrd.AutoIncrement = false;
                colvarPassworrd.IsNullable = false;
                colvarPassworrd.IsPrimaryKey = false;
                colvarPassworrd.IsForeignKey = false;
                colvarPassworrd.IsReadOnly = false;
                
                schema.Columns.Add(colvarPassworrd);
                
                TableSchema.TableColumn colvarEmailAddress = new TableSchema.TableColumn(schema);
                colvarEmailAddress.ColumnName = "EmailAddress";
                colvarEmailAddress.DataType = DbType.AnsiString;
                colvarEmailAddress.MaxLength = 50;
                colvarEmailAddress.AutoIncrement = false;
                colvarEmailAddress.IsNullable = true;
                colvarEmailAddress.IsPrimaryKey = false;
                colvarEmailAddress.IsForeignKey = false;
                colvarEmailAddress.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmailAddress);
                
                TableSchema.TableColumn colvarUserRoleId = new TableSchema.TableColumn(schema);
                colvarUserRoleId.ColumnName = "UserRoleId";
                colvarUserRoleId.DataType = DbType.Int32;
                colvarUserRoleId.MaxLength = 0;
                colvarUserRoleId.AutoIncrement = false;
                colvarUserRoleId.IsNullable = false;
                colvarUserRoleId.IsPrimaryKey = false;
                colvarUserRoleId.IsForeignKey = false;
                colvarUserRoleId.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserRoleId);
                
                TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
                colvarIsActive.ColumnName = "IsActive";
                colvarIsActive.DataType = DbType.Boolean;
                colvarIsActive.MaxLength = 0;
                colvarIsActive.AutoIncrement = false;
                colvarIsActive.IsNullable = false;
                colvarIsActive.IsPrimaryKey = false;
                colvarIsActive.IsForeignKey = false;
                colvarIsActive.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsActive);
                
                TableSchema.TableColumn colvarUserType = new TableSchema.TableColumn(schema);
                colvarUserType.ColumnName = "UserType";
                colvarUserType.DataType = DbType.AnsiString;
                colvarUserType.MaxLength = 200;
                colvarUserType.AutoIncrement = false;
                colvarUserType.IsNullable = true;
                colvarUserType.IsPrimaryKey = false;
                colvarUserType.IsForeignKey = false;
                colvarUserType.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserType);
                
                TableSchema.TableColumn colvarEmployeeId = new TableSchema.TableColumn(schema);
                colvarEmployeeId.ColumnName = "EmployeeId";
                colvarEmployeeId.DataType = DbType.Int32;
                colvarEmployeeId.MaxLength = 0;
                colvarEmployeeId.AutoIncrement = false;
                colvarEmployeeId.IsNullable = true;
                colvarEmployeeId.IsPrimaryKey = false;
                colvarEmployeeId.IsForeignKey = false;
                colvarEmployeeId.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmployeeId);
                
                TableSchema.TableColumn colvarIsAdmin = new TableSchema.TableColumn(schema);
                colvarIsAdmin.ColumnName = "IsAdmin";
                colvarIsAdmin.DataType = DbType.Boolean;
                colvarIsAdmin.MaxLength = 0;
                colvarIsAdmin.AutoIncrement = false;
                colvarIsAdmin.IsNullable = true;
                colvarIsAdmin.IsPrimaryKey = false;
                colvarIsAdmin.IsForeignKey = false;
                colvarIsAdmin.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsAdmin);
                
                TableSchema.TableColumn colvarEmployeeCode = new TableSchema.TableColumn(schema);
                colvarEmployeeCode.ColumnName = "EmployeeCode";
                colvarEmployeeCode.DataType = DbType.AnsiString;
                colvarEmployeeCode.MaxLength = 20;
                colvarEmployeeCode.AutoIncrement = false;
                colvarEmployeeCode.IsNullable = true;
                colvarEmployeeCode.IsPrimaryKey = false;
                colvarEmployeeCode.IsForeignKey = false;
                colvarEmployeeCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmployeeCode);
                
                TableSchema.TableColumn colvarUserRoleName = new TableSchema.TableColumn(schema);
                colvarUserRoleName.ColumnName = "UserRoleName";
                colvarUserRoleName.DataType = DbType.AnsiString;
                colvarUserRoleName.MaxLength = 50;
                colvarUserRoleName.AutoIncrement = false;
                colvarUserRoleName.IsNullable = true;
                colvarUserRoleName.IsPrimaryKey = false;
                colvarUserRoleName.IsForeignKey = false;
                colvarUserRoleName.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserRoleName);
                
                TableSchema.TableColumn colvarEmployeeName = new TableSchema.TableColumn(schema);
                colvarEmployeeName.ColumnName = "EmployeeName";
                colvarEmployeeName.DataType = DbType.AnsiString;
                colvarEmployeeName.MaxLength = 100;
                colvarEmployeeName.AutoIncrement = false;
                colvarEmployeeName.IsNullable = true;
                colvarEmployeeName.IsPrimaryKey = false;
                colvarEmployeeName.IsForeignKey = false;
                colvarEmployeeName.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmployeeName);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwUserLogin",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwUserLogin()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwUserLogin(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwUserLogin(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwUserLogin(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("UserLoginId")]
        [Bindable(true)]
        public int UserLoginId 
	    {
		    get
		    {
			    return GetColumnValue<int>("UserLoginId");
		    }
            set 
		    {
			    SetColumnValue("UserLoginId", value);
            }
        }
	      
        [XmlAttribute("UserName")]
        [Bindable(true)]
        public string UserName 
	    {
		    get
		    {
			    return GetColumnValue<string>("UserName");
		    }
            set 
		    {
			    SetColumnValue("UserName", value);
            }
        }
	      
        [XmlAttribute("Passworrd")]
        [Bindable(true)]
        public string Passworrd 
	    {
		    get
		    {
			    return GetColumnValue<string>("Passworrd");
		    }
            set 
		    {
			    SetColumnValue("Passworrd", value);
            }
        }
	      
        [XmlAttribute("EmailAddress")]
        [Bindable(true)]
        public string EmailAddress 
	    {
		    get
		    {
			    return GetColumnValue<string>("EmailAddress");
		    }
            set 
		    {
			    SetColumnValue("EmailAddress", value);
            }
        }
	      
        [XmlAttribute("UserRoleId")]
        [Bindable(true)]
        public int UserRoleId 
	    {
		    get
		    {
			    return GetColumnValue<int>("UserRoleId");
		    }
            set 
		    {
			    SetColumnValue("UserRoleId", value);
            }
        }
	      
        [XmlAttribute("IsActive")]
        [Bindable(true)]
        public bool IsActive 
	    {
		    get
		    {
			    return GetColumnValue<bool>("IsActive");
		    }
            set 
		    {
			    SetColumnValue("IsActive", value);
            }
        }
	      
        [XmlAttribute("UserType")]
        [Bindable(true)]
        public string UserType 
	    {
		    get
		    {
			    return GetColumnValue<string>("UserType");
		    }
            set 
		    {
			    SetColumnValue("UserType", value);
            }
        }
	      
        [XmlAttribute("EmployeeId")]
        [Bindable(true)]
        public int? EmployeeId 
	    {
		    get
		    {
			    return GetColumnValue<int?>("EmployeeId");
		    }
            set 
		    {
			    SetColumnValue("EmployeeId", value);
            }
        }
	      
        [XmlAttribute("IsAdmin")]
        [Bindable(true)]
        public bool? IsAdmin 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("IsAdmin");
		    }
            set 
		    {
			    SetColumnValue("IsAdmin", value);
            }
        }
	      
        [XmlAttribute("EmployeeCode")]
        [Bindable(true)]
        public string EmployeeCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("EmployeeCode");
		    }
            set 
		    {
			    SetColumnValue("EmployeeCode", value);
            }
        }
	      
        [XmlAttribute("UserRoleName")]
        [Bindable(true)]
        public string UserRoleName 
	    {
		    get
		    {
			    return GetColumnValue<string>("UserRoleName");
		    }
            set 
		    {
			    SetColumnValue("UserRoleName", value);
            }
        }
	      
        [XmlAttribute("EmployeeName")]
        [Bindable(true)]
        public string EmployeeName 
	    {
		    get
		    {
			    return GetColumnValue<string>("EmployeeName");
		    }
            set 
		    {
			    SetColumnValue("EmployeeName", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string UserLoginId = @"UserLoginId";
            
            public static string UserName = @"UserName";
            
            public static string Passworrd = @"Passworrd";
            
            public static string EmailAddress = @"EmailAddress";
            
            public static string UserRoleId = @"UserRoleId";
            
            public static string IsActive = @"IsActive";
            
            public static string UserType = @"UserType";
            
            public static string EmployeeId = @"EmployeeId";
            
            public static string IsAdmin = @"IsAdmin";
            
            public static string EmployeeCode = @"EmployeeCode";
            
            public static string UserRoleName = @"UserRoleName";
            
            public static string EmployeeName = @"EmployeeName";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
