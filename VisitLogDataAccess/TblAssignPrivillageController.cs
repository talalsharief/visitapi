using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VisitLogDataAccess
{
    /// <summary>
    /// Controller class for TblAssignPrivillage
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TblAssignPrivillageController
    {
        // Preload our schema..
        TblAssignPrivillage thisSchemaLoad = new TblAssignPrivillage();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblAssignPrivillageCollection FetchAll()
        {
            TblAssignPrivillageCollection coll = new TblAssignPrivillageCollection();
            Query qry = new Query(TblAssignPrivillage.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblAssignPrivillageCollection FetchByID(object PrivillagePageID)
        {
            TblAssignPrivillageCollection coll = new TblAssignPrivillageCollection().Where("PrivillagePageID", PrivillagePageID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblAssignPrivillageCollection FetchByQuery(Query qry)
        {
            TblAssignPrivillageCollection coll = new TblAssignPrivillageCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object PrivillagePageID)
        {
            return (TblAssignPrivillage.Delete(PrivillagePageID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object PrivillagePageID)
        {
            return (TblAssignPrivillage.Destroy(PrivillagePageID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string PageName,int? ViewID,int? AddID,int? EditID,int? DeleteID,bool? IsActive,int? ModuleID,int? DisplayOrder)
	    {
		    TblAssignPrivillage item = new TblAssignPrivillage();
		    
            item.PageName = PageName;
            
            item.ViewID = ViewID;
            
            item.AddID = AddID;
            
            item.EditID = EditID;
            
            item.DeleteID = DeleteID;
            
            item.IsActive = IsActive;
            
            item.ModuleID = ModuleID;
            
            item.DisplayOrder = DisplayOrder;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int PrivillagePageID,string PageName,int? ViewID,int? AddID,int? EditID,int? DeleteID,bool? IsActive,int? ModuleID,int? DisplayOrder)
	    {
		    TblAssignPrivillage item = new TblAssignPrivillage();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.PrivillagePageID = PrivillagePageID;
				
			item.PageName = PageName;
				
			item.ViewID = ViewID;
				
			item.AddID = AddID;
				
			item.EditID = EditID;
				
			item.DeleteID = DeleteID;
				
			item.IsActive = IsActive;
				
			item.ModuleID = ModuleID;
				
			item.DisplayOrder = DisplayOrder;
				
	        item.Save(UserName);
	    }
    }
}
