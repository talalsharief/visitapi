using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VisitLogDataAccess
{
	/// <summary>
	/// Strongly-typed collection for the Privillage class.
	/// </summary>
    [Serializable]
	public partial class PrivillageCollection : ActiveList<Privillage, PrivillageCollection>
	{	   
		public PrivillageCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PrivillageCollection</returns>
		public PrivillageCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Privillage o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Privillage table.
	/// </summary>
	[Serializable]
	public partial class Privillage : ActiveRecord<Privillage>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Privillage()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Privillage(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Privillage(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Privillage(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Privillage", TableType.Table, DataService.GetInstance("PrimaryProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPrivillageId = new TableSchema.TableColumn(schema);
				colvarPrivillageId.ColumnName = "PrivillageId";
				colvarPrivillageId.DataType = DbType.Int32;
				colvarPrivillageId.MaxLength = 0;
				colvarPrivillageId.AutoIncrement = true;
				colvarPrivillageId.IsNullable = false;
				colvarPrivillageId.IsPrimaryKey = true;
				colvarPrivillageId.IsForeignKey = false;
				colvarPrivillageId.IsReadOnly = false;
				colvarPrivillageId.DefaultSetting = @"";
				colvarPrivillageId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrivillageId);
				
				TableSchema.TableColumn colvarPrivillageName = new TableSchema.TableColumn(schema);
				colvarPrivillageName.ColumnName = "PrivillageName";
				colvarPrivillageName.DataType = DbType.AnsiString;
				colvarPrivillageName.MaxLength = 50;
				colvarPrivillageName.AutoIncrement = false;
				colvarPrivillageName.IsNullable = false;
				colvarPrivillageName.IsPrimaryKey = false;
				colvarPrivillageName.IsForeignKey = false;
				colvarPrivillageName.IsReadOnly = false;
				colvarPrivillageName.DefaultSetting = @"";
				colvarPrivillageName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrivillageName);
				
				TableSchema.TableColumn colvarPrivillageDescription = new TableSchema.TableColumn(schema);
				colvarPrivillageDescription.ColumnName = "PrivillageDescription";
				colvarPrivillageDescription.DataType = DbType.AnsiString;
				colvarPrivillageDescription.MaxLength = 100;
				colvarPrivillageDescription.AutoIncrement = false;
				colvarPrivillageDescription.IsNullable = true;
				colvarPrivillageDescription.IsPrimaryKey = false;
				colvarPrivillageDescription.IsForeignKey = false;
				colvarPrivillageDescription.IsReadOnly = false;
				colvarPrivillageDescription.DefaultSetting = @"";
				colvarPrivillageDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrivillageDescription);
				
				TableSchema.TableColumn colvarAccessLevel = new TableSchema.TableColumn(schema);
				colvarAccessLevel.ColumnName = "AccessLevel";
				colvarAccessLevel.DataType = DbType.AnsiString;
				colvarAccessLevel.MaxLength = 50;
				colvarAccessLevel.AutoIncrement = false;
				colvarAccessLevel.IsNullable = true;
				colvarAccessLevel.IsPrimaryKey = false;
				colvarAccessLevel.IsForeignKey = false;
				colvarAccessLevel.IsReadOnly = false;
				colvarAccessLevel.DefaultSetting = @"";
				colvarAccessLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccessLevel);
				
				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				
						colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["PrimaryProvider"].AddSchema("Privillage",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PrivillageId")]
		[Bindable(true)]
		public int PrivillageId 
		{
			get { return GetColumnValue<int>(Columns.PrivillageId); }
			set { SetColumnValue(Columns.PrivillageId, value); }
		}
		  
		[XmlAttribute("PrivillageName")]
		[Bindable(true)]
		public string PrivillageName 
		{
			get { return GetColumnValue<string>(Columns.PrivillageName); }
			set { SetColumnValue(Columns.PrivillageName, value); }
		}
		  
		[XmlAttribute("PrivillageDescription")]
		[Bindable(true)]
		public string PrivillageDescription 
		{
			get { return GetColumnValue<string>(Columns.PrivillageDescription); }
			set { SetColumnValue(Columns.PrivillageDescription, value); }
		}
		  
		[XmlAttribute("AccessLevel")]
		[Bindable(true)]
		public string AccessLevel 
		{
			get { return GetColumnValue<string>(Columns.AccessLevel); }
			set { SetColumnValue(Columns.AccessLevel, value); }
		}
		  
		[XmlAttribute("IsActive")]
		[Bindable(true)]
		public bool? IsActive 
		{
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public VisitLogDataAccess.TblAssignPrivillageCollection TblAssignPrivillageRecords()
		{
			return new VisitLogDataAccess.TblAssignPrivillageCollection().Where(TblAssignPrivillage.Columns.ViewID, PrivillageId).Load();
		}
		public VisitLogDataAccess.TblAssignPrivillageCollection TblAssignPrivillageRecordsFromPrivillage()
		{
			return new VisitLogDataAccess.TblAssignPrivillageCollection().Where(TblAssignPrivillage.Columns.AddID, PrivillageId).Load();
		}
		public VisitLogDataAccess.TblAssignPrivillageCollection TblAssignPrivillageRecordsFromPrivillageEditID()
		{
			return new VisitLogDataAccess.TblAssignPrivillageCollection().Where(TblAssignPrivillage.Columns.EditID, PrivillageId).Load();
		}
		public VisitLogDataAccess.TblAssignPrivillageCollection TblAssignPrivillageRecordsFromPrivillageDeleteID()
		{
			return new VisitLogDataAccess.TblAssignPrivillageCollection().Where(TblAssignPrivillage.Columns.DeleteID, PrivillageId).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPrivillageName,string varPrivillageDescription,string varAccessLevel,bool? varIsActive)
		{
			Privillage item = new Privillage();
			
			item.PrivillageName = varPrivillageName;
			
			item.PrivillageDescription = varPrivillageDescription;
			
			item.AccessLevel = varAccessLevel;
			
			item.IsActive = varIsActive;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPrivillageId,string varPrivillageName,string varPrivillageDescription,string varAccessLevel,bool? varIsActive)
		{
			Privillage item = new Privillage();
			
				item.PrivillageId = varPrivillageId;
			
				item.PrivillageName = varPrivillageName;
			
				item.PrivillageDescription = varPrivillageDescription;
			
				item.AccessLevel = varAccessLevel;
			
				item.IsActive = varIsActive;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PrivillageIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PrivillageNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PrivillageDescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AccessLevelColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActiveColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PrivillageId = @"PrivillageId";
			 public static string PrivillageName = @"PrivillageName";
			 public static string PrivillageDescription = @"PrivillageDescription";
			 public static string AccessLevel = @"AccessLevel";
			 public static string IsActive = @"IsActive";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
