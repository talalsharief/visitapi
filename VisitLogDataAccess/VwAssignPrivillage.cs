using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VisitLogDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwAssignPrivillage class.
    /// </summary>
    [Serializable]
    public partial class VwAssignPrivillageCollection : ReadOnlyList<VwAssignPrivillage, VwAssignPrivillageCollection>
    {        
        public VwAssignPrivillageCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwAssignPrivillage view.
    /// </summary>
    [Serializable]
    public partial class VwAssignPrivillage : ReadOnlyRecord<VwAssignPrivillage>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwAssignPrivillage", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarPageName = new TableSchema.TableColumn(schema);
                colvarPageName.ColumnName = "PageName";
                colvarPageName.DataType = DbType.AnsiString;
                colvarPageName.MaxLength = 150;
                colvarPageName.AutoIncrement = false;
                colvarPageName.IsNullable = true;
                colvarPageName.IsPrimaryKey = false;
                colvarPageName.IsForeignKey = false;
                colvarPageName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPageName);
                
                TableSchema.TableColumn colvarViewID = new TableSchema.TableColumn(schema);
                colvarViewID.ColumnName = "ViewID";
                colvarViewID.DataType = DbType.Int32;
                colvarViewID.MaxLength = 0;
                colvarViewID.AutoIncrement = false;
                colvarViewID.IsNullable = true;
                colvarViewID.IsPrimaryKey = false;
                colvarViewID.IsForeignKey = false;
                colvarViewID.IsReadOnly = false;
                
                schema.Columns.Add(colvarViewID);
                
                TableSchema.TableColumn colvarAddID = new TableSchema.TableColumn(schema);
                colvarAddID.ColumnName = "AddID";
                colvarAddID.DataType = DbType.Int32;
                colvarAddID.MaxLength = 0;
                colvarAddID.AutoIncrement = false;
                colvarAddID.IsNullable = true;
                colvarAddID.IsPrimaryKey = false;
                colvarAddID.IsForeignKey = false;
                colvarAddID.IsReadOnly = false;
                
                schema.Columns.Add(colvarAddID);
                
                TableSchema.TableColumn colvarEditID = new TableSchema.TableColumn(schema);
                colvarEditID.ColumnName = "EditID";
                colvarEditID.DataType = DbType.Int32;
                colvarEditID.MaxLength = 0;
                colvarEditID.AutoIncrement = false;
                colvarEditID.IsNullable = true;
                colvarEditID.IsPrimaryKey = false;
                colvarEditID.IsForeignKey = false;
                colvarEditID.IsReadOnly = false;
                
                schema.Columns.Add(colvarEditID);
                
                TableSchema.TableColumn colvarDeleteID = new TableSchema.TableColumn(schema);
                colvarDeleteID.ColumnName = "DeleteID";
                colvarDeleteID.DataType = DbType.Int32;
                colvarDeleteID.MaxLength = 0;
                colvarDeleteID.AutoIncrement = false;
                colvarDeleteID.IsNullable = true;
                colvarDeleteID.IsPrimaryKey = false;
                colvarDeleteID.IsForeignKey = false;
                colvarDeleteID.IsReadOnly = false;
                
                schema.Columns.Add(colvarDeleteID);
                
                TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
                colvarIsActive.ColumnName = "IsActive";
                colvarIsActive.DataType = DbType.Boolean;
                colvarIsActive.MaxLength = 0;
                colvarIsActive.AutoIncrement = false;
                colvarIsActive.IsNullable = true;
                colvarIsActive.IsPrimaryKey = false;
                colvarIsActive.IsForeignKey = false;
                colvarIsActive.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsActive);
                
                TableSchema.TableColumn colvarModuleID = new TableSchema.TableColumn(schema);
                colvarModuleID.ColumnName = "ModuleID";
                colvarModuleID.DataType = DbType.Int32;
                colvarModuleID.MaxLength = 0;
                colvarModuleID.AutoIncrement = false;
                colvarModuleID.IsNullable = true;
                colvarModuleID.IsPrimaryKey = false;
                colvarModuleID.IsForeignKey = false;
                colvarModuleID.IsReadOnly = false;
                
                schema.Columns.Add(colvarModuleID);
                
                TableSchema.TableColumn colvarDisplayOrder = new TableSchema.TableColumn(schema);
                colvarDisplayOrder.ColumnName = "DisplayOrder";
                colvarDisplayOrder.DataType = DbType.Int32;
                colvarDisplayOrder.MaxLength = 0;
                colvarDisplayOrder.AutoIncrement = false;
                colvarDisplayOrder.IsNullable = true;
                colvarDisplayOrder.IsPrimaryKey = false;
                colvarDisplayOrder.IsForeignKey = false;
                colvarDisplayOrder.IsReadOnly = false;
                
                schema.Columns.Add(colvarDisplayOrder);
                
                TableSchema.TableColumn colvarModuleName = new TableSchema.TableColumn(schema);
                colvarModuleName.ColumnName = "ModuleName";
                colvarModuleName.DataType = DbType.AnsiString;
                colvarModuleName.MaxLength = 150;
                colvarModuleName.AutoIncrement = false;
                colvarModuleName.IsNullable = true;
                colvarModuleName.IsPrimaryKey = false;
                colvarModuleName.IsForeignKey = false;
                colvarModuleName.IsReadOnly = false;
                
                schema.Columns.Add(colvarModuleName);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwAssignPrivillage",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwAssignPrivillage()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwAssignPrivillage(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwAssignPrivillage(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwAssignPrivillage(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("PageName")]
        [Bindable(true)]
        public string PageName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PageName");
		    }
            set 
		    {
			    SetColumnValue("PageName", value);
            }
        }
	      
        [XmlAttribute("ViewID")]
        [Bindable(true)]
        public int? ViewID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ViewID");
		    }
            set 
		    {
			    SetColumnValue("ViewID", value);
            }
        }
	      
        [XmlAttribute("AddID")]
        [Bindable(true)]
        public int? AddID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("AddID");
		    }
            set 
		    {
			    SetColumnValue("AddID", value);
            }
        }
	      
        [XmlAttribute("EditID")]
        [Bindable(true)]
        public int? EditID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("EditID");
		    }
            set 
		    {
			    SetColumnValue("EditID", value);
            }
        }
	      
        [XmlAttribute("DeleteID")]
        [Bindable(true)]
        public int? DeleteID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("DeleteID");
		    }
            set 
		    {
			    SetColumnValue("DeleteID", value);
            }
        }
	      
        [XmlAttribute("IsActive")]
        [Bindable(true)]
        public bool? IsActive 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("IsActive");
		    }
            set 
		    {
			    SetColumnValue("IsActive", value);
            }
        }
	      
        [XmlAttribute("ModuleID")]
        [Bindable(true)]
        public int? ModuleID 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ModuleID");
		    }
            set 
		    {
			    SetColumnValue("ModuleID", value);
            }
        }
	      
        [XmlAttribute("DisplayOrder")]
        [Bindable(true)]
        public int? DisplayOrder 
	    {
		    get
		    {
			    return GetColumnValue<int?>("DisplayOrder");
		    }
            set 
		    {
			    SetColumnValue("DisplayOrder", value);
            }
        }
	      
        [XmlAttribute("ModuleName")]
        [Bindable(true)]
        public string ModuleName 
	    {
		    get
		    {
			    return GetColumnValue<string>("ModuleName");
		    }
            set 
		    {
			    SetColumnValue("ModuleName", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string PageName = @"PageName";
            
            public static string ViewID = @"ViewID";
            
            public static string AddID = @"AddID";
            
            public static string EditID = @"EditID";
            
            public static string DeleteID = @"DeleteID";
            
            public static string IsActive = @"IsActive";
            
            public static string ModuleID = @"ModuleID";
            
            public static string DisplayOrder = @"DisplayOrder";
            
            public static string ModuleName = @"ModuleName";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
