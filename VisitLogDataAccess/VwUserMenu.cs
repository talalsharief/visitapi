using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VisitLogDataAccess{
    /// <summary>
    /// Strongly-typed collection for the VwUserMenu class.
    /// </summary>
    [Serializable]
    public partial class VwUserMenuCollection : ReadOnlyList<VwUserMenu, VwUserMenuCollection>
    {        
        public VwUserMenuCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the VwUserMenu view.
    /// </summary>
    [Serializable]
    public partial class VwUserMenu : ReadOnlyRecord<VwUserMenu>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("VwUserMenu", TableType.View, DataService.GetInstance("PrimaryProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarPrivillageId = new TableSchema.TableColumn(schema);
                colvarPrivillageId.ColumnName = "PrivillageId";
                colvarPrivillageId.DataType = DbType.Int32;
                colvarPrivillageId.MaxLength = 0;
                colvarPrivillageId.AutoIncrement = false;
                colvarPrivillageId.IsNullable = false;
                colvarPrivillageId.IsPrimaryKey = false;
                colvarPrivillageId.IsForeignKey = false;
                colvarPrivillageId.IsReadOnly = false;
                
                schema.Columns.Add(colvarPrivillageId);
                
                TableSchema.TableColumn colvarUserMenuId = new TableSchema.TableColumn(schema);
                colvarUserMenuId.ColumnName = "UserMenuId";
                colvarUserMenuId.DataType = DbType.Int32;
                colvarUserMenuId.MaxLength = 0;
                colvarUserMenuId.AutoIncrement = false;
                colvarUserMenuId.IsNullable = false;
                colvarUserMenuId.IsPrimaryKey = false;
                colvarUserMenuId.IsForeignKey = false;
                colvarUserMenuId.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserMenuId);
                
                TableSchema.TableColumn colvarPrivillageName = new TableSchema.TableColumn(schema);
                colvarPrivillageName.ColumnName = "PrivillageName";
                colvarPrivillageName.DataType = DbType.AnsiString;
                colvarPrivillageName.MaxLength = 50;
                colvarPrivillageName.AutoIncrement = false;
                colvarPrivillageName.IsNullable = false;
                colvarPrivillageName.IsPrimaryKey = false;
                colvarPrivillageName.IsForeignKey = false;
                colvarPrivillageName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPrivillageName);
                
                TableSchema.TableColumn colvarMenuTitle = new TableSchema.TableColumn(schema);
                colvarMenuTitle.ColumnName = "MenuTitle";
                colvarMenuTitle.DataType = DbType.AnsiString;
                colvarMenuTitle.MaxLength = 50;
                colvarMenuTitle.AutoIncrement = false;
                colvarMenuTitle.IsNullable = false;
                colvarMenuTitle.IsPrimaryKey = false;
                colvarMenuTitle.IsForeignKey = false;
                colvarMenuTitle.IsReadOnly = false;
                
                schema.Columns.Add(colvarMenuTitle);
                
                TableSchema.TableColumn colvarPageUrl = new TableSchema.TableColumn(schema);
                colvarPageUrl.ColumnName = "PageUrl";
                colvarPageUrl.DataType = DbType.AnsiString;
                colvarPageUrl.MaxLength = 50;
                colvarPageUrl.AutoIncrement = false;
                colvarPageUrl.IsNullable = false;
                colvarPageUrl.IsPrimaryKey = false;
                colvarPageUrl.IsForeignKey = false;
                colvarPageUrl.IsReadOnly = false;
                
                schema.Columns.Add(colvarPageUrl);
                
                TableSchema.TableColumn colvarTopMenuTitle = new TableSchema.TableColumn(schema);
                colvarTopMenuTitle.ColumnName = "TopMenuTitle";
                colvarTopMenuTitle.DataType = DbType.AnsiString;
                colvarTopMenuTitle.MaxLength = 50;
                colvarTopMenuTitle.AutoIncrement = false;
                colvarTopMenuTitle.IsNullable = false;
                colvarTopMenuTitle.IsPrimaryKey = false;
                colvarTopMenuTitle.IsForeignKey = false;
                colvarTopMenuTitle.IsReadOnly = false;
                
                schema.Columns.Add(colvarTopMenuTitle);
                
                TableSchema.TableColumn colvarModuleName = new TableSchema.TableColumn(schema);
                colvarModuleName.ColumnName = "ModuleName";
                colvarModuleName.DataType = DbType.AnsiString;
                colvarModuleName.MaxLength = 150;
                colvarModuleName.AutoIncrement = false;
                colvarModuleName.IsNullable = true;
                colvarModuleName.IsPrimaryKey = false;
                colvarModuleName.IsForeignKey = false;
                colvarModuleName.IsReadOnly = false;
                
                schema.Columns.Add(colvarModuleName);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["PrimaryProvider"].AddSchema("VwUserMenu",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwUserMenu()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwUserMenu(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwUserMenu(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwUserMenu(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("PrivillageId")]
        [Bindable(true)]
        public int PrivillageId 
	    {
		    get
		    {
			    return GetColumnValue<int>("PrivillageId");
		    }
            set 
		    {
			    SetColumnValue("PrivillageId", value);
            }
        }
	      
        [XmlAttribute("UserMenuId")]
        [Bindable(true)]
        public int UserMenuId 
	    {
		    get
		    {
			    return GetColumnValue<int>("UserMenuId");
		    }
            set 
		    {
			    SetColumnValue("UserMenuId", value);
            }
        }
	      
        [XmlAttribute("PrivillageName")]
        [Bindable(true)]
        public string PrivillageName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PrivillageName");
		    }
            set 
		    {
			    SetColumnValue("PrivillageName", value);
            }
        }
	      
        [XmlAttribute("MenuTitle")]
        [Bindable(true)]
        public string MenuTitle 
	    {
		    get
		    {
			    return GetColumnValue<string>("MenuTitle");
		    }
            set 
		    {
			    SetColumnValue("MenuTitle", value);
            }
        }
	      
        [XmlAttribute("PageUrl")]
        [Bindable(true)]
        public string PageUrl 
	    {
		    get
		    {
			    return GetColumnValue<string>("PageUrl");
		    }
            set 
		    {
			    SetColumnValue("PageUrl", value);
            }
        }
	      
        [XmlAttribute("TopMenuTitle")]
        [Bindable(true)]
        public string TopMenuTitle 
	    {
		    get
		    {
			    return GetColumnValue<string>("TopMenuTitle");
		    }
            set 
		    {
			    SetColumnValue("TopMenuTitle", value);
            }
        }
	      
        [XmlAttribute("ModuleName")]
        [Bindable(true)]
        public string ModuleName 
	    {
		    get
		    {
			    return GetColumnValue<string>("ModuleName");
		    }
            set 
		    {
			    SetColumnValue("ModuleName", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string PrivillageId = @"PrivillageId";
            
            public static string UserMenuId = @"UserMenuId";
            
            public static string PrivillageName = @"PrivillageName";
            
            public static string MenuTitle = @"MenuTitle";
            
            public static string PageUrl = @"PageUrl";
            
            public static string TopMenuTitle = @"TopMenuTitle";
            
            public static string ModuleName = @"ModuleName";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
